// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {
  OAuth2Client,
  JWT,
  Compute,
  UserRefreshClient,
} from 'google-auth-library';
import {
  GoogleConfigurable,
  createAPIRequest,
  MethodOptions,
  GlobalOptions,
  BodyResponseCallback,
  APIRequestContext,
} from 'googleapis-common';
import {GaxiosPromise} from 'gaxios';

// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
// tslint:disable: no-namespace

export namespace apigee_v1 {
  export interface Options extends GlobalOptions {
    version: 'v1';
  }

  interface StandardParameters {
    /**
     * V1 error format.
     */
    '$.xgafv'?: string;
    /**
     * OAuth access token.
     */
    access_token?: string;
    /**
     * Data format for response.
     */
    alt?: string;
    /**
     * JSONP
     */
    callback?: string;
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    uploadType?: string;
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    upload_protocol?: string;
  }

  /**
   * Apigee API
   *
   * The Apigee API lets you programmatically manage Apigee hybrid with a set of RESTful operations, including:&lt;ul&gt;  &lt;li&gt;Create, edit, and delete API proxies&lt;/li&gt;  &lt;li&gt;Manage users&lt;/li&gt;  &lt;li&gt;Deploy and undeploy proxy revisions&lt;/li&gt;  &lt;li&gt;Configure environments&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For information on using the APIs described in this section, see &lt;a href=&quot;/hybrid/api-get-started&quot;&gt;Get started using the APIs&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This product is available as a free trial for a time period of 60 days.
   *
   * @example
   * const {google} = require('googleapis');
   * const apigee = google.apigee('v1');
   *
   * @namespace apigee
   * @type {Function}
   * @version v1
   * @variation v1
   * @param {object=} options Options for Apigee
   */
  export class Apigee {
    context: APIRequestContext;
    hybrid: Resource$Hybrid;
    organizations: Resource$Organizations;

    constructor(options: GlobalOptions, google?: GoogleConfigurable) {
      this.context = {
        _options: options || {},
        google,
      };

      this.hybrid = new Resource$Hybrid(this.context);
      this.organizations = new Resource$Organizations(this.context);
    }
  }

  /**
   * Message that represents an arbitrary HTTP body. It should only be used for payload formats that can&#39;t be represented as JSON, such as raw binary or an HTML page.   This message can be used both in streaming and non-streaming API methods in the request as well as the response.  It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body.  Example:      message GetResourceRequest {       // A unique request id.       string request_id = 1;        // The raw HTTP body is bound to this field.       google.api.HttpBody http_body = 2;     }      service ResourceService {       rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);       rpc UpdateResource(google.api.HttpBody) returns       (google.protobuf.Empty);     }  Example with streaming methods:      service CaldavService {       rpc GetCalendar(stream google.api.HttpBody)         returns (stream google.api.HttpBody);       rpc UpdateCalendar(stream google.api.HttpBody)         returns (stream google.api.HttpBody);     }  Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
   */
  export interface Schema$GoogleApiHttpBody {
    /**
     * The HTTP Content-Type header value specifying the content type of the body.
     */
    contentType?: string | null;
    /**
     * The HTTP request/response body as raw binary.
     */
    data?: string | null;
    /**
     * Application specific response metadata. Must be set in the first response for streaming APIs.
     */
    extensions?: Array<{[key: string]: any}> | null;
  }
  export interface Schema$GoogleCloudApigeeV1Access {
    Get?: Schema$GoogleCloudApigeeV1AccessGet;
    Remove?: Schema$GoogleCloudApigeeV1AccessRemove;
    Set?: Schema$GoogleCloudApigeeV1AccessSet;
  }
  /**
   * Get action. For example, &quot;Get&quot; : {   &quot;name&quot; : &quot;target.name&quot;,   &quot;value&quot; : &quot;default&quot; }
   */
  export interface Schema$GoogleCloudApigeeV1AccessGet {
    name?: string | null;
    value?: string | null;
  }
  /**
   * Remove action. For example, &quot;Remove&quot; : {   &quot;name&quot; : &quot;target.name&quot;,   &quot;success&quot; : true }
   */
  export interface Schema$GoogleCloudApigeeV1AccessRemove {
    name?: string | null;
    success?: boolean | null;
  }
  /**
   * Set action. For example, &quot;Set&quot; : {   &quot;name&quot; : &quot;target.name&quot;,   &quot;success&quot; : true,   &quot;value&quot; : &quot;default&quot; }
   */
  export interface Schema$GoogleCloudApigeeV1AccessSet {
    name?: string | null;
    success?: boolean | null;
    value?: string | null;
  }
  /**
   * A reference to a certificate or key, certificate pair.
   */
  export interface Schema$GoogleCloudApigeeV1Alias {
    /**
     * The resource ID for this alias. Values must match regular expression `[^/]{1,255}`.
     */
    alias?: string | null;
    /**
     * The chain of certificates under this alias.
     */
    certsInfo?: Schema$GoogleCloudApigeeV1Certificate;
    /**
     * The type of alias.
     */
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1AliasRevisionConfig {
    /**
     * The location of the alias file, e.g. a GCS URI.
     */
    location?: string | null;
    /**
     * The name of the alias revision included in the keystore. Must be of the form: &#39;organizations/{org}/environments/{env}/keystores/{keystore}/aliases/{alias}/revisions/{rev}&#39;.
     */
    name?: string | null;
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1AnalyticsUpdatePayload {
    /**
     * Details of the custom analytics script.
     */
    analyticsScript?: string | null;
    /**
     * ID of the custom analytics script.
     */
    analyticsTrackingId?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Announcement {
    /**
     * Details of the announcement.
     */
    data?: Schema$GoogleCloudApigeeV1AnnouncementData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1AnnouncementData {
    /**
     * Details of the announcement.
     */
    message?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ApiDoc {
    /**
     * Details for the published API.
     */
    data?: Schema$GoogleCloudApigeeV1ApiDocBody;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ApiDocBody {
    /**
     * Boolean flag that specifies whether all or only registered users can access the API.
     */
    anonAllowed?: boolean | null;
    /**
     * ID of the API.
     */
    apiId?: string | null;
    /**
     * Description of the API.
     */
    description?: string | null;
    /**
     * Name of the associated API product.
     */
    edgeAPIProductName?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    enrollment?: string | null;
    /**
     * ID of the API.
     */
    id?: string | null;
    /**
     * URL of the image used for the API in the API catalog.
     */
    imageUrl?: string | null;
    /**
     * Time the API was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Boolean flag that specifies whether the API product exists.
     */
    productExists?: boolean | null;
    /**
     * Boolean flag that specifies whether a callback URL is required.
     */
    requireCallbackUrl?: boolean | null;
    /**
     * Name of the portal.
     */
    siteId?: string | null;
    /**
     * Boolean flag that specifies whether a snapshot of the OpenAPI Specification that is used to render API reference documentation exists.
     */
    snapshotExists?: boolean | null;
    /**
     * Time the snapshot of the OpenAPI Specification was last modified in milliseconds since epoch.
     */
    snapshotModified?: string | null;
    /**
     * Boolean flag that specifies whether the snapshot of the OpenAPI Specification is out of date.
     */
    snapshotOutdated?: boolean | null;
    /**
     * Boolean flag that specifies whether the snapshot of the OpenAPI Specification is missing.
     */
    snapshotSourceMissing?: boolean | null;
    /**
     * Status of the snapshot of the OpenAPI Specification that is used to render API reference documentation.
     */
    snapshotState?: string | null;
    /**
     * OpenAPI Specification content.
     */
    specContent?: string | null;
    /**
     * ID of the OpenAPI Specification.
     */
    specId?: string | null;
    /**
     * Time the OpenAPI Specification was last modified in milliseconds since epoch.
     */
    specModified?: string | null;
    /**
     * Title of the OpenAPI Specification.
     */
    specTitle?: string | null;
    /**
     * Title of the API.
     */
    title?: string | null;
    /**
     * Boolean flag that specifies whether the API is visible to all users (public).
     */
    visibility?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1ApiProduct {
    /**
     * Comma-separated list of API resources to be bundled in the API Product.  By default, the resource paths are mapped from the `proxy.pathsuffix` variable.  The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the `apiResources` element is defined to be `/forecastrss` and the base path defined for the API proxy is `/weather`, then only requests to `/weather/forecastrss` are permitted by the API product.  You can select a specific path, or you can select all subpaths with the following wildcard:  - /**: Indicates that all sub-URIs are included. - /* : Indicates that only URIs one level down are included.  By default, / supports the same resources as /** as well as the base path defined by the API proxy.  For example, if the base path of the API proxy is `/v1/weatherapikey`, then the API product supports requests to `/v1/weatherapikey` and to any sub-URIs, such as `/v1/weatherapikey/forecastrss`, `/v1/weatherapikey/region/CA`, and so on. For more information, see:  - &lt;a href=&quot;/api-platform/publish/create-api-products&quot;&gt;Manage API products&lt;/a&gt; - &lt;a href=&quot;/api-platform/monetization/create-transaction-recording-policy#spectrpcaapi&quot;&gt;Managing a transaction recording policy using the API&lt;/a&gt;
     */
    apiResources?: string[] | null;
    /**
     * Specifies how API keys are approved to access the APIs defined by the API product.  If set to `manual`, the consumer key is generated and returned in &quot;pending&quot; state. In this case, the API keys won&#39;t work until they have been explicitly approved.  If set to `auto`, the consumer key is generated and returned in &quot;approved&quot; state and can be used immediately.  &lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Typically, `auto` is used to provide access to free or trial API products that provide limited quota or capabilities.&lt;/aside&gt;
     */
    approvalType?: string | null;
    /**
     * Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes.  Use this property to specify the access level of the API product as either `public`, `private`, or `internal`.  Only products marked `public` are available to developers in the Apigee developer portal. For example, you can set a product to `internal` while it is in development and then change access to `public` when it is ready to release on the portal.  API products marked as `private` do not appear on the portal but can be accessed by external developers.  For monetization, you can use the attributes field to:  - &lt;a href=&quot;/api-platform/monetization/create-transaction-recording-policy#spectrpsuccessapi&quot; target=&quot;_blank&quot;&gt;Specify transaction success criteria&lt;/a&gt; - &lt;a href=&quot;/api-platform/monetization/create-transaction-recording-policy#spectrpcaapi&quot; target=&quot;_blank&quot;&gt;Specify custom attributes&lt;/a&gt; on which you base rate plan charges&lt;/a&gt;.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * Response only. Creation time of this environment as milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * An overview of the API product. Include key information about the API product that is not captured by other fields.
     */
    description?: string | null;
    /**
     * The name to be displayed in the UI or developer portal to developers registering for API access.
     */
    displayName?: string | null;
    /**
     * A comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected.  By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment.  This setting is used, for example, to prevent resources associated with API proxies in &#39;prod&#39; from being accessed by API proxies deployed in &#39;test&#39;.
     */
    environments?: string[] | null;
    /**
     * Response only. Modified time of this environment as milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * The internal name of the API Product. Characters you can use in the name are restricted to: A-Z0-9._\-$ %.  &lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The internal name cannot be edited when updating the API product.&lt;/aside&gt;
     */
    name?: string | null;
    /**
     * A comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies.  Edge rejects requests to API proxies that are not listed.  &lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The API proxy names must already exist in the specified environment as they will be validated upon creation.&lt;/aside&gt;
     */
    proxies?: string[] | null;
    /**
     * The number of request messages permitted per app by this API product for the specified `quotaInterval` and `quotaTimeUnit`.  For example, a `quota` of 50, for a `quotaInterval` of 12 and a `quotaTimeUnit` of hours means 50 requests are allowed every 12 hours.
     */
    quota?: string | null;
    /**
     * The time interval over which the number of request messages is calculated.
     */
    quotaInterval?: string | null;
    /**
     * The time unit defined for the `quotaInterval`. Valid values include minute, hour, day, or month.
     */
    quotaTimeUnit?: string | null;
    /**
     * A comma-separated list of OAuth scopes that are validated at runtime. Edge validates that the scopes in any access token presented match the scopes defined in the OAuth policy assoicated with the API product.
     */
    scopes?: string[] | null;
  }
  export interface Schema$GoogleCloudApigeeV1ApiProductRef {
    /**
     * Name of the API product.
     */
    apiproduct?: string | null;
    /**
     * Status of the API product.
     */
    status?: string | null;
  }
  /**
   * Metadata describing the API proxy
   */
  export interface Schema$GoogleCloudApigeeV1ApiProxy {
    /**
     * The id of the most recently created revision for this api proxy.
     */
    latestRevisionId?: string | null;
    /**
     * Metadata describing the API proxy.
     */
    metaData?: Schema$GoogleCloudApigeeV1EntityMetadata;
    /**
     * Name of the API proxy.
     */
    name?: string | null;
    /**
     * List of revisons defined for the API proxy.
     */
    revision?: string[] | null;
  }
  /**
   * API proxy revision.
   */
  export interface Schema$GoogleCloudApigeeV1ApiProxyRevision {
    /**
     * Base URL of the API proxy.
     */
    basepaths?: string[] | null;
    /**
     * Version of the API proxy configuration schema to which the API proxy conforms. Currently, the only supported value is 4.0 (`majorVersion.minorVersion`). This setting may be used in the future to track the evolution of the API proxy format.
     */
    configurationVersion?: Schema$GoogleCloudApigeeV1ConfigVersion;
    /**
     * Revision number, app name, and organization for the API proxy.
     */
    contextInfo?: string | null;
    /**
     * Time that the API proxy revision was created in milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * Description of the API proxy revision.
     */
    description?: string | null;
    /**
     * Human-readable name of the API proxy.
     */
    displayName?: string | null;
    /**
     * Metadata describing the API proxy revision as a key-value map.
     */
    entityMetaDataAsProperties?: {[key: string]: string} | null;
    /**
     * Time that the API proxy revision was last modified in milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * Name of the API proxy.
     */
    name?: string | null;
    /**
     * List of policy names included in the API proxy revision..
     */
    policies?: string[] | null;
    /**
     * List of proxy names included in the API proxy revision.
     */
    proxies?: string[] | null;
    /**
     * List of ProxyEndpoints in the `/proxies` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge UI. This is a &#39;manifest&#39; setting designed to provide visibility into the contents of the API proxy.
     */
    proxyEndpoints?: string[] | null;
    /**
     * List of resource files included in the API proxy revision.
     */
    resourceFiles?: Schema$GoogleCloudApigeeV1ResourceFiles;
    /**
     * List of the resources included in the API proxy revision formatted as &quot;{type}://{name}&quot;.
     */
    resources?: string[] | null;
    /**
     * API proxy revision.
     */
    revision?: string | null;
    /**
     * List of the shared flows included in the API proxy revision.
     */
    sharedFlows?: string[] | null;
    /**
     * OpenAPI Specification that is associated with the API proxy. The value is set to a URL or to a path in the specification store.
     */
    spec?: string | null;
    /**
     * List of TargetEndpoints in the `/targets` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge  UI. This is a &#39;manifest&#39; setting designed to provide visibility into the contents of the API proxy.
     */
    targetEndpoints?: string[] | null;
    /**
     * List of the targets included in the API proxy revision.
     */
    targets?: string[] | null;
    /**
     * List of TargetServers referenced in any TargetEndpoint in the API proxy. Typically, you will see this element only when the API proxy was created using the Edge UI. This is a &#39;manifest&#39; setting designed to provide visibility into the contents of the API proxy.
     */
    targetServers?: string[] | null;
    /**
     * List of the teams included in the API proxy revision.
     */
    teams?: string[] | null;
    /**
     * Type. Set to `Application`. Maintained for compatibility with the Apigee Edge API.
     */
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ApiResponseWrapper {
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1App {
    /**
     * List of API products associated with the app.
     */
    apiProducts?: Schema$GoogleCloudApigeeV1ApiProductRef[];
    /**
     * ID of the app.
     */
    appId?: string | null;
    /**
     * List of attributes.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to apps.
     */
    callbackUrl?: string | null;
    /**
     * Name of the company that owns the app.
     */
    companyName?: string | null;
    /**
     * Output only. Unix time when the app was created.
     */
    createdAt?: string | null;
    /**
     * Output only. Set of credentials for the app. Credentials are API key/secret pairs associated with API products.
     */
    credentials?: Schema$GoogleCloudApigeeV1Credential[];
    /**
     * ID  of the developer.
     */
    developerId?: string | null;
    /**
     * Duration, in milliseconds, of the consumer key that will be generated for the app. The default value, -1, indicates an infinite validity period. Once set, the expiration can&#39;t be updated. json key: keyExpiresIn
     */
    keyExpiresIn?: string | null;
    /**
     * Output only. Last modified time as milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * Name of the app.
     */
    name?: string | null;
    /**
     * Scopes to apply to the app. The specified scope names must already exist on the API product that you associate with the app.
     */
    scopes?: string[] | null;
    /**
     * Status of the credential.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ApprovedEmailsPayload {
    /**
     * Individual email addresses or email domains that can create accounts on the portal.
     */
    approvedEmails?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1AsyncQuery {
    /**
     * Creation time of the query
     */
    created?: string | null;
    /**
     * Error is set when query fails
     */
    error?: string | null;
    /**
     * ExecutionTime is available only after the query is completed
     */
    executionTime?: string | null;
    /**
     * Asynchronous Query Name.
     */
    name?: string | null;
    /**
     * Contains information like metrics, dimenstions etc of the AsyncQuery
     */
    queryParams?: Schema$GoogleCloudApigeeV1QueryMetadata;
    /**
     * Asynchronous Report ID.
     */
    reportDefinitionId?: string | null;
    /**
     * Result is available only after the query is completed
     */
    result?: Schema$GoogleCloudApigeeV1AsyncQueryResult;
    /**
     * ResultFileSize is available only after the query is completed
     */
    resultFileSize?: string | null;
    /**
     * ResultRows is available only after the query is completed
     */
    resultRows?: string | null;
    /**
     * Self link of the query  Example: `/organizations/myorg/environments/myenv/queries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
     */
    self?: string | null;
    /**
     * Query state could be &quot;enqueued&quot;, &quot;running&quot;, &quot;completed&quot;, &quot;failed&quot;
     */
    state?: string | null;
    /**
     * Last updated timestamp for the query
     */
    updated?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1AsyncQueryResult {
    /**
     * Query result will be unaccessable after this time.
     */
    expires?: string | null;
    /**
     * Self link of the query results  Example: `/organizations/myorg/environments/myenv/queries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result`
     */
    self?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1AsyncQueryResultView {
    /**
     * Error code when there is a failure.
     */
    code?: number | null;
    /**
     * Error message when there is a failure.
     */
    error?: string | null;
    /**
     * Metadata contains information like metrics, dimenstions etc of the AsyncQuery
     */
    metadata?: Schema$GoogleCloudApigeeV1QueryMetadata;
    /**
     * Rows of query result. Each row is a JSON object.  Example: {sum(message_count): 1, developer_app: &quot;(not set)&quot;,…}
     */
    rows?: any[] | null;
    /**
     * State of retrieving ResultView.
     */
    state?: string | null;
  }
  /**
   * Key-value pair to store extra metadata.
   */
  export interface Schema$GoogleCloudApigeeV1Attribute {
    /**
     * API key of the attribute.
     */
    name?: string | null;
    /**
     * Value of the attribute.
     */
    value?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Attributes {
    /**
     * List of attributes.
     */
    attribute?: Schema$GoogleCloudApigeeV1Attribute[];
  }
  export interface Schema$GoogleCloudApigeeV1CapiServerStatus {
    /**
     * Boolean flag that specifies whether the server status is OK.
     */
    ok?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1CapiServerStatusResponse {
    /**
     * Status of the server.
     */
    data?: Schema$GoogleCloudApigeeV1CapiServerStatus;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Certificate {
    /**
     * The chain of certificates under this name.
     */
    certInfo?: Schema$GoogleCloudApigeeV1CertInfo[];
  }
  /**
   * An X.509 certificate as defined in RFC 5280.
   */
  export interface Schema$GoogleCloudApigeeV1CertInfo {
    /**
     * The X.509 basic constraints extension.
     */
    basicConstraints?: string | null;
    /**
     * The X.509 validity / notAfter in milliseconds since the epoch.
     */
    expiryDate?: string | null;
    /**
     * The X.509 issuer.
     */
    issuer?: string | null;
    /**
     * &quot;Yes&quot; if certificate is valid, &quot;No&quot; if expired and &quot;Not yet&quot; if not yet valid.
     */
    isValid?: string | null;
    /**
     * The public key component of the X.509 subject public key info.
     */
    publicKey?: string | null;
    /**
     * The X.509 serial number.
     */
    serialNumber?: string | null;
    /**
     * The X.509 signatureAlgorithm.
     */
    sigAlgName?: string | null;
    /**
     * The X.509 subject.
     */
    subject?: string | null;
    /**
     * The X.509 subject alternative names (SANs) extension.
     */
    subjectAlternativeNames?: string[] | null;
    /**
     * The X.509 validity / notBefore in milliseconds since the epoch.
     */
    validFrom?: string | null;
    /**
     * The X.509 version.
     */
    version?: number | null;
  }
  export interface Schema$GoogleCloudApigeeV1CheckAccess {
    /**
     * Type of access requested for the provided resource path.
     */
    action?: string | null;
    /**
     * Resource path.
     */
    resourcePath?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CheckAccessBody {
    /**
     * Resources to check access permissions.
     */
    data?: Schema$GoogleCloudApigeeV1CheckAccess[];
  }
  export interface Schema$GoogleCloudApigeeV1CheckAccessResponse {
    /**
     * Results of the check access requests.
     */
    data?: Schema$GoogleCloudApigeeV1CheckAccessVerdict[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CheckAccessVerdict {
    /**
     * Access that was attempted
     */
    action?: string | null;
    /**
     * Resource path.
     */
    resourcePath?: string | null;
    /**
     * Results of the check access request. &quot;unknown&quot; is returned if the resource path is not found
     */
    verdict?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CommonNameConfig {
    matchWildCards?: boolean | null;
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Company {
    apps?: string[] | null;
    /**
     * A list of attributes
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * Output only. Created time as milliseconds since epoch. json key: createdAt
     */
    createdAt?: string | null;
    /**
     * company name displayed in the UI
     */
    displayName?: string | null;
    /**
     * Output only. Modified time as milliseconds since epoch. json key: lastModifiedAt
     */
    lastModifiedAt?: string | null;
    /**
     * Name of the company. Characters you can use in the name are restricted to: A-Z0-9._\-$ %.
     */
    name?: string | null;
    /**
     * the org that the company is created
     */
    organization?: string | null;
    /**
     * The status of the company
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CompanyApp {
    /**
     * Any API Products the app consumes
     */
    apiProducts?: string[] | null;
    appFamily?: string | null;
    /**
     * The id of the app.
     */
    appId?: string | null;
    /**
     * A list of attributes.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * The callbackUrl is used by OAuth 2.0 authorization servers to communicate authorization codes back to apps.
     */
    callbackUrl?: string | null;
    /**
     * The name of the company owns the app
     */
    companyName?: string | null;
    /**
     * Output only. created time of this environment as milliseconds since epoch. JSON key: createdAt
     */
    createdAt?: string | null;
    /**
     * Output only. A set of credentials for the app credentials are key/secret pairs
     */
    credentials?: Schema$GoogleCloudApigeeV1Credential[];
    /**
     * A setting, in milliseconds, for the lifetime of the consumer key that will be generated for the developer app. The default value, -1, indicates an infinite validity period. Once set, the expiration can&#39;t be updated. json key: keyExpiresIn
     */
    keyExpiresIn?: string | null;
    /**
     * Output only. Modified time as milliseconds since epoch. json key: lastModifiedAt
     */
    lastModifiedAt?: string | null;
    /**
     * The resoure id of the app. JSON key: name
     */
    name?: string | null;
    /**
     * The scopes to apply to the app. The specified scope names must already exist on the API product that you associate with the app.
     */
    scopes?: string[] | null;
    /**
     * The status of the credential.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CompanyAppKey {
    /**
     * A list of api products this credential can be used for.
     */
    apiProducts?: any[] | null;
    /**
     * A list of attributes tied to the credential.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * The consumer key.
     */
    consumerKey?: string | null;
    /**
     * The secret key.
     */
    consumerSecret?: string | null;
    /**
     * Unix time when the app was created json key: expiresAt
     */
    expiresAt?: string | null;
    /**
     * Unix time when the app was issued json key: issuedAt
     */
    issuedAt?: string | null;
    /**
     * The scopes to apply to the app. The specified scope names must already exist on the API product that you associate with the app.
     */
    scopes?: string[] | null;
    /**
     * The status of the credential.
     */
    status?: string | null;
  }
  /**
   * Version of the API proxy configuration schema. Currently, only 4.0 is supported.
   */
  export interface Schema$GoogleCloudApigeeV1ConfigVersion {
    /**
     * Major version of the API proxy configuration schema.
     */
    majorVersion?: number | null;
    /**
     * Minor version of the API proxy configuration schema.
     */
    minorVersion?: number | null;
  }
  export interface Schema$GoogleCloudApigeeV1ConsumerAppResponse {
    /**
     * Details of the app.
     */
    data?: Schema$GoogleCloudApigeeV1PortalApp;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ConsumerAudience {
    /**
     * Time the audience was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * Description of the auidence.
     */
    description?: string | null;
    /**
     * ID of the audience.
     */
    id?: string | null;
    /**
     * Type of membership.
     */
    membershipType?: string | null;
    /**
     * Name of the audience.
     */
    name?: string | null;
    /**
     * List of resource entitlements assigned to the audience.
     */
    resources?: string[] | null;
    /**
     * List of teams assigned to the audience.
     */
    teams?: Schema$GoogleCloudApigeeV1ConsumersTeam[];
    /**
     * List of users assigned to the audience.
     */
    users?: Schema$GoogleCloudApigeeV1ConsumerUser[];
  }
  export interface Schema$GoogleCloudApigeeV1ConsumerName {
    /**
     * Last name.
     */
    familyName?: string | null;
    /**
     * First name.
     */
    givenName?: string | null;
    /**
     * Username.
     */
    userName?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ConsumersTeam {
    /**
     * List of apps associated with the team.
     */
    apps?: Schema$GoogleCloudApigeeV1PortalApp[];
    /**
     * List of audiences to which the team is assigned.
     */
    audiences?: Schema$GoogleCloudApigeeV1ConsumerAudience[];
    /**
     * Time the team was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * Description of the team.
     */
    description?: string | null;
    /**
     * ID of the team.
     */
    id?: string | null;
    memberCount?: number | null;
    /**
     * List of members and roles.
     */
    memberships?: Schema$GoogleCloudApigeeV1ConsumerTeamMembership[];
    /**
     * Name of the team.
     */
    name?: string | null;
    /**
     * Point of contact for the team.
     */
    pointOfContact?: string | null;
    /**
     * List of users assigned to the team.
     */
    users?: Schema$GoogleCloudApigeeV1ConsumerUser[];
  }
  /**
   * Roles supported for team membership.
   */
  export interface Schema$GoogleCloudApigeeV1ConsumerTeamMembership {
    /**
     * Role.
     */
    role?: string | null;
    /**
     * ID of the user.
     */
    userId?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ConsumerUser {
    /**
     * Boolean flag that specifies whether the user account is active.
     */
    active?: boolean | null;
    /**
     * List of apps associated with the user.
     */
    apps?: Schema$GoogleCloudApigeeV1PortalApp[];
    /**
     * List of audiences to which the user is assigned.
     */
    audiences?: Schema$GoogleCloudApigeeV1ConsumerAudience[];
    /**
     * List of custom fields entered during user account registration.
     */
    customFieldValues?: Schema$GoogleCloudApigeeV1CustomFieldValue[];
    /**
     * Email address of the user.
     */
    email?: string | null;
    /**
     * ID of the user.
     */
    id?: string | null;
    /**
     * Name of the user.
     */
    name?: Schema$GoogleCloudApigeeV1ConsumerName;
    /**
     * Time the password was last modified in milliseconds since epoch.
     */
    passwordLastModified?: string | null;
    /**
     * List of teams to which the user is assigned.
     */
    teams?: Schema$GoogleCloudApigeeV1ConsumersTeam[];
    /**
     * Boolean flag that specifies whether the user account has been verified.
     */
    verified?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1ConsumerUserListResponse {
    /**
     * List of users.
     */
    data?: Schema$GoogleCloudApigeeV1ConsumerUser[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of operation. message is a reserved word
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ConsumerUserResponse {
    /**
     * Details of the user.
     */
    data?: Schema$GoogleCloudApigeeV1ConsumerUser;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CreateConsumerAppRequestBody {
    /**
     * List of associated API products.
     */
    apiProducts?: string[] | null;
    /**
     * List of attributes.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * Callback URL.
     */
    callbackUrl?: string | null;
    /**
     * Description of the app.
     */
    description?: string | null;
    /**
     * User-friendly display name for the app.
     */
    name?: string | null;
    /**
     * Owner of the app.
     */
    owner?: string | null;
    /**
     * Type of owner.
     */
    ownerType?: string | null;
  }
  /**
   * Response message for the CreateIdentityProvider RPC.
   */
  export interface Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse {
    /**
     * Identity provider created by the request
     */
    data?: Schema$GoogleCloudApigeeV1IdentityProvider;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Credential {
    /**
     * List of API products this credential can be used for.
     */
    apiProducts?: Schema$GoogleCloudApigeeV1ApiProductRef[];
    /**
     * List of attributes associated with this credential.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * Consumer key.
     */
    consumerKey?: string | null;
    /**
     * Secret key.
     */
    consumerSecret?: string | null;
    /**
     * Time the credential will expire in milliseconds since epoch.
     */
    expiresAt?: string | null;
    /**
     * Time the credential was issued in milliseconds since epoch.
     */
    issuedAt?: string | null;
    /**
     * List of scopes to apply to the app. Specified scopes must already exist on the API product that you associate with the app.
     */
    scopes?: string[] | null;
    /**
     * Status of the credential.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CssEditorUpdatePayload {
    /**
     * Custom editor update payload that contains the update type and the relevant data.
     */
    content?: string | null;
    /**
     * Type of payload.
     */
    kind?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CustomCss {
    /**
     * Details of the custom CSS.
     */
    data?: Schema$GoogleCloudApigeeV1CustomCssData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CustomCssData {
    /**
     * Compilation error, if applicable.
     */
    compilationError?: string | null;
    /**
     * Time the custom CSS was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * CSS content of the portal.
     */
    css?: string | null;
    /**
     * Custom style overrides (draft).
     */
    customScssDraft?: string | null;
    /**
     * Custom style overrides (published).
     */
    customScssPublished?: string | null;
    /**
     * Editor mode (draft).
     */
    editorModeDraft?: string | null;
    /**
     * Editor mode (published).
     */
    editorModePublished?: string | null;
    /**
     * Boolean flag that specifies whether the custom CSS is enabled.
     */
    enabled?: boolean | null;
    /**
     * URL for favicon (draft).
     */
    faviconUrlDraft?: string | null;
    /**
     * URL for favicon (published).
     */
    faviconUrlPublished?: string | null;
    /**
     * ID of the custom CSS.
     */
    id?: number | null;
    /**
     * Boolean flag that specifies whether theme editor is enabled.
     */
    isThemeEditorEnabled?: boolean | null;
    /**
     * URL for desktop logo (draft).
     */
    logoUrlDraft?: string | null;
    /**
     * URL for desktop logo (published).
     */
    logoUrlPublished?: string | null;
    /**
     * Migration status of portal.
     */
    migrationState?: string | null;
    /**
     * URL for mobile logo (draft).
     */
    mobileLogoUrlDraft?: string | null;
    /**
     * URL for mobile logo (published).
     */
    mobileLogoUrlPublished?: string | null;
    /**
     * Time the custom CSS was last updated in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Variable overrides (draft).
     */
    overridesDraft?: string | null;
    /**
     * Variable overrides (published).
     */
    overridesPublished?: string | null;
    /**
     * Time the custom CSS was last published in milliseconds since epoch.
     */
    published?: string | null;
    /**
     * Name of the portal.
     */
    siteId?: string | null;
    /**
     * Basic style settings (draft).
     */
    variablesDraft?: string | null;
    /**
     * Basic style settings (published).
     */
    variablesPublished?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CustomFieldValue {
    /**
     * Name of the custom field.
     */
    fieldName?: string | null;
    /**
     * Value of the custom field.
     */
    fieldValue?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CustomRegistrationField {
    /**
     * Boolean flag that specifies whether the field is enabled.
     */
    active?: boolean | null;
    /**
     * Name of the custom field.
     */
    fieldName?: string | null;
    /**
     * Type of custom registration field.
     */
    fieldType?: string | null;
    /**
     * Boolean flag that specifies whether the field is required.
     */
    required?: boolean | null;
    /**
     * Sort order for the custom field.
     */
    sortOrder?: number | null;
  }
  export interface Schema$GoogleCloudApigeeV1CustomReport {
    /**
     * This field contains the chart type for the report
     */
    chartType?: string | null;
    /**
     * Legacy field: not used. This field contains a list of comments associated with custom report
     */
    comments?: string[] | null;
    /**
     * Output only. Unix time when the app was created json key: createdAt
     */
    createdAt?: string | null;
    /**
     * This contains the list of dimensions for the report
     */
    dimensions?: string[] | null;
    /**
     * This is the display name for the report
     */
    displayName?: string | null;
    /**
     * Output only. Environment name
     */
    environment?: string | null;
    /**
     * This field contains the filter expression
     */
    filter?: string | null;
    /**
     * Legacy field: not used. Contains the from time for the report
     */
    fromTime?: string | null;
    /**
     * Output only. Modified time of this entity as milliseconds since epoch. json key: lastModifiedAt
     */
    lastModifiedAt?: string | null;
    /**
     * Output only. Last viewed time of this entity as milliseconds since epoch
     */
    lastViewedAt?: string | null;
    /**
     * Legacy field: not used This field contains the limit for the result retrieved
     */
    limit?: string | null;
    /**
     * Required. This contains the list of metrics
     */
    metrics?: Schema$GoogleCloudApigeeV1CustomReportMetric[];
    /**
     * Required. Unique identifier for the report T his is a legacy field used to encode custom report unique id
     */
    name?: string | null;
    /**
     * Legacy field: not used. This field contains the offset for the data
     */
    offset?: string | null;
    /**
     * Output only. Organization name
     */
    organization?: string | null;
    /**
     * This field contains report properties such as ui metadata etc.
     */
    properties?: Schema$GoogleCloudApigeeV1ReportProperty[];
    /**
     * Legacy field: not used much. Contains the list of sort by columns
     */
    sortByCols?: string[] | null;
    /**
     * Legacy field: not used much. Contains the sort order for the sort columns
     */
    sortOrder?: string | null;
    /**
     * Legacy field: not used. This field contains a list of tags associated with custom report
     */
    tags?: string[] | null;
    /**
     * This field contains the time unit of aggregation for the report
     */
    timeUnit?: string | null;
    /**
     * Legacy field: not used. This field contains the top k parameter value for restricting the result
     */
    topk?: string | null;
    /**
     * Legacy field: not used. Contains the end time for the report
     */
    toTime?: string | null;
  }
  /**
   * This encapsulates a metric property of the form sum(message_count) where name is message_count and function is sum
   */
  export interface Schema$GoogleCloudApigeeV1CustomReportMetric {
    /**
     * aggregate function
     */
    function?: string | null;
    /**
     * name of the metric
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1CustomStyleConfig {
    /**
     * Map of keys to style variables. Style variables can be one of many different structures created by the UI that the server can turn into styling.
     */
    variables?: {[key: string]: {[key: string]: any}} | null;
  }
  export interface Schema$GoogleCloudApigeeV1CustomStyleSchemaInfo {
    /**
     * writeOnly: true
     */
    copiedVariables?: {[key: string]: string} | null;
    /**
     * Array of values of type EnumOption. This is untyped beyond being a JSON object as the metadata can be in any format/structure.
     */
    enums?: {[key: string]: any[]} | null;
    /**
     * JSON node which represents the input fields in the UI. The server does not type this structure beyond being plain JSON; the UI handles the rendering.
     */
    gui?: Schema$GoogleCloudApigeeV1GuiSection[];
    /**
     * Map of properties to their kinds. Multiple kinds are allowed on each variable. The value of this map is a list of strings, where each string is a kind associated with the property.
     */
    properties?: {[key: string]: any[]} | null;
  }
  export interface Schema$GoogleCloudApigeeV1DataLocation {
    /**
     * GCS signed url. Signed URLs provide a way to give time-limited read or write access to anyone in possession of the URL, regardless of whether they have a Google account.
     */
    url?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1DebugMask {
    /**
     * List of JSON paths that specify the JSON elements to be filtered from JSON payloads in error flows.
     */
    faultJSONPaths?: string[] | null;
    /**
     * List of XPaths that specify the XML elements to be filtered from XML payloads in error flows.
     */
    faultXPaths?: string[] | null;
    /**
     * Name of the debug mask.
     */
    name?: string | null;
    /**
     * Map of namespaces to URIs.
     */
    namespaces?: {[key: string]: string} | null;
    /**
     * List of JSON paths that specify the JSON elements to be filtered from JSON request message payloads.
     */
    requestJSONPaths?: string[] | null;
    /**
     * List of XPaths that specify the XML elements to be filtered from XML request message payloads.
     */
    requestXPaths?: string[] | null;
    /**
     * List of JSON paths that specify the JSON elements to be filtered from JSON response message payloads.
     */
    responseJSONPaths?: string[] | null;
    /**
     * List of XPaths that specify the XML elements to be filtered from XML response message payloads.
     */
    responseXPaths?: string[] | null;
    /**
     * List of variables that should be masked from the debug output.
     */
    variables?: string[] | null;
  }
  export interface Schema$GoogleCloudApigeeV1DebugSession {
    /**
     * Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
     */
    count?: number | null;
    /**
     * Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
     */
    filter?: string | null;
    /**
     * A unique ID for this DebugSession.
     */
    name?: string | null;
    /**
     * Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
     */
    timeout?: string | null;
    /**
     * Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
     */
    tracesize?: number | null;
    /**
     * Optional. The length of time, in seconds, that this debug session is valid, starting from when it&#39;s received in the control plane. Min = 1, Max = 15, Default = 10.
     */
    validity?: number | null;
  }
  /**
   * A transaction contains all of the debug information of the entire message flow of an API call processed by the runtime plane. The information is collected and recorded at critical points of the message flow in the runtime apiproxy.
   */
  export interface Schema$GoogleCloudApigeeV1DebugSessionTransaction {
    /**
     * Flag indicating whether a transaction is completed or not
     */
    completed?: boolean | null;
    /**
     * List of debug data collected by runtime plane at various defined points in the flow.
     */
    point?: Schema$GoogleCloudApigeeV1Point[];
  }
  export interface Schema$GoogleCloudApigeeV1DefaultAnonAllowed {
    /**
     * Boolean flag that specifies the default visibility for pages and API products that are published on the portal.
     */
    defaultAnonAllowed?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1DeleteCustomReportResponse {
    /**
     * The response contains only a message field.
     */
    message?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Deployment {
    /**
     * API proxy.
     */
    apiProxy?: string | null;
    /**
     * Base path for the deployment.
     */
    basePath?: string | null;
    /**
     * Time the API proxy was marked `deployed` in the control plane in millisconds since epoch.
     */
    deployStartTime?: string | null;
    /**
     * Environment.
     */
    environment?: string | null;
    /**
     * Status reported by runtime pods.
     */
    pods?: Schema$GoogleCloudApigeeV1PodStatus[];
    /**
     * API proxy revision.
     */
    revision?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1DeploymentConfig {
    /**
     * Additional key-value metadata about the deployment.
     */
    attributes?: {[key: string]: string} | null;
    /**
     * Base path where the application needs to be hosted. Default value is assumed to be &quot;/&quot;.
     */
    basePath?: string | null;
    /**
     * The location of the proxy bundle, as a uri.
     */
    location?: string | null;
    /**
     * The name of the API or shared flow revision to be deployed. Must be of the form &#39;organizations/{org}/apis/{api}/revisions/{rev}&#39; or &#39;organizations/{org}/sharedflows/{sf}/revisions/{rev}&#39;.
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Developer {
    /**
     * Access type.
     */
    accessType?: string | null;
    /**
     * Developer app family.
     */
    appFamily?: string | null;
    /**
     * List of apps associated with the developer.
     */
    apps?: string[] | null;
    /**
     * Optional. Developer attributes (name/value pairs). The custom attribute limit is 18.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * List of companies associated with the developer.
     */
    companies?: string[] | null;
    /**
     * Output only. Time at which the developer was created in milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * ID of the developer.  **Note**: IDs are generated internally by Apigee and are not guaranteed to stay the same over time.
     */
    developerId?: string | null;
    /**
     * Required. Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid.
     */
    email?: string | null;
    /**
     * Required. First name of the developer.
     */
    firstName?: string | null;
    /**
     * Output only. Time at which the developer was last modified in milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * Required. Last name of the developer.
     */
    lastName?: string | null;
    /**
     * Output only. Name of the Apigee organization in which the developer resides.
     */
    organizationName?: string | null;
    /**
     * Output only. Status of the developer. Valid values are `active` and `inactive`.
     */
    status?: string | null;
    /**
     * Required. User name of the developer. Not used by Apigee hybrid.
     */
    userName?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1DeveloperApp {
    /**
     * List of API products associated with the developer app.
     */
    apiProducts?: string[] | null;
    /**
     * Developer app family.
     */
    appFamily?: string | null;
    /**
     * ID of the developer app.
     */
    appId?: string | null;
    /**
     * List of attributes for the developer app.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to developer apps.
     */
    callbackUrl?: string | null;
    /**
     * Output only. Time the developer app was created in milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * Output only. Set of credentials for the developer app consisting of the consumer key/secret pairs associated with the API products.
     */
    credentials?: Schema$GoogleCloudApigeeV1Credential[];
    /**
     * ID of the developer.
     */
    developerId?: string | null;
    /**
     * Expiration time, in milliseconds, for the consumer key that is generated for the developer app. If not set or left to the default value of `-1`, the API key never expires. The expiration time can&#39;t be updated after it is set.
     */
    keyExpiresIn?: string | null;
    /**
     * Output only. Time the developer app was modified in milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * Name of the developer app.
     */
    name?: string | null;
    /**
     * Scopes to apply to the developer app. The specified scopes must already exist for the API product that you associate with the developer app.
     */
    scopes?: string[] | null;
    /**
     * Status of the credential. Valid values include `approved` or `revoked`.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1DeveloperAppKey {
    /**
     * List of API products for which the credential can be used.
     */
    apiProducts?: any[] | null;
    /**
     * List of attributes associated with the credential.
     */
    attributes?: Schema$GoogleCloudApigeeV1Attribute[];
    /**
     * Consumer key.
     */
    consumerKey?: string | null;
    /**
     * Secret key.
     */
    consumerSecret?: string | null;
    /**
     * Time the developer app expires in milliseconds since epoch.
     */
    expiresAt?: string | null;
    /**
     * Time the developer app was created in milliseconds since epoch.
     */
    issuedAt?: string | null;
    /**
     * Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
     */
    scopes?: string[] | null;
    /**
     * Status of the credential. Valid values include `approved` or `revoked`.
     */
    status?: string | null;
  }
  /**
   * This message type encapsulates a metric grouped by dimension
   */
  export interface Schema$GoogleCloudApigeeV1DimensionMetric {
    /**
     * This field contains a list of metrics
     */
    metrics?: Schema$GoogleCloudApigeeV1Metric[];
    /**
     * This field contains the name of the dimension
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1DnsCnameCheck {
    /**
     * Canonical name (CNAME) record.
     */
    cname?: string | null;
    /**
     * Domain name.
     */
    domain?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1DomainVerified {
    /**
     * Boolean flag that specifies whether the domain was verified.
     */
    verified?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1DomainVerifiedResponse {
    /**
     * Details about the domain.
     */
    data?: Schema$GoogleCloudApigeeV1DomainVerified;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1EditorSchema {
    /**
     * Details of the theme editor schema.
     */
    data?: Schema$GoogleCloudApigeeV1ThemeEditorSchema;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Details of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1EmailTemplate {
    /**
     * Contents of the body of the email template.
     */
    data?: Schema$GoogleCloudApigeeV1EmailTemplateBody;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1EmailTemplateBody {
    /**
     * ID of the email template.
     */
    emailTemplateId?: string | null;
    /**
     * Contents of the body of email (HTML format).
     */
    htmlBody?: string | null;
    /**
     * Not used by hybrid.
     */
    id?: number | null;
    /**
     * Time the email template was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    modifiedBy?: string | null;
    /**
     * Name of the portal.
     */
    siteId?: string | null;
    /**
     * Subject of the email.
     */
    subject?: string | null;
    /**
     * Contents of the body of the email (text format).
     */
    textBody?: string | null;
    /**
     * Name of the email template.
     */
    title?: string | null;
    /**
     * List of variables that can be used in the email template.
     */
    variables?: string[] | null;
  }
  /**
   * Metadata common to many entities in this API.
   */
  export interface Schema$GoogleCloudApigeeV1EntityMetadata {
    /**
     * Time at which the API proxy was created, in milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * Time at which the API proxy was most recently modified, in milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * The type of entity described
     */
    subType?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Environment {
    /**
     * Output only. Creation time of this environment as milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * Optional. Description of the environment.
     */
    description?: string | null;
    /**
     * Optional. Display name for this environment.
     */
    displayName?: string | null;
    /**
     * Output only. Last modification time of this environment as milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * Required. Name of the environment. Values must match the regular expression `^[.\\p{Alnum}-_]{1,255}$`
     */
    name?: string | null;
    /**
     * Optional. Key-value pairs that may be used for customizing the environment.
     */
    properties?: Schema$GoogleCloudApigeeV1Properties;
  }
  export interface Schema$GoogleCloudApigeeV1EnvironmentConfig {
    /**
     * The time at which this environment config was created.
     */
    createTime?: string | null;
    /**
     * Debug mask that applies to all deployments in the environment.
     */
    debugMask?: Schema$GoogleCloudApigeeV1DebugMask;
    /**
     * A list of deployments in the environment
     */
    deployments?: Schema$GoogleCloudApigeeV1DeploymentConfig[];
    /**
     * Feature flags inherited from the org and environment parents.
     */
    featureFlags?: {[key: string]: string} | null;
    /**
     * A list of flow hooks in the environment.
     */
    flowhooks?: Schema$GoogleCloudApigeeV1FlowHookConfig[];
    /**
     * A list of keystores in the environment.
     */
    keystores?: Schema$GoogleCloudApigeeV1KeystoreConfig[];
    /**
     * The name of the environment config. Must be of the form &#39;organizations/{org}/environments/{env}/configs/{config_id}
     */
    name?: string | null;
    /**
     * This field can be used by the control plane to add some context information about itself. This information could help detect the source of the document during diagnostics and debugging.
     */
    provider?: string | null;
    /**
     * Name of the pubsub topic for this environment.
     */
    pubsubTopic?: string | null;
    /**
     * A list of resource references in the environment.
     */
    resourceReferences?: Schema$GoogleCloudApigeeV1ReferenceConfig[];
    /**
     * A list of resource versions in the environment.
     */
    resources?: Schema$GoogleCloudApigeeV1ResourceConfig[];
    /**
     * A sequence number that defines an ordering on environment configs. No two configs under an environment will ever have the same sequence number. A higher sequence number means that the config was deployed more recently than one with a lower sequence number.
     */
    sequenceNumber?: string | null;
    /**
     * A list of target servers in the environment. Disabled target servers are not included.
     */
    targets?: Schema$GoogleCloudApigeeV1TargetServerConfig[];
  }
  export interface Schema$GoogleCloudApigeeV1File {
    /**
     * Details for the file.
     */
    data?: Schema$GoogleCloudApigeeV1FileData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1FileData {
    /**
     * File extension.
     */
    extension?: string | null;
    /**
     * Name of the file.
     */
    filename?: string | null;
    /**
     * Full URL to access the file.
     */
    fullUrl?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    height?: number | null;
    /**
     * Boolean flag that specifies whether the file is an image.
     */
    image?: boolean | null;
    /**
     * Time the file was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Relative URL to access the file.
     */
    relUrl?: string | null;
    /**
     * File size.
     */
    size?: string | null;
    /**
     * URL for the thumbnail.
     */
    thumbUrl?: string | null;
    /**
     * URL for the current version of the file.
     */
    versionedRelUrl?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    width?: number | null;
  }
  export interface Schema$GoogleCloudApigeeV1FilenamePayload {
    /**
     * Name of the file.
     */
    filename?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1FlowHook {
    /**
     * Optional. Flag that specifies whether execution should continue if the flow hook throws an exception. Set to `true` to continue execution. Set to `false` to stop execution if the flow hook throws an exception.Defaults to `true`.
     */
    continueOnError?: boolean | null;
    /**
     * Description of the flow hook.
     */
    description?: string | null;
    /**
     * Output only. Where in the API call flow the flow hook is invoked. Must be one of `PreProxyFlowHook`, `PostProxyFlowHook`, `PreTargetFlowHook`, or `PostTargetFlowHook`.
     */
    flowHookPoint?: string | null;
    /**
     * Shared flow attached to this flow hook, or empty if there is none attached.
     */
    sharedFlow?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1FlowHookConfig {
    /**
     * Should the flow abort after an error in the flow hook. Should default to true if unset.
     */
    continueOnError?: boolean | null;
    /**
     * The name of the flow hook. Must be of the form &#39;organizations/{org}/environments/{env}/flowhooks/{point}&#39;&#39;. Known points are PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, and PostTargetFlowHook
     */
    name?: string | null;
    /**
     * The name of the shared flow to invoke. Must be of the form &#39;organizations/{org}/sharedflows/{sharedflow}&#39;.
     */
    sharedFlowName?: string | null;
  }
  /**
   * Response message for the GetIdentityProvider RPC.
   */
  export interface Schema$GoogleCloudApigeeV1GetIdentityProviderResponse {
    /**
     * Details of the identity provider.
     */
    data?: Schema$GoogleCloudApigeeV1IdentityProvider;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Request for GetSyncAuthorization.
   */
  export interface Schema$GoogleCloudApigeeV1GetSyncAuthorizationRequest {}
  /**
   * Response message for the GetZone RPC.
   */
  export interface Schema$GoogleCloudApigeeV1GetZoneResponse {
    /**
     * Details of the zone.
     */
    data?: Schema$GoogleCloudApigeeV1Zone;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1GuiSection {
    /**
     * List of values for the element.
     */
    elements?: any[] | null;
    /**
     * Kind.
     */
    kind?: string | null;
    /**
     * Title of the element.
     */
    title?: string | null;
  }
  /**
   * Identity provider for a zone.
   */
  export interface Schema$GoogleCloudApigeeV1IdentityProvider {
    /**
     * Boolean flag that specifies whether the identity provider is active.
     */
    active?: boolean | null;
    /**
     * Configuration for the identity provider.
     */
    config?: Schema$GoogleCloudApigeeV1IdentityProviderConfig;
    /**
     * Time the identity provider was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * ID of the identity provider.
     */
    id?: string | null;
    /**
     * Time the identity provider was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * User-defined name of the identity provider.
     */
    name?: string | null;
    /**
     * Type of the identity provider.
     */
    type?: string | null;
  }
  /**
   * Configuration for an identity provider.
   */
  export interface Schema$GoogleCloudApigeeV1IdentityProviderConfig {
    /**
     * Certificate for the identity provider.
     */
    certificate?: Schema$GoogleCloudApigeeV1SamlCertificate;
    /**
     * ID of an entity that provides SAML-based services.
     */
    entityId?: string | null;
    /**
     * URL used for sign in using this identity provider.
     */
    loginUrl?: string | null;
    /**
     * URL used for sign out using this identity provider.
     */
    logoutUrl?: string | null;
    /**
     * URL to the identity provider metadata.
     */
    spMetadataUrl?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1KeyAliasReference {
    /**
     * The alias id. Must exist in the keystore referred to by reference.
     */
    aliasId?: string | null;
    /**
     * The reference name. Must be of the form: organizations/{org}/environments/{env}/references/{ref}.
     */
    reference?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1KeyStatusChange {
    /**
     * Approve or revoke API key.
     */
    action?: string | null;
  }
  /**
   * A datastore for Certificates and Aliases
   */
  export interface Schema$GoogleCloudApigeeV1Keystore {
    /**
     * Output only. The aliases in this keystore.
     */
    aliases?: string[] | null;
    /**
     * Required. The resource ID for this keystore.  Values must match the regular expression `[\w[:space:]-.]{1,255}`.
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1KeystoreAlias {
    /**
     * Alias for the keystore.
     */
    alias?: string | null;
    /**
     * Domains names bound to the subject of the certificate.
     */
    domainNames?: string[] | null;
    /**
     * Expiration date.
     */
    expiryDate?: string | null;
    /**
     * Boolean flag that specifies whether the keystore alias is valid.
     */
    valid?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1KeystoreConfig {
    /**
     * Aliases in the keystore.
     */
    aliases?: Schema$GoogleCloudApigeeV1AliasRevisionConfig[];
    /**
     * The resource name. Must be of the form: &#39;organizations/{org}/environments/{env}/keystores/{keystore}&#39;.
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1KeystoreSetResponse {
    /**
     * Details for the keystores.
     */
    data?: Schema$GoogleCloudApigeeV1PortalKeystore[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * A collection of key, value string pairs
   */
  export interface Schema$GoogleCloudApigeeV1KeyValueMap {
    /**
     * Optional. If `true` entry values will be encrypted.
     */
    encrypted?: boolean | null;
    /**
     * Required. The id of the key value map.
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListApiDocsResponse {
    /**
     * Details for all published APIs.
     */
    data?: Schema$GoogleCloudApigeeV1ApiDocBody[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListApiProductsResponse {
    /**
     * Lists all API product names defined for an organization.
     */
    apiProduct?: Schema$GoogleCloudApigeeV1ApiProduct[];
  }
  export interface Schema$GoogleCloudApigeeV1ListApiProxiesResponse {
    proxies?: Schema$GoogleCloudApigeeV1ApiProxy[];
  }
  export interface Schema$GoogleCloudApigeeV1ListAppsResponse {
    app?: Schema$GoogleCloudApigeeV1App[];
  }
  /**
   * The response for ListAsyncQueries
   */
  export interface Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse {
    /**
     * The asynchronous queries belong to requested organization and environment
     */
    queries?: Schema$GoogleCloudApigeeV1AsyncQuery[];
  }
  export interface Schema$GoogleCloudApigeeV1ListCompaniesResponse {
    /**
     * A list of company.
     */
    company?: Schema$GoogleCloudApigeeV1Company[];
  }
  export interface Schema$GoogleCloudApigeeV1ListCompanyAppsResponse {
    /**
     * A list of apps for a company.
     */
    app?: Schema$GoogleCloudApigeeV1CompanyApp[];
  }
  export interface Schema$GoogleCloudApigeeV1ListConsumerAppsResponse {
    /**
     * List of apps.
     */
    data?: Schema$GoogleCloudApigeeV1PortalApp[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * This message encapsulates a list of custom report definitions
   */
  export interface Schema$GoogleCloudApigeeV1ListCustomReportsResponse {
    qualifier?: Schema$GoogleCloudApigeeV1CustomReport[];
  }
  export interface Schema$GoogleCloudApigeeV1ListDebugSessionsResponse {
    /**
     * Session info that includes debug session ID and the first transaction creation timestamp.
     */
    sessions?: Schema$GoogleCloudApigeeV1Session[];
  }
  export interface Schema$GoogleCloudApigeeV1ListDeploymentsResponse {
    /**
     * List of deployments.
     */
    deployments?: Schema$GoogleCloudApigeeV1Deployment[];
  }
  export interface Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse {
    /**
     * List of developer apps and their credentials.
     */
    app?: Schema$GoogleCloudApigeeV1DeveloperApp[];
  }
  /**
   * Response for ListEnvironmentResources
   */
  export interface Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse {
    /**
     * List of resources files.
     */
    resourceFile?: Schema$GoogleCloudApigeeV1ResourceFile[];
  }
  export interface Schema$GoogleCloudApigeeV1ListFilesResponse {
    /**
     * Details for the files.
     */
    data?: Schema$GoogleCloudApigeeV1FileData[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListHybridIssuersResponse {
    /**
     * Lists of hybrid services and its trusted issuer email ids.
     */
    issuers?: Schema$GoogleCloudApigeeV1ServiceIssuersMapping[];
  }
  /**
   * Response message for the ListIdentityProviders RPC.
   */
  export interface Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse {
    /**
     * List of identity providers.
     */
    data?: Schema$GoogleCloudApigeeV1ListIdentityProvidersResponseIdentityProviders;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Wrapper message for a list of identity providers.
   */
  export interface Schema$GoogleCloudApigeeV1ListIdentityProvidersResponseIdentityProviders {
    /**
     * List of identity providers.
     */
    providers?: Schema$GoogleCloudApigeeV1IdentityProvider[];
  }
  export interface Schema$GoogleCloudApigeeV1ListMenuItemsResponse {
    /**
     * Details of the menu items.
     */
    data?: Schema$GoogleCloudApigeeV1MenuItemData[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListMenuTypesResponse {
    /**
     * Details of the menu types.
     */
    data?: Schema$GoogleCloudApigeeV1MenuTypeData[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListOfDevelopersResponse {
    /**
     * List of developers.
     */
    developer?: Schema$GoogleCloudApigeeV1Developer[];
  }
  export interface Schema$GoogleCloudApigeeV1ListOrganizationsResponse {
    /**
     * List of Apigee organizations and associated GCP projects.
     */
    organizations?: Schema$GoogleCloudApigeeV1OrganizationProjectMapping[];
  }
  export interface Schema$GoogleCloudApigeeV1ListPagesResponse {
    /**
     * Details for all pages.
     */
    data?: Schema$GoogleCloudApigeeV1PageBody[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListProxySpecsResponse {
    /**
     * Details for the OpenAPI Specifications.
     */
    data?: Schema$GoogleCloudApigeeV1ProxySpec[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListPublishableProductsResponse {
    /**
     * List of publishable API products.
     */
    data?: Schema$GoogleCloudApigeeV1PortalApiProduct[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ListSharedFlowsResponse {
    sharedFlows?: Schema$GoogleCloudApigeeV1SharedFlow[];
  }
  /**
   * Response message for the ListZones RPC.
   */
  export interface Schema$GoogleCloudApigeeV1ListZonesResponse {
    /**
     * List of zones.
     */
    data?: Schema$GoogleCloudApigeeV1ListZonesResponseZones;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Wrapper for the list of zones.
   */
  export interface Schema$GoogleCloudApigeeV1ListZonesResponseZones {
    /**
     * List of zones.
     */
    zones?: Schema$GoogleCloudApigeeV1Zone[];
  }
  export interface Schema$GoogleCloudApigeeV1MenuItem {
    /**
     * Details of the menu item.
     */
    data?: Schema$GoogleCloudApigeeV1MenuItemData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1MenuItemData {
    /**
     * Boolean flag that specifies whether the menu items is a draft.
     */
    draft?: boolean | null;
    /**
     * Boolean flag that specifies whether the menu item is a submenu (nested).
     */
    isNested?: boolean | null;
    /**
     * ID of the menu item.
     */
    menuItemId?: string | null;
    /**
     * ID of the menu type.
     */
    menuTypeId?: string | null;
    /**
     * Time the menu item was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    modifiedBy?: string | null;
    /**
     * Name of the menu item.
     */
    name?: string | null;
    /**
     * ID of the page associated with the menu item.
     */
    pageId?: string | null;
    /**
     * Priority order of the menu item.
     */
    priority?: number | null;
    /**
     * Relative URL to the page associated with the menu item.
     */
    url?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1MenuType {
    /**
     * Details of the menu type.
     */
    data?: Schema$GoogleCloudApigeeV1MenuTypeData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1MenuTypeData {
    /**
     * Display name for the menu type.
     */
    friendlyId?: string | null;
    /**
     * ID of the menu type.
     */
    menuTypeId?: string | null;
    /**
     * Time the menu type was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    modifiedBy?: string | null;
    /**
     * Name of the menu type.
     */
    name?: string | null;
    /**
     * Name of the portal.
     */
    siteId?: string | null;
  }
  /**
   * This message type encapsulates additional information about query execution
   */
  export interface Schema$GoogleCloudApigeeV1Metadata {
    /**
     * List of error messages as strings
     */
    errors?: string[] | null;
    /**
     * List of additional information such as data source, if result was truncated etc. E.g &quot;notices&quot;: [              &quot;Source:Postgres&quot;,              &quot;PG Host:uappg0rw.e2e.apigeeks.net&quot;,              &quot;query served by:4b64601e-40de-4eb1-bfb9-eeee7ac929ed&quot;,              &quot;Table used: edge.api.uapgroup2.agg_api&quot;   ]
     */
    notices?: string[] | null;
  }
  /**
   * This message type encapsulates the metric data point Example {    &quot;name&quot;: &quot;sum(message_count)&quot;,    &quot;values&quot; : [ {                   &quot;timestamp&quot;: 1549004400000,                   &quot;value&quot;: &quot;39.0&quot;                 },                 {                   &quot;timestamp&quot; : 1548997200000,                   &quot;value&quot; : &quot;0.0&quot;                 } ] } or {     &quot;name&quot;: &quot;sum(message_count)&quot;,     &quot;values&quot; : [&quot;39.0&quot;] }
   */
  export interface Schema$GoogleCloudApigeeV1Metric {
    /**
     * This field contains the metric name
     */
    name?: string | null;
    /**
     * List of metric values Possible value format &quot;values&quot;:[&quot;39.0&quot;] or &quot;values&quot;:[ { &quot;value&quot;: &quot;39.0&quot;, &quot;timestamp&quot;: 1232434354} ]
     */
    values?: any[] | null;
  }
  export interface Schema$GoogleCloudApigeeV1Metrics {
    /**
     * Object containing metrics related to the organization.
     */
    data?: Schema$GoogleCloudApigeeV1MetricsData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1MetricsData {
    /**
     * Total number of portals.
     */
    totalNumberOfSites?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1NestedPayload {
    /**
     * Boolean flag that specifies whether the menu item is a submenu (nested).
     */
    isNested?: boolean | null;
  }
  /**
   * Metadata describing an Operation.
   */
  export interface Schema$GoogleCloudApigeeV1OperationMetadata {
    operationType?: string | null;
    state?: string | null;
    /**
     * Name of the resource for which the operation is operating on.
     */
    targetResourceName?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1OptimizedStats {
    /**
     * This field wraps the stats response for Js Optimized Scenario with a Response key. E.g. {  &quot;Response&quot;: {      &quot;TimeUnit&quot;: [],      &quot;metaData&quot;: {          &quot;errors&quot;: [],          &quot;notices&quot;: [              &quot;Source:Postgres&quot;,              &quot;Table used: edge.api.aaxgroup001.agg_api&quot;,              &quot;PG Host:ruappg08-ro.production.apigeeks.net&quot;,              &quot;query served by:80c4ebca-6a10-4a2e-8faf-c60c1ee306ca&quot;          ]      },      &quot;resultTruncated&quot;: false,      &quot;stats&quot;: {          &quot;data&quot;: [              {                 &quot;identifier&quot;: {                     &quot;names&quot;: [                         &quot;apiproxy&quot;                     ],                     &quot;values&quot;: [                         &quot;sirjee&quot;                     ]                 },                 &quot;metric&quot;: [                     {                         &quot;env&quot;: &quot;prod&quot;,                         &quot;name&quot;: &quot;sum(message_count)&quot;,                         &quot;values&quot;: [                             36.0                         ]                     },                     {                         &quot;env&quot;: &quot;prod&quot;,                         &quot;name&quot;: &quot;sum(is_error)&quot;,                         &quot;values&quot;: [                             36.0                         ]                     }                 ]             }          ]      }  } }
     */
    Response?: Schema$GoogleCloudApigeeV1OptimizedStatsResponse;
  }
  export interface Schema$GoogleCloudApigeeV1OptimizedStatsNode {
    data?: any[] | null;
  }
  /**
   * This message type encapsulates a response format for Js Optimized Scenario
   */
  export interface Schema$GoogleCloudApigeeV1OptimizedStatsResponse {
    /**
     * This field contains metadata information about the query executed
     */
    metaData?: Schema$GoogleCloudApigeeV1Metadata;
    /**
     * This ia a boolean field to indicate if the results were truncated based on the limit parameter.
     */
    resultTruncated?: boolean | null;
    /**
     * This field contains a stats results
     */
    stats?: Schema$GoogleCloudApigeeV1OptimizedStatsNode;
    /**
     * This field contains a list of time unit values. Time unit refers to an epoch timestamp value.
     */
    TimeUnit?: string[] | null;
  }
  export interface Schema$GoogleCloudApigeeV1Organization {
    /**
     * Required. Primary GCP region for analytics data storage. For valid values, see [Create an organization](https://docs.apigee.com/hybrid/latest/precog-provision).
     */
    analyticsRegion?: string | null;
    /**
     * Not used by Apigee.
     */
    attributes?: string[] | null;
    /**
     * Output only. Time that the Apigee organization was created in milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * Not used by Apigee.
     */
    customerName?: string | null;
    /**
     * Description of the Apigee organization.
     */
    description?: string | null;
    displayName?: string | null;
    /**
     * Output only. List of environments in the Apigee organization.
     */
    environments?: string[] | null;
    /**
     * Output only. Time that the Apigee organization was last modified in milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * Required. Name of the Apigee organization.
     */
    name?: string | null;
    /**
     * Properties defined in the Apigee organization profile.
     */
    properties?: Schema$GoogleCloudApigeeV1Properties;
    /**
     * Output only. Runtime type of the Apigee organization based on the Apigee subscription purchased.
     */
    runtimeType?: string | null;
    /**
     * Output only. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased). See [Apigee pricing](https://cloud.google.com/apigee/pricing/).
     */
    subscriptionType?: string | null;
    /**
     * Not used by Apigee.
     */
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1OrganizationProjectMapping {
    /**
     * Name of the Apigee organization.
     */
    organization?: string | null;
    /**
     * List of GCP projects associated with the Apigee organization.
     */
    projectIds?: string[] | null;
  }
  export interface Schema$GoogleCloudApigeeV1Page {
    /**
     * Details of page.
     */
    data?: Schema$GoogleCloudApigeeV1PageBody;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PageBody {
    /**
     * Boolean flag that specifies whether the page is published.
     */
    active?: boolean | null;
    /**
     * Boolean flag that specifies whether all or only registered users can access the page.
     */
    anonAllowed?: boolean | null;
    /**
     * Name of the API product.
     */
    apiProduct?: string | null;
    /**
     * Published contents of the page.
     */
    content?: string | null;
    /**
     * Time the page was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * Description of the page.
     */
    description?: string | null;
    /**
     * Draft content of the page.
     */
    draft?: string | null;
    /**
     * User-friendly page ID (page URL).
     */
    friendlyId?: string | null;
    /**
     * Reserved for future use.
     */
    generatedContent?: string[] | null;
    /**
     * ID of the page.
     */
    id?: string | null;
    /**
     * Page layout. (Internal use only.)
     */
    layout?: string | null;
    /**
     * Time the page was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    modifiedBy?: string | null;
    /**
     * Title of the page.
     */
    name?: string | null;
    /**
     * Time the page was last published in milliseconds since epoch.
     */
    published?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    publishedBy?: string | null;
    /**
     * ID of the portal.
     */
    siteId?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    submenuId?: string | null;
    /**
     * System-generated page. (Internal use only.)
     */
    systemGenerated?: boolean | null;
    /**
     * Reserved for future use.
     */
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PageContent {
    /**
     * Page content in HTML.
     */
    html?: string | null;
    /**
     * Page title.
     */
    title?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PageContentPayload {
    /**
     * Contents of page.
     */
    content?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PageContentResponse {
    /**
     * Page content.
     */
    data?: Schema$GoogleCloudApigeeV1PageContent;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PodStatus {
    /**
     * Version of the application running in the pod.
     */
    appVersion?: string | null;
    /**
     * Status of the deployment. Valid values include: - `deployed`: Successful. - `error` : Failed. - `pending` : Pod has not yet reported on the deployment.
     */
    deploymentStatus?: string | null;
    /**
     * Time the deployment status was reported in milliseconds since epoch.
     */
    deploymentStatusTime?: string | null;
    /**
     * Time the proxy was deployed in milliseconds since epoch.
     */
    deploymentTime?: string | null;
    /**
     * Name of the pod which is reporting the status.
     */
    podName?: string | null;
    /**
     * Overall status of the pod (not this specific deployment). Valid values include: - `active`: Up to date. - `stale` : Recently out of date.  Pods that have not reported status in a long time are excluded from the output.
     */
    podStatus?: string | null;
    /**
     * Time the pod status was reported in milliseconds since epoch.
     */
    podStatusTime?: string | null;
    /**
     * Code associated with the deployment status.
     */
    statusCode?: string | null;
    /**
     * Human-readable message associated with the status code.
     */
    statusCodeDetails?: string | null;
  }
  /**
   * Point is a group of information collected by runtime plane at critical points of the message flow of the processed API request. This is a list of supported point IDs, categorized to three major buckets. For each category, debug points that we are currently supporting are listed below: - Flow status debug points:     StateChange     FlowInfo     Condition     Execution     DebugMask     Error - Flow control debug points:     FlowCallout     Paused     Resumed     FlowReturn     BreakFlow     Error - Runtime debug points:     ScriptExecutor     FlowCalloutStepDefinition     CustomTarget     StepDefinition     Oauth2ServicePoint     RaiseFault     NodeJS  The detail information of the given debug point is stored in a list of results.
   */
  export interface Schema$GoogleCloudApigeeV1Point {
    /**
     * Name of a step in the transaction.
     */
    id?: string | null;
    /**
     * List of results extracted from a given debug point.
     */
    results?: Schema$GoogleCloudApigeeV1Result[];
  }
  export interface Schema$GoogleCloudApigeeV1PortalApiProduct {
    /**
     * Approval type (automatic or manual).
     */
    approvalType?: string | null;
    /**
     * Description of the API product.
     */
    description?: string | null;
    /**
     * Display name for the API product used in the UI.
     */
    displayName?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    isChecked?: boolean | null;
    /**
     * Boolean flag that specifies whether the API product is public or private.
     */
    isPublic?: boolean | null;
    /**
     * Name of the API product.
     */
    name?: string | null;
    /**
     * List of API proxies available in the API product.
     */
    proxies?: string[] | null;
    /**
     * Not used by Apigee hybrid.
     */
    rights?: string | null;
    /**
     * Status of the API product.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalApp {
    /**
     * List of API products associated with the app.
     */
    apiProducts?: Schema$GoogleCloudApigeeV1ApiProductRef[];
    /**
     * List of credentials.
     */
    apiProductsFromCredentials?: Schema$GoogleCloudApigeeV1Credential[];
    /**
     * Callback URL.
     */
    callbackUrl?: string | null;
    /**
     * Time the app was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * List of credentials.
     */
    credentials?: Schema$GoogleCloudApigeeV1Credential[];
    /**
     * Description of the app.
     */
    description?: string | null;
    /**
     * User-friendly name of the app used in the UI.
     */
    displayName?: string | null;
    /**
     * ID of the app.
     */
    id?: string | null;
    /**
     * Time the app was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Name of the app.
     */
    name?: string | null;
    /**
     * Owner of the app.
     */
    owner?: string | null;
    /**
     * Type of owner, team or user.
     */
    ownerType?: string | null;
    /**
     * Status of the app.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalConfig {
    /**
     * Domain suffix.
     */
    domainSuffix?: string | null;
    /**
     * Proxy domain suffix.
     */
    proxyDomainSuffix?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalConfigResponse {
    /**
     * Details of the portal configuration.
     */
    data?: Schema$GoogleCloudApigeeV1PortalConfig;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalKeystore {
    /**
     * Aliases for the keystore.
     */
    aliases?: Schema$GoogleCloudApigeeV1KeystoreAlias[];
    /**
     * Name of the keystore.
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalResource {
    description?: string | null;
    id?: string | null;
    name?: string | null;
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalResourceAction {
    dependentActions?: string[] | null;
    description?: string | null;
    id?: string | null;
    name?: string | null;
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalResourceCollection {
    resources?: Schema$GoogleCloudApigeeV1PortalResource[];
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalResourceType {
    actions?: Schema$GoogleCloudApigeeV1PortalResourceAction[];
    collection?: string | null;
    defaultActions?: string[] | null;
    description?: string | null;
    id?: string | null;
    name?: string | null;
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PortalResourceTypeCollection {
    resourceTypes?: Schema$GoogleCloudApigeeV1PortalResourceType[];
    type?: string | null;
  }
  /**
   * Message for compatibility with legacy Edge specification for Java Properties object in JSON.
   */
  export interface Schema$GoogleCloudApigeeV1Properties {
    /**
     * List of all properties in the object
     */
    property?: Schema$GoogleCloudApigeeV1Property[];
  }
  /**
   * A single property entry in the Properties message.
   */
  export interface Schema$GoogleCloudApigeeV1Property {
    /**
     * The property key
     */
    name?: string | null;
    /**
     * The property value
     */
    value?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ProxySpec {
    /**
     * Time the portal was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    inDocstore?: boolean | null;
    /**
     * Time the portal was last modified in milliseconds since epoch.
     */
    lastModified?: string | null;
    /**
     * Name of the OpenAPI Specification.
     */
    name?: string | null;
    /**
     * Name of the API proxy.
     */
    proxy?: string | null;
    /**
     * Revision of the API proxy.
     */
    revision?: number | null;
    /**
     * URL of the OpenAPI Specification.
     */
    url?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PublishedApisPage {
    /**
     * Page contents for the published API.
     */
    html?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1PublishedApisPageResponse {
    /**
     * Details for the published API.
     */
    data?: Schema$GoogleCloudApigeeV1PublishedApisPage;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Query {
    /**
     * Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
     */
    csvDelimiter?: string | null;
    /**
     * A list of dimensions https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
     */
    dimensions?: string[] | null;
    /**
     * Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
     */
    filter?: string | null;
    /**
     * Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
     */
    groupByTimeUnit?: string | null;
    /**
     * Maximum number of rows that can be returned in the result.
     */
    limit?: number | null;
    /**
     * A list of Metrics
     */
    metrics?: Schema$GoogleCloudApigeeV1QueryMetric[];
    /**
     * Asynchronous Query Name.
     */
    name?: string | null;
    /**
     * Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
     */
    outputFormat?: string | null;
    /**
     * Asynchronous Report ID.
     */
    reportDefinitionId?: string | null;
    /**
     * Required. Time range for the query. Can use the following predefined strings to specify the time range:   `last60minutes`   `last24hours`   `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ.  Example:   &quot;timeRange&quot;: {     &quot;start&quot;: &quot;2018-07-29T00:13:00Z&quot;,     &quot;end&quot;: &quot;2018-08-01T00:18:00Z&quot;   }
     */
    timeRange?: any | null;
  }
  export interface Schema$GoogleCloudApigeeV1QueryMetadata {
    /**
     * Dimensions of the AsyncQuery.
     */
    dimensions?: string[] | null;
    /**
     * End timestamp of the query range.
     */
    endTimestamp?: string | null;
    /**
     * Metrics of the AsyncQuery.  Example: [&quot;name:message_count,func:sum,alias:sum_message_count&quot;]
     */
    metrics?: string[] | null;
    /**
     * Output format.
     */
    outputFormat?: string | null;
    /**
     * Start timestamp of the query range.
     */
    startTimestamp?: string | null;
    /**
     * Query GroupBy time unit.
     */
    timeUnit?: string | null;
  }
  /**
   * More info about Metric: https://docs.apigee.com/api-platform/analytics/analytics-reference#metrics
   */
  export interface Schema$GoogleCloudApigeeV1QueryMetric {
    /**
     * Alias for the metric. Alias will be used to replace metric name in query results.
     */
    alias?: string | null;
    /**
     * Aggregation function: avg, min, max, or sum
     */
    function?: string | null;
    /**
     * Required. Metric name
     */
    name?: string | null;
    /**
     * One of `+`, `-`, `/`, `%`, `*`
     */
    operator?: string | null;
    /**
     * Operand value should be provided when operator is set.
     */
    value?: string | null;
  }
  /**
   * A Reference configuration. References must refer to a keystore that also exists in the parent environment.
   */
  export interface Schema$GoogleCloudApigeeV1Reference {
    /**
     * Optional. A human-readable description of this reference.
     */
    description?: string | null;
    /**
     * Required. The resource id of this reference. Values must match the regular expression [\w\s\-.]+.
     */
    name?: string | null;
    /**
     * Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resource_type.
     */
    refers?: string | null;
    /**
     * The type of resource referred to by this reference. Valid values are &#39;KeyStore&#39; or &#39;TrustStore&#39;.
     */
    resourceType?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ReferenceConfig {
    /**
     * The name of the reference. Must be of the form &#39;organizations/{org}/environments/{env}/references/{ref}&#39;.
     */
    name?: string | null;
    /**
     * The name of the referred resource. Only references to keystore resources are supported. Must be of the form &#39;organizations/{org}/environments/{env}/keystores/{ks}&#39;.
     */
    resourceName?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ReportProperty {
    /**
     * name of the property
     */
    property?: string | null;
    /**
     * property values
     */
    value?: Schema$GoogleCloudApigeeV1Attribute[];
  }
  export interface Schema$GoogleCloudApigeeV1ResourceConfig {
    /**
     * The location of the resource as a URI.
     */
    location?: string | null;
    /**
     * The resource name. Only environment-scoped resource files are supported. Must be of the form &#39;organizations/{org}/environments/{env}/resourcefiles/{type}/{file}/revisions/{rev}&#39;.
     */
    name?: string | null;
  }
  /**
   * Metadata about a resource file.
   */
  export interface Schema$GoogleCloudApigeeV1ResourceFile {
    /**
     * ID of the resource file.
     */
    name?: string | null;
    /**
     * Resource file type. {{ resource_file_type }}
     */
    type?: string | null;
  }
  /**
   * List of resource files.
   */
  export interface Schema$GoogleCloudApigeeV1ResourceFiles {
    /**
     * List of resource files.
     */
    resourceFile?: Schema$GoogleCloudApigeeV1ResourceFile[];
  }
  /**
   * Result is short for &quot;action result&quot;, could be different types identified by &quot;action_result&quot; field. Supported types: 1. DebugInfo : generic debug info collected by runtime recorded as a list of properties. For example, the contents could be virtual host info, state change result, or execution metadata. Required fields : properties, timestamp  2. RequestMessage: information of a http request. Contains headers, request URI and http methods type.Required fields : headers, uri, verb  3. ResponseMessage: information of a http response. Contains headers, reason phrase and http status code. Required fields : headers, reasonPhrase, statusCode  4. ErrorMessage: information of a http error message. Contains detail error message, reason phrase and status code. Required fields : content, headers, reasonPhrase, statusCode  5. VariableAccess: a list of variable access actions, can be Get, Set and Remove. Required fields : accessList
   */
  export interface Schema$GoogleCloudApigeeV1Result {
    /**
     * A list of variable access actions agaist the api proxy. Supported values: Get, Set, Remove.
     */
    accessList?: Schema$GoogleCloudApigeeV1Access[];
    /**
     * Type of the action result. Can be one of the five: DebugInfo, RequestMessage, ResponseMessage, ErrorMessage, VariableAccess
     */
    ActionResult?: string | null;
    /**
     * Error message content. for example, &quot;content&quot; : &quot;{\&quot;fault\&quot;:{\&quot;faultstring\&quot;:\&quot;API timed out\&quot;,\&quot;detail\&quot;:{\&quot;errorcode\&quot;:\&quot;flow.APITimedOut\&quot;}}}&quot;
     */
    content?: string | null;
    /**
     * A list of HTTP headers. for example, &#39;&quot;headers&quot; : [ {   &quot;name&quot; : &quot;Content-Length&quot;,   &quot;value&quot; : &quot;83&quot; }, {   &quot;name&quot; : &quot;Content-Type&quot;,   &quot;value&quot; : &quot;application/json&quot; } ]&#39;
     */
    headers?: Schema$GoogleCloudApigeeV1Property[];
    /**
     * Name value pairs used for DebugInfo ActionResult.
     */
    properties?: Schema$GoogleCloudApigeeV1Properties;
    /**
     * HTTP response phrase
     */
    reasonPhrase?: string | null;
    /**
     * HTTP response code
     */
    statusCode?: string | null;
    /**
     * Timestamp of when the result is recorded. Its format is dd-mm-yy hh:mm:ss:xxx. For example, `&quot;timestamp&quot; : &quot;12-08-19 00:31:59:960&quot;`
     */
    timestamp?: string | null;
    /**
     * The relative path of the api proxy. for example, `&quot;uRI&quot; : &quot;/iloveapis&quot;`
     */
    uRI?: string | null;
    /**
     * HTTP method verb
     */
    verb?: string | null;
  }
  /**
   * SAML certificate and metadata.
   */
  export interface Schema$GoogleCloudApigeeV1SamlCertificate {
    /**
     * SAML certificate.
     */
    certificate?: string | null;
    /**
     * Fingerprint of this SAML certificate.
     */
    fingerprint?: Schema$GoogleCloudApigeeV1SamlCertificateFingerprint;
    /**
     * Issuer of the SAML certificate.
     */
    issuer?: string | null;
    /**
     * Message from the issuer.
     */
    message?: string | null;
    /**
     * Subject of the message from the issuer.
     */
    subject?: string | null;
    /**
     * Boolean flag that specifies whether the certificate is valid.
     */
    valid?: boolean | null;
    /**
     * Time the certificate is valid in milliseconds since epoch.
     */
    validFrom?: string | null;
    /**
     * Time the certificate expires in milliseconds since epoch.
     */
    validTo?: string | null;
  }
  /**
   * Fingerprint details of a SAML certificate.
   */
  export interface Schema$GoogleCloudApigeeV1SamlCertificateFingerprint {
    /**
     * SHA1 fingerprint.
     */
    sha1?: string | null;
    /**
     * SHA256 fingerprint.
     */
    sha256?: string | null;
  }
  /**
   * Response for Schema call
   */
  export interface Schema$GoogleCloudApigeeV1Schema {
    /**
     * List of schema fiels grouped as dimensions.
     */
    dimensions?: Schema$GoogleCloudApigeeV1SchemaSchemaElement[];
    /**
     * Additional metadata associated with schema. This is a legacy field and usually consists of an empty array of strings.
     */
    meta?: string[] | null;
    /**
     * List of schema fields grouped as dimensions. These are fields that can be used with an aggregate function such as sum, avg, min, max.
     */
    metrics?: Schema$GoogleCloudApigeeV1SchemaSchemaElement[];
  }
  /**
   * Message type for the schema element
   */
  export interface Schema$GoogleCloudApigeeV1SchemaSchemaElement {
    /**
     * Name of the field
     */
    name?: string | null;
    /**
     * Property of the schema field E.g. {    &quot;createTime&quot;: &quot;2016-02-26T10:23:09.592Z&quot;,    &quot;custom&quot;: &quot;false&quot;,    &quot;type&quot;: &quot;string&quot; }
     */
    properties?: Schema$GoogleCloudApigeeV1SchemaSchemaProperty;
  }
  /**
   * Message type for schema property
   */
  export interface Schema$GoogleCloudApigeeV1SchemaSchemaProperty {
    /**
     * Creation time of the field
     */
    createTime?: string | null;
    /**
     * Custom is a flag signifying if the field was provided as part of the standard dataset or a custom field created by the customer
     */
    custom?: string | null;
    /**
     * Data type of the field.
     */
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1SendTestEmailPayload {
    /**
     * ID of the email template.
     */
    emailTemplateId?: string | null;
    /**
     * Email address to which the test email is sent.
     */
    to?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ServerStatus {
    /**
     * Details of the server status.
     */
    data?: Schema$GoogleCloudApigeeV1ServerStatusData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ServerStatusData {
    dbConnection?: boolean | null;
    dbUpdateLatest?: boolean | null;
    defaultSmtpSend?: boolean | null;
    edgeConnection?: boolean | null;
    idpConnection?: boolean | null;
    nfsFolders?: boolean | null;
    nfsReadAccess?: boolean | null;
    nfsWriteAccess?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1ServiceIssuersMapping {
    /**
     * List of trusted issuer email ids.
     */
    emailIds?: string[] | null;
    /**
     * String indicating the Apigee service name.
     */
    service?: string | null;
  }
  /**
   * Session carries the debug session id and its creation time.
   */
  export interface Schema$GoogleCloudApigeeV1Session {
    /**
     * The debug session ID.
     */
    id?: string | null;
    /**
     * The first transaction creation timestamp in millisecond, recoreded by UAP.
     */
    timestampMs?: string | null;
  }
  /**
   * The metadata describing a shared flow
   */
  export interface Schema$GoogleCloudApigeeV1SharedFlow {
    /**
     * The id of the most recently created revision for this shared flow.
     */
    latestRevisionId?: string | null;
    /**
     * Metadata describing the shared flow.
     */
    metaData?: Schema$GoogleCloudApigeeV1EntityMetadata;
    /**
     * The ID of the shared flow.
     */
    name?: string | null;
    /**
     * A list of revisions of this shared flow.
     */
    revision?: string[] | null;
  }
  /**
   * The metadata describing a shared flow revision.
   */
  export interface Schema$GoogleCloudApigeeV1SharedFlowRevision {
    /**
     * The version of the configuration schema to which this shared flow conforms. The only supported value currently is majorVersion 4 and minorVersion 0. This setting may be used in the future to enable evolution of the shared flow format.
     */
    configurationVersion?: Schema$GoogleCloudApigeeV1ConfigVersion;
    /**
     * A textual description of the shared flow revision.
     */
    contextInfo?: string | null;
    /**
     * Time at which this shared flow revision was created, in milliseconds since epoch.
     */
    createdAt?: string | null;
    /**
     * The human readable name of this shared flow.
     */
    displayName?: string | null;
    /**
     * A Key-Value map of metadata about this shared flow revision.
     */
    entityMetaDataAsProperties?: {[key: string]: string} | null;
    /**
     * Time at which this shared flow revision was most recently modified, in milliseconds since epoch.
     */
    lastModifiedAt?: string | null;
    /**
     * The resource ID of the parent shared flow.
     */
    name?: string | null;
    /**
     * A list of policy names included in this shared flow revision.
     */
    policies?: string[] | null;
    /**
     * The resource files included in this shared flow revision.
     */
    resourceFiles?: Schema$GoogleCloudApigeeV1ResourceFiles;
    /**
     * A list of the resources included in this shared flow revision formatted as &quot;{type}://{name}&quot;.
     */
    resources?: string[] | null;
    /**
     * The resource ID of this revision.
     */
    revision?: string | null;
    /**
     * A list of the shared flow names included in this shared flow revision.
     */
    sharedFlows?: string[] | null;
    /**
     * The string &quot;Application&quot;
     */
    type?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Site {
    /**
     * Details for the portal.
     */
    data?: Schema$GoogleCloudApigeeV1SiteData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1SiteData {
    /**
     * Logo image used on mobile devices.
     */
    altLogoUrl?: string | null;
    /**
     * Custom HTML/JS analytics script added before the &lt;body&gt; tag on all pages of the site.
     */
    analyticsScript?: string | null;
    analyticsTrackingId?: string | null;
    /**
     * Boolean flag that sets the default visibility for pages and API products that are published on the portal. When set to`true`, allows access by all users (public).
     */
    anonAllowedByDefault?: boolean | null;
    /**
     * List of emails that are allowed to sign up on the portal.
     */
    approvedEmails?: string | null;
    /**
     * Time the portal was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * Domain name currently in use by the portal.
     */
    currentDomain?: string | null;
    /**
     * URL currently in use by the portal.
     */
    currentURL?: string | null;
    /**
     * Custom domain (if applicable).
     */
    customDomain?: string | null;
    /**
     * Not used currently by Apigee hybrid.
     */
    customDomainEnabled?: boolean | null;
    /**
     * Not used by Apigee hybrid.
     */
    customerId?: string | null;
    /**
     * Default domain for the portal.
     */
    defaultDomain?: string | null;
    /**
     * Default URL to access the portal.
     */
    defaultURL?: string | null;
    /**
     * Description of the portal.
     */
    description?: string | null;
    /**
     * Type of writing system, such as left-to-right (ltr).
     */
    direction?: string | null;
    /**
     * Maximimum number of file assets that can be uploaded.
     */
    fileLimit?: number | null;
    /**
     * Boolean flag that specifies whether the URL will be HTTPS.
     */
    https?: boolean | null;
    /**
     * Not used by Apigee hybrid.
     */
    iconBg?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    iconUrl?: string | null;
    /**
     * ID of the portal.
     */
    id?: string | null;
    /**
     * Boolean flag that specifies whether an identity provider has been enabled.
     */
    idpEnabled?: boolean | null;
    /**
     * Not used by Apigee hybrid.
     */
    itSecretKey?: string | null;
    /**
     * Language for the portal (such as &quot;en&quot;).
     */
    language?: string | null;
    /**
     * Time that a user last signed in to the portal in milliseconds since epoch.
     */
    lastLogin?: string | null;
    /**
     * Time the portal was last modified in milliseconds since epoch.
     */
    lastModified?: string | null;
    /**
     * Time the portal was last published in milliseconds since epoch.
     */
    lastPublished?: string | null;
    /**
     * Logo image used on desktop devices.
     */
    logoUrl?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    migrationDestSiteId?: string | null;
    /**
     * Not used by Apigee hybrid.
     */
    migrationSrcSiteId?: string | null;
    /**
     * Name of the portal.
     */
    name?: string | null;
    /**
     * Name of the Apigee organization.
     */
    orgName?: string | null;
    /**
     * Version of the portal.
     */
    portalVersion?: number | null;
    /**
     * Not used by Apigee hybrid.
     */
    showSettings?: boolean | null;
    /**
     * Suffix for the portal domain. By default, this is set to &quot;.apigee.io&quot;.
     */
    siteDomainSuffix?: string | null;
    /**
     * Status of the portal indicating whether the portal is published (Active) or unpublished (Inactive).
     */
    status?: string | null;
    /**
     * Boolean flag that specifies whether the custom CSS needs to be recalculated.
     */
    stylesheetDirty?: boolean | null;
    /**
     * Not used by Apigee hybrid.
     */
    teams?: string[] | null;
    /**
     * Name of the theme used on the portal (apigee).
     */
    theme?: string | null;
    /**
     * Version of the theme used by the portal. (Internal use only.)
     */
    themeVersion?: string | null;
    /**
     * Time zone.
     */
    timeZone?: string | null;
    /**
     * Boolean flag that specifies whether the portal has been deleted.
     */
    trashed?: boolean | null;
    /**
     * Name of the user that deleted the portal.
     */
    trashedBy?: string | null;
    /**
     * Time the portal was deleted in milliseconds since epoch.
     */
    trashedOn?: string | null;
    /**
     * ID of the identity zone.
     */
    zoneId?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1SiteListResponse {
    /**
     * Details for the portals.
     */
    data?: Schema$GoogleCloudApigeeV1SiteData[];
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1SmtpConfig {
    /**
     * Authorization type. Valid values include SSL, TLS, or blank (no auth).
     */
    authType?: string | null;
    /**
     * Email address used as the sender.
     */
    fromEmail?: string | null;
    /**
     * Host URL of the SMTP server.
     */
    host?: string | null;
    /**
     * ID of the SMTP configuration.
     */
    id?: number | null;
    /**
     * SMTP password.
     */
    password?: string | null;
    /**
     * Port number for the SMTP server. Supported values include: 465 (SSL), 587 (TLS), and 25 (open, no authorization).
     */
    port?: string | null;
    /**
     * Boolean flag that specifies whether to use a secure connection to the SMTP server.
     */
    secure?: boolean | null;
    /**
     * SMTP secure password.
     */
    securePassword?: string | null;
    /**
     * ID of the portal.
     */
    siteId?: string | null;
    /**
     * SMTP username.
     */
    username?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1SmtpConfigResponse {
    /**
     * Details for the SMTP configuration.
     */
    data?: Schema$GoogleCloudApigeeV1SmtpConfig;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * This message type encapsulates a stats response
   */
  export interface Schema$GoogleCloudApigeeV1Stats {
    environments?: Schema$GoogleCloudApigeeV1StatsEnvironmentStats[];
    /**
     * This field contains the metadata information
     */
    metaData?: Schema$GoogleCloudApigeeV1Metadata;
  }
  /**
   * This message type encapsulates the environment wrapper     &quot;environments&quot;: [      {          &quot;metrics&quot;: [              {                  &quot;name&quot;: &quot;sum(message_count)&quot;,                  &quot;values&quot;: [                      &quot;2.52056245E8&quot;                  ]              }          ],          &quot;name&quot;: &quot;prod&quot;      }  ]
   */
  export interface Schema$GoogleCloudApigeeV1StatsEnvironmentStats {
    /**
     * This field contains the list of metrics grouped under dimensions
     */
    dimensions?: Schema$GoogleCloudApigeeV1DimensionMetric[];
    /**
     * In the final response, only one of the following fields will be present based on the dimensions provided. If no dimensions are provided, then only a top level metrics is provided. If dimensions are included, then there will be a top level dimensions field under environments which will contain metrics values and the dimension name. Example:      &quot;environments&quot;: [       {          &quot;dimensions&quot;: [              {                  &quot;metrics&quot;: [                      {                          &quot;name&quot;: &quot;sum(message_count)&quot;,                          &quot;values&quot;: [                              &quot;2.14049521E8&quot;                          ]                      }                  ],                  &quot;name&quot;: &quot;nit_proxy&quot;              }            ],            &quot;name&quot;: &quot;prod&quot;        }     ]      OR     &quot;environments&quot;: [            {                &quot;metrics&quot;: [                    {                        &quot;name&quot;: &quot;sum(message_count)&quot;,                         &quot;values&quot;: [                            &quot;2.19026331E8&quot;                        ]                    }                ],                &quot;name&quot;: &quot;prod&quot;            }        ] This field contains the list of metric values
     */
    metrics?: Schema$GoogleCloudApigeeV1Metric[];
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1StringResponse {
    /**
     * Details of the operation.
     */
    data?: string | null;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Pub/Sub subscription of an environment.
   */
  export interface Schema$GoogleCloudApigeeV1Subscription {
    /**
     * Full name of the Pub/Sub subcription. Use the following structure in your request:   `subscription &quot;projects/foo/subscription/bar&quot;`
     */
    name?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1SyncAuthorization {
    /**
     * Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting each other.  For example, when you call  [getSyncAuthorization](getSyncAuthorization) an ETag is returned in the response. Pass that ETag when calling the [setSyncAuthorization](setSyncAuthorization) to ensure that you are updating the correct version. If you don&#39;t pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately.  **Note**: We strongly recommend that you use the ETag in the read-modify-write cycle to avoid race conditions.
     */
    etag?: string | null;
    /**
     * Required. Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:`&lt;var&gt;service-account-name&lt;/var&gt;.  The &lt;var&gt;service-account-name&lt;/var&gt; is formatted like an email address. For example: `my-synchronizer-manager-service_account@my_project_id.iam.gserviceaccount.com`  You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.  The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://docs.apigee.com/hybrid/latest/sa-about#create-the-service-accounts).
     */
    identities?: string[] | null;
  }
  export interface Schema$GoogleCloudApigeeV1SystemState {
    /**
     * Details of the system state.
     */
    data?: Schema$GoogleCloudApigeeV1SystemStateData;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1SystemStateData {
    /**
     * List of portal features.
     */
    features?: string[] | null;
    /**
     * System access level message.
     */
    systemAccessLevelMessage?: string | null;
    /**
     * System access time-to-live (TTL).
     */
    systemAccessTtl?: number | null;
    /**
     * System access level.
     */
    systemStateAccessLevel?: string | null;
  }
  /**
   * TargetServer configuration. TargetServers are used to decouple a proxy&#39;s TargetEndpoint HTTPTargetConnections from concrete URLs for backend services.
   */
  export interface Schema$GoogleCloudApigeeV1TargetServer {
    /**
     * Optional. A human-readable description of this TargetServer.
     */
    description?: string | null;
    /**
     * Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
     */
    host?: string | null;
    /**
     * Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
     */
    isEnabled?: boolean | null;
    /**
     * Required. The resource id of this target server. Values must match the regular expression
     */
    name?: string | null;
    /**
     * Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
     */
    port?: number | null;
    /**
     * Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
     */
    sSLInfo?: Schema$GoogleCloudApigeeV1TlsInfo;
  }
  export interface Schema$GoogleCloudApigeeV1TargetServerConfig {
    /**
     * Target host name.
     */
    host?: string | null;
    /**
     * The target server revision name. Must be of the form &#39;organizations/{org}/environments/{env}/targetservers/{ts_id}/revisions/{rev}&#39;.
     */
    name?: string | null;
    /**
     * Target port.
     */
    port?: number | null;
    /**
     * TLS settings for the target.
     */
    tlsInfo?: Schema$GoogleCloudApigeeV1TlsInfoConfig;
  }
  export interface Schema$GoogleCloudApigeeV1ThemeEditorSchema {
    /**
     * Custom styles for the default variables.
     */
    defaultVariables?: Schema$GoogleCloudApigeeV1CustomStyleConfig;
    /**
     * Custom style details.
     */
    schemaInfo?: Schema$GoogleCloudApigeeV1CustomStyleSchemaInfo;
  }
  export interface Schema$GoogleCloudApigeeV1ThemeEditorUpdatePayload {
    /**
     * Custom style overrides.
     */
    customScss?: string | null;
    /**
     * Theme editor mode.
     */
    editorMode?: string | null;
    /**
     * Favicon image (base64-encoded string).
     */
    favicon?: string | null;
    /**
     * Set to &quot;theme-editor-update&quot;.
     */
    kind?: string | null;
    /**
     * Desktop logo image (base64-encoded string).
     */
    logo?: string | null;
    /**
     * Mobile logo image (base64-encoded string).
     */
    mobileLogo?: string | null;
    /**
     * Variable overrides.
     */
    overrides?: string | null;
    /**
     * Basic style settings.
     */
    variables?: string | null;
  }
  /**
   * TLS configuration information for VirtualHosts and TargetServers.
   */
  export interface Schema$GoogleCloudApigeeV1TlsInfo {
    /**
     * The SSL/TLS cipher suites to be used. Must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites
     */
    ciphers?: string[] | null;
    /**
     * Optional. Enables two-way TLS.
     */
    clientAuthEnabled?: boolean | null;
    /**
     * The TLS Common Name of the certificate.
     */
    commonName?: Schema$GoogleCloudApigeeV1TlsInfoCommonName;
    /**
     * Required. Enables one-way TLS.
     */
    enabled?: boolean | null;
    /**
     * If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS.  When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.
     */
    ignoreValidationErrors?: boolean | null;
    /**
     * Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.
     */
    keyAlias?: string | null;
    /**
     * Required if `client_auth_enabled` is true. The resource ID of the keystore. References not yet supported.
     */
    keyStore?: string | null;
    /**
     * The TLS versioins to be used.
     */
    protocols?: string[] | null;
    /**
     * The resource ID of the truststore. References not yet supported.
     */
    trustStore?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1TlsInfoCommonName {
    /**
     * The TLS Common Name string of the certificate.
     */
    value?: string | null;
    /**
     * Indicates whether the cert should be matched against as a wildcard cert.
     */
    wildcardMatch?: boolean | null;
  }
  export interface Schema$GoogleCloudApigeeV1TlsInfoConfig {
    /**
     * Whitelist of supported ciphers.
     */
    ciphers?: string[] | null;
    /**
     * Indicates if client auth is enabled for the target. Enables two-way TLS.
     */
    clientAuthEnabled?: boolean | null;
    /**
     * Common name to validate the target against.
     */
    commonName?: Schema$GoogleCloudApigeeV1CommonNameConfig;
    /**
     * Enables one-way TLS.
     */
    enabled?: boolean | null;
    /**
     * If true, ignore TLS certificate validation errors.
     */
    ignoreValidationErrors?: boolean | null;
    /**
     * The name of the Alias used for client side auth. It must be of the form: organizations/{org}/environments/{env}/keystores/{keystore}/aliases/{alias}
     */
    keyAlias?: string | null;
    /**
     * A pair of reference name and alias to use for client side auth.
     */
    keyAliasReference?: Schema$GoogleCloudApigeeV1KeyAliasReference;
    /**
     * Whitelist of supported TLS protocols.
     */
    protocols?: string[] | null;
    /**
     * The name of the Keystore or keystore reference containing trusted certificates for the server. It must be of either the form organizations/{org}/environments/{env}/keystores/{keystore} or organizations/{org}/environments/{env}/references/{reference}.
     */
    trustStore?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1UpdateCustomCssRequest {
    cssEditorPayload?: Schema$GoogleCloudApigeeV1CssEditorUpdatePayload;
    themeEditorPayload?: Schema$GoogleCloudApigeeV1ThemeEditorUpdatePayload;
  }
  /**
   * Response message for the UpdateIdentityProviderCertificate RPC.
   */
  export interface Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse {
    /**
     * Details of the certificate.
     */
    data?: Schema$GoogleCloudApigeeV1SamlCertificate;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Response message for the UpdateIdentityProviderConfig RPC.
   */
  export interface Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse {
    /**
     * Details of the identity provider configuration.
     */
    data?: Schema$GoogleCloudApigeeV1IdentityProviderConfig;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Response message for the UpdateIdentityProvider RPC.
   */
  export interface Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse {
    /**
     * Details of the identity provider.
     */
    data?: Schema$GoogleCloudApigeeV1IdentityProvider;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Response message for the UpdateZone RPC.
   */
  export interface Schema$GoogleCloudApigeeV1UpdateZoneResponse {
    /**
     * Details of the zone.
     */
    data?: Schema$GoogleCloudApigeeV1Zone;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  /**
   * Request message for the VerifyCertificate RPC.
   */
  export interface Schema$GoogleCloudApigeeV1VerifyCertificateRequest {
    /**
     * Details of the certificate.
     */
    certificate?: string | null;
    /**
     * Type of verification.
     */
    requestType?: string | null;
  }
  /**
   * Response message for the VerifyCertificate RPC.
   */
  export interface Schema$GoogleCloudApigeeV1VerifyCertificateResponse {
    /**
     * Details of the certificate.
     */
    data?: Schema$GoogleCloudApigeeV1SamlCertificate;
    /**
     * ID that can be used to find errors in the log files.
     */
    errorCode?: string | null;
    /**
     * Description of the operation.
     */
    message?: string | null;
    /**
     * ID that can be used to find request details in the log files.
     */
    requestId?: string | null;
    /**
     * Status of the operation.
     */
    status?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1VerifyDraftTokenPayload {
    /**
     * Draft token.
     */
    draftToken?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1Zone {
    /**
     * Address to which notification emails are sent when a new account is created.
     */
    accountCreationEmail?: string | null;
    /**
     * Boolean flag that specifies whether the zone is active.
     */
    active?: boolean | null;
    /**
     * List of individual email addresses (developer@some-company.com) or email domains (some-company.com, without the leading @) that can create accounts on your portal.
     */
    allowedDomains?: Schema$GoogleCloudApigeeV1ZoneAllowedDomains;
    /**
     * Company associated with the zone.
     */
    companyName?: string | null;
    /**
     * Copyright information displayed on the sign in page for the zone to enable custom branding.
     */
    copyright?: string | null;
    /**
     * Time the zone was created in milliseconds since epoch.
     */
    created?: string | null;
    /**
     * Email templates used by the zone. Email templates enable a user to customize the emails that are sent by a zone for different actions including: account verification, password reset, and account creation.
     */
    customEmailTemplates?: Schema$GoogleCloudApigeeV1ZoneCustomEmailTemplates;
    /**
     * Customized fields used on user registration form.
     */
    customRegistrationFields?: Schema$GoogleCloudApigeeV1CustomRegistrationField[];
    /**
     * Description of the zone.
     */
    description?: string | null;
    /**
     * Mapping of display text to URL for forming hyperlinks used in the footer.
     */
    footerLinks?: {[key: string]: string} | null;
    /**
     * List of portal URLs that are allowed to use this zone for sign in and zone redirection after successful sign in. This list is used as a security measure so that the zone only redirects to a predefined set of URLs that are configured when the zone or portal is created, and when a custom domain is set on a portal.
     */
    hostWhitelistedDomains?: string[] | null;
    /**
     * ID of the zone.
     */
    id?: string | null;
    /**
     * Links in the UI used by the zone.
     */
    links?: Schema$GoogleCloudApigeeV1ZoneLinks;
    /**
     * Boolean flag that specifies whether manual approval of users is required.
     */
    manualApproval?: boolean | null;
    /**
     * Time the zone was last modified in milliseconds since epoch.
     */
    modified?: string | null;
    /**
     * Name of the zone.
     */
    name?: string | null;
    /**
     * Apigee organization associated with the zone.
     */
    organization?: string | null;
    /**
     * List of portals associated with the zone.
     */
    portals?: string[] | null;
    /**
     * Product logo PNG image (base64-encoded string).
     */
    productLogo?: string | null;
    /**
     * SAML configuration used by the zone.
     */
    samlConfig?: {[key: string]: any} | null;
    /**
     * SMTP configuration for the zone.
     */
    smtpConfig?: Schema$GoogleCloudApigeeV1ZoneSmtpConfig;
    /**
     * Product logo PNG image (base64-encoded string).
     */
    squareLogo?: string | null;
    /**
     * Token policy for the zone.
     */
    tokenPolicy?: Schema$GoogleCloudApigeeV1ZoneTokenPolicy;
    /**
     * ID of the zone.
     */
    zoneId?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ZoneAllowedDomains {
    /**
     * Individual email addresses (developer@some-company.com) or email domains (some-company.com, without the leading @) that can create accounts on your portal.
     */
    whitelistedDomains?: string[] | null;
  }
  /**
   * Email templates used by a zone.
   */
  export interface Schema$GoogleCloudApigeeV1ZoneCustomEmailTemplates {
    /**
     * Email template that is sent when a user registers an account.
     */
    accountNotify?: Schema$GoogleCloudApigeeV1ZoneCustomEmailTemplatesCustomEmailTemplate;
    /**
     * Email template that is sent when a user needs to verify their email address.
     */
    accountVerify?: Schema$GoogleCloudApigeeV1ZoneCustomEmailTemplatesCustomEmailTemplate;
    /**
     * Email template used for activating a user&#39;s account.
     */
    activate?: Schema$GoogleCloudApigeeV1ZoneCustomEmailTemplatesCustomEmailTemplate;
    /**
     * Email template used for resetting a user&#39;s password.
     */
    resetPassword?: Schema$GoogleCloudApigeeV1ZoneCustomEmailTemplatesCustomEmailTemplate;
  }
  /**
   * Template for an email.
   */
  export interface Schema$GoogleCloudApigeeV1ZoneCustomEmailTemplatesCustomEmailTemplate {
    /**
     * Template for the body of the email.
     */
    body?: string | null;
    /**
     * Template for the subject of the email.
     */
    subject?: string | null;
  }
  /**
   * Links used by a zone.
   */
  export interface Schema$GoogleCloudApigeeV1ZoneLinks {
    /**
     * URL used to navigate back to the home page.
     */
    homeRedirect?: string | null;
    /**
     * Information required for redirection after sign out.
     */
    logout?: Schema$GoogleCloudApigeeV1ZoneLinksLogout;
    /**
     * Link in the UI to create an account in the zone.
     */
    selfService?: Schema$GoogleCloudApigeeV1ZoneLinksSelfService;
  }
  /**
   * Links and information used when signing out of zone.
   */
  export interface Schema$GoogleCloudApigeeV1ZoneLinksLogout {
    /**
     * Boolean flag that specifies whether the redirect parameter is disabled.
     */
    disabledRedirectParameter?: boolean | null;
    /**
     * URI parameter for the sign-out redirection.
     */
    redirectParameterName?: string | null;
    /**
     * URL to which users are directed when signing out of zone.
     */
    redirectUrl?: string | null;
    /**
     * Comma-delimited string of email addresses and domains that can create accounts on your portal.
     */
    whitelist?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ZoneLinksSelfService {
    /**
     * Link in the UI to reset the password for the zone.
     */
    passwd?: string | null;
    /**
     * Boolean flag that specifies whether self-service links are enabled.
     */
    selfServiceLinksEnabled?: boolean | null;
    /**
     * Link in the UI to create an account in the zone.
     */
    signup?: string | null;
  }
  /**
   * SMTP configuration for a zone.
   */
  export interface Schema$GoogleCloudApigeeV1ZoneSmtpConfig {
    /**
     * Authorization type. Valid values include: SSL or TLS. Leave this field blank for no authorization.
     */
    secureAuthType?: string | null;
    /**
     * Email address used as the sender.
     */
    sender?: string | null;
    /**
     * Hostname of the SMTP server, such as `smtp.gmail.com`.
     */
    serverHost?: string | null;
    /**
     * Password of the SMTP account.
     */
    serverPassword?: string | null;
    /**
     * Port to be used, such as 465 if you are using TLS/SSL.
     */
    serverPort?: string | null;
    /**
     * Username of the SMTP account.
     */
    serverUsername?: string | null;
  }
  export interface Schema$GoogleCloudApigeeV1ZoneTokenPolicy {
    /**
     * Duration in seconds that the access token will be valid after it is created.
     */
    accessTokenValidity?: string | null;
    /**
     * Keys used by the token policy.
     */
    keys?: {[key: string]: any} | null;
    /**
     * Duration in seconds that the refresh token will be valid after it is created.
     */
    refreshTokenValidity?: string | null;
  }
  /**
   * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.  If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.  Example Policy with multiple AuditConfigs:      {       &quot;audit_configs&quot;: [         {           &quot;service&quot;: &quot;allServices&quot;           &quot;audit_log_configs&quot;: [             {               &quot;log_type&quot;: &quot;DATA_READ&quot;,               &quot;exempted_members&quot;: [                 &quot;user:jose@example.com&quot;               ]             },             {               &quot;log_type&quot;: &quot;DATA_WRITE&quot;,             },             {               &quot;log_type&quot;: &quot;ADMIN_READ&quot;,             }           ]         },         {           &quot;service&quot;: &quot;sampleservice.googleapis.com&quot;           &quot;audit_log_configs&quot;: [             {               &quot;log_type&quot;: &quot;DATA_READ&quot;,             },             {               &quot;log_type&quot;: &quot;DATA_WRITE&quot;,               &quot;exempted_members&quot;: [                 &quot;user:aliya@example.com&quot;               ]             }           ]         }       ]     }  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
   */
  export interface Schema$GoogleIamV1AuditConfig {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs?: Schema$GoogleIamV1AuditLogConfig[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service?: string | null;
  }
  /**
   * Provides the configuration for logging a type of permissions. Example:      {       &quot;audit_log_configs&quot;: [         {           &quot;log_type&quot;: &quot;DATA_READ&quot;,           &quot;exempted_members&quot;: [             &quot;user:jose@example.com&quot;           ]         },         {           &quot;log_type&quot;: &quot;DATA_WRITE&quot;,         }       ]     }  This enables &#39;DATA_READ&#39; and &#39;DATA_WRITE&#39; logging, while exempting jose@example.com from DATA_READ logging.
   */
  export interface Schema$GoogleIamV1AuditLogConfig {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers?: string[] | null;
    /**
     * The log type that this config enables.
     */
    logType?: string | null;
  }
  /**
   * Associates `members` with a `role`.
   */
  export interface Schema$GoogleIamV1Binding {
    /**
     * The condition that is associated with this binding. NOTE: An unsatisfied condition will not allow user access via current binding. Different bindings, including their conditions, are examined independently.
     */
    condition?: Schema$GoogleTypeExpr;
    /**
     * Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values:  * `allUsers`: A special identifier that represents anyone who is    on the internet; with or without a Google account.  * `allAuthenticatedUsers`: A special identifier that represents anyone    who is authenticated with a Google account or a service account.  * `user:{emailid}`: An email address that represents a specific Google    account. For example, `alice@example.com` .   * `serviceAccount:{emailid}`: An email address that represents a service    account. For example, `my-other-app@appspot.gserviceaccount.com`.  * `group:{emailid}`: An email address that represents a Google group.    For example, `admins@example.com`.  * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique    identifier) representing a user that has been recently deleted. For    example, `alice@example.com?uid=123456789012345678901`. If the user is    recovered, this value reverts to `user:{emailid}` and the recovered user    retains the role in the binding.  * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus    unique identifier) representing a service account that has been recently    deleted. For example,    `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.    If the service account is undeleted, this value reverts to    `serviceAccount:{emailid}` and the undeleted service account retains the    role in the binding.  * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique    identifier) representing a Google group that has been recently    deleted. For example, `admins@example.com?uid=123456789012345678901`. If    the group is recovered, this value reverts to `group:{emailid}` and the    recovered group retains the role in the binding.   * `domain:{domain}`: The G Suite domain (primary) that represents all the    users of that domain. For example, `google.com` or `example.com`.
     */
    members?: string[] | null;
    /**
     * Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: string | null;
  }
  /**
   * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.   A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role.  Optionally, a `binding` can specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both.  **JSON example:**      {       &quot;bindings&quot;: [         {           &quot;role&quot;: &quot;roles/resourcemanager.organizationAdmin&quot;,           &quot;members&quot;: [             &quot;user:mike@example.com&quot;,             &quot;group:admins@example.com&quot;,             &quot;domain:google.com&quot;,             &quot;serviceAccount:my-project-id@appspot.gserviceaccount.com&quot;           ]         },         {           &quot;role&quot;: &quot;roles/resourcemanager.organizationViewer&quot;,           &quot;members&quot;: [&quot;user:eve@example.com&quot;],           &quot;condition&quot;: {             &quot;title&quot;: &quot;expirable access&quot;,             &quot;description&quot;: &quot;Does not grant access after Sep 2020&quot;,             &quot;expression&quot;: &quot;request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;)&quot;,           }         }       ],       &quot;etag&quot;: &quot;BwWWja0YfJA=&quot;,       &quot;version&quot;: 3     }  **YAML example:**      bindings:     - members:       - user:mike@example.com       - group:admins@example.com       - domain:google.com       - serviceAccount:my-project-id@appspot.gserviceaccount.com       role: roles/resourcemanager.organizationAdmin     - members:       - user:eve@example.com       role: roles/resourcemanager.organizationViewer       condition:         title: expirable access         description: Does not grant access after Sep 2020         expression: request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;)     - etag: BwWWja0YfJA=     - version: 3  For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
   */
  export interface Schema$GoogleIamV1Policy {
    /**
     * Specifies cloud audit logging configuration for this policy.
     */
    auditConfigs?: Schema$GoogleIamV1AuditConfig[];
    /**
     * Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
     */
    bindings?: Schema$GoogleIamV1Binding[];
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.  **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
     */
    etag?: string | null;
    /**
     * Specifies the format of the policy.  Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected.  Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations:  * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy   that includes conditions  **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.  If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.
     */
    version?: number | null;
  }
  /**
   * Request message for `SetIamPolicy` method.
   */
  export interface Schema$GoogleIamV1SetIamPolicyRequest {
    /**
     * REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
     */
    policy?: Schema$GoogleIamV1Policy;
    /**
     * OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used:  `paths: &quot;bindings, etag&quot;`
     */
    updateMask?: string | null;
  }
  /**
   * Request message for `TestIamPermissions` method.
   */
  export interface Schema$GoogleIamV1TestIamPermissionsRequest {
    /**
     * The set of permissions to check for the `resource`. Permissions with wildcards (such as &#39;*&#39; or &#39;storage.*&#39;) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     */
    permissions?: string[] | null;
  }
  /**
   * Response message for `TestIamPermissions` method.
   */
  export interface Schema$GoogleIamV1TestIamPermissionsResponse {
    /**
     * A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
     */
    permissions?: string[] | null;
  }
  /**
   * The response message for Operations.ListOperations.
   */
  export interface Schema$GoogleLongrunningListOperationsResponse {
    /**
     * The standard List next-page token.
     */
    nextPageToken?: string | null;
    /**
     * A list of operations that matches the specified filter in the request.
     */
    operations?: Schema$GoogleLongrunningOperation[];
  }
  /**
   * This resource represents a long-running operation that is the result of a network API call.
   */
  export interface Schema$GoogleLongrunningOperation {
    /**
     * If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
     */
    done?: boolean | null;
    /**
     * The error result of the operation in case of failure or cancellation.
     */
    error?: Schema$GoogleRpcStatus;
    /**
     * Service-specific metadata associated with the operation.  It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any.
     */
    metadata?: {[key: string]: any} | null;
    /**
     * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
     */
    name?: string | null;
    /**
     * The normal response of the operation in case of success.  If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`.  If the original method is standard `Get`/`Create`/`Update`, the response should be the resource.  For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name.  For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
     */
    response?: {[key: string]: any} | null;
  }
  /**
   * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:      service Foo {       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The JSON representation for `Empty` is empty JSON object `{}`.
   */
  export interface Schema$GoogleProtobufEmpty {}
  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details.  You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  export interface Schema$GoogleRpcStatus {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code?: number | null;
    /**
     * A list of messages that carry the error details.  There is a common set of message types for APIs to use.
     */
    details?: Array<{[key: string]: any}> | null;
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message?: string | null;
  }
  /**
   * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.  Example (Comparison):      title: &quot;Summary size limit&quot;     description: &quot;Determines if a summary is less than 100 chars&quot;     expression: &quot;document.summary.size() &lt; 100&quot;  Example (Equality):      title: &quot;Requestor is owner&quot;     description: &quot;Determines if requestor is the document owner&quot;     expression: &quot;document.owner == request.auth.claims.email&quot;  Example (Logic):      title: &quot;Public documents&quot;     description: &quot;Determine whether the document should be publicly visible&quot;     expression: &quot;document.type != &#39;private&#39; &amp;&amp; document.type != &#39;internal&#39;&quot;  Example (Data Manipulation):      title: &quot;Notification string&quot;     description: &quot;Create a notification string with a timestamp.&quot;     expression: &quot;&#39;New message received at &#39; + string(document.create_time)&quot;  The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
   */
  export interface Schema$GoogleTypeExpr {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description?: string | null;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression?: string | null;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location?: string | null;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title?: string | null;
  }

  export class Resource$Hybrid {
    context: APIRequestContext;
    issuers: Resource$Hybrid$Issuers;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.issuers = new Resource$Hybrid$Issuers(this.context);
    }
  }

  export class Resource$Hybrid$Issuers {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.hybrid.issuers.list
     * @desc Lists hybrid services and its trusted issuers service account ids. This api is authenticated and unauthorized(allow all the users) and used by runtime authn-authz service to query control plane's issuer service account ids.
     * @alias apigee.hybrid.issuers.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Must be of the form `hybrid/issuers`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Hybrid$Issuers$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListHybridIssuersResponse>;
    list(
      params: Params$Resource$Hybrid$Issuers$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
      >
    ): void;
    list(
      params: Params$Resource$Hybrid$Issuers$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Hybrid$Issuers$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Hybrid$Issuers$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Hybrid$Issuers$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListHybridIssuersResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListHybridIssuersResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Hybrid$Issuers$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Must be of the form `hybrid/issuers`.
     */
    name?: string;
  }

  export class Resource$Organizations {
    context: APIRequestContext;
    apiproducts: Resource$Organizations$Apiproducts;
    apis: Resource$Organizations$Apis;
    apps: Resource$Organizations$Apps;
    companies: Resource$Organizations$Companies;
    consumerresources: Resource$Organizations$Consumerresources;
    consumers: Resource$Organizations$Consumers;
    deployments: Resource$Organizations$Deployments;
    developers: Resource$Organizations$Developers;
    environments: Resource$Organizations$Environments;
    keyvaluemaps: Resource$Organizations$Keyvaluemaps;
    operations: Resource$Organizations$Operations;
    portals: Resource$Organizations$Portals;
    providers: Resource$Organizations$Providers;
    reports: Resource$Organizations$Reports;
    sharedflows: Resource$Organizations$Sharedflows;
    sites: Resource$Organizations$Sites;
    system: Resource$Organizations$System;
    zones: Resource$Organizations$Zones;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.apiproducts = new Resource$Organizations$Apiproducts(this.context);
      this.apis = new Resource$Organizations$Apis(this.context);
      this.apps = new Resource$Organizations$Apps(this.context);
      this.companies = new Resource$Organizations$Companies(this.context);
      this.consumerresources = new Resource$Organizations$Consumerresources(
        this.context
      );
      this.consumers = new Resource$Organizations$Consumers(this.context);
      this.deployments = new Resource$Organizations$Deployments(this.context);
      this.developers = new Resource$Organizations$Developers(this.context);
      this.environments = new Resource$Organizations$Environments(this.context);
      this.keyvaluemaps = new Resource$Organizations$Keyvaluemaps(this.context);
      this.operations = new Resource$Organizations$Operations(this.context);
      this.portals = new Resource$Organizations$Portals(this.context);
      this.providers = new Resource$Organizations$Providers(this.context);
      this.reports = new Resource$Organizations$Reports(this.context);
      this.sharedflows = new Resource$Organizations$Sharedflows(this.context);
      this.sites = new Resource$Organizations$Sites(this.context);
      this.system = new Resource$Organizations$System(this.context);
      this.zones = new Resource$Organizations$Zones(this.context);
    }

    /**
     * apigee.organizations.create
     * @desc Creates an Apigee organization. See [Create an organization](https://docs.apigee.com/hybrid/latest/precog-provision).
     * @alias apigee.organizations.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.parent Required. Name of the GCP project in which to associate the Apigee organization. Pass the information as a query parameter using the following structure in your request:   `projects/<project>`
     * @param {().GoogleCloudApigeeV1Organization} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningOperation>;
    create(
      params: Params$Resource$Organizations$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    create(
      params: Params$Resource$Organizations$Create,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Create
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback?: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void | GaxiosPromise<Schema$GoogleLongrunningOperation> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/organizations').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: [],
        pathParams: [],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningOperation>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningOperation>(parameters);
      }
    }

    /**
     * apigee.organizations.get
     * @desc Gets the profile for an Apigee organization. See [Organizations](https://docs.apigee.com/hybrid/latest/terminology#organizations).
     * @alias apigee.organizations.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Apigee organization name in the following format:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Organization>;
    get(
      params: Params$Resource$Organizations$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void;
    get(
      params: Params$Resource$Organizations$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Organization> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Organization>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Organization>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.getMetrics
     * @desc Gets metrics for an organization.
     * @alias apigee.organizations.getMetrics
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getMetrics(
      params?: Params$Resource$Organizations$Getmetrics,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Metrics>;
    getMetrics(
      params: Params$Resource$Organizations$Getmetrics,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Metrics>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Metrics>
    ): void;
    getMetrics(
      params: Params$Resource$Organizations$Getmetrics,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Metrics>
    ): void;
    getMetrics(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Metrics>
    ): void;
    getMetrics(
      paramsOrCallback?:
        | Params$Resource$Organizations$Getmetrics
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Metrics>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Metrics>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Metrics>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Metrics> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Getmetrics;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Getmetrics;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/metrics').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Metrics>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Metrics>(parameters);
      }
    }

    /**
     * apigee.organizations.getSites
     * @desc Lists details for all portals.
     * @alias apigee.organizations.getSites
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.domain
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {string=} params.zmsId
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getSites(
      params?: Params$Resource$Organizations$Getsites,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SiteListResponse>;
    getSites(
      params: Params$Resource$Organizations$Getsites,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SiteListResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SiteListResponse>
    ): void;
    getSites(
      params: Params$Resource$Organizations$Getsites,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SiteListResponse>
    ): void;
    getSites(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SiteListResponse>
    ): void;
    getSites(
      paramsOrCallback?:
        | Params$Resource$Organizations$Getsites
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SiteListResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SiteListResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SiteListResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SiteListResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Getsites;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Getsites;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/sites').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SiteListResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SiteListResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.getSyncAuthorization
     * @desc Lists the service accounts with the permissions required to allow the Synchronizer to download environment data from the control plane.  An ETag is returned in the response to `getSyncAuthorization`. Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately.  For more information, see [Enable Synchronizer access](https://docs.apigee.com/hybrid/latest/synchronizer-access#enable-synchronizer-access).  **Note**: Available to Apigee hybrid only.
     * @alias apigee.organizations.getSyncAuthorization
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the Apigee organization. Use the following structure in your request:  `organizations/{org}`
     * @param {().GoogleCloudApigeeV1GetSyncAuthorizationRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getSyncAuthorization(
      params?: Params$Resource$Organizations$Getsyncauthorization,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SyncAuthorization>;
    getSyncAuthorization(
      params: Params$Resource$Organizations$Getsyncauthorization,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SyncAuthorization>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void;
    getSyncAuthorization(
      params: Params$Resource$Organizations$Getsyncauthorization,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void;
    getSyncAuthorization(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void;
    getSyncAuthorization(
      paramsOrCallback?:
        | Params$Resource$Organizations$Getsyncauthorization
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SyncAuthorization>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SyncAuthorization>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SyncAuthorization> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Getsyncauthorization;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Getsyncauthorization;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:getSyncAuthorization').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SyncAuthorization>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SyncAuthorization>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.getSystem
     * @desc Gets the current state of the portal application.
     * @alias apigee.organizations.getSystem
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getSystem(
      params?: Params$Resource$Organizations$Getsystem,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SystemState>;
    getSystem(
      params: Params$Resource$Organizations$Getsystem,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SystemState>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SystemState>
    ): void;
    getSystem(
      params: Params$Resource$Organizations$Getsystem,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SystemState>
    ): void;
    getSystem(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SystemState>
    ): void;
    getSystem(
      paramsOrCallback?:
        | Params$Resource$Organizations$Getsystem
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SystemState>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SystemState>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1SystemState>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SystemState> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Getsystem;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Getsystem;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/system').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SystemState>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SystemState>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.list
     * @desc Lists the Apigee organizations and associated GCP projects that you have permission to access. See [Organizations](https://docs.apigee.com/hybrid/latest/terminology#organizations).
     * @alias apigee.organizations.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Use the following structure in your request:   `organizations`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListOrganizationsResponse>;
    list(
      params: Params$Resource$Organizations$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListOrganizationsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOrganizationsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOrganizationsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOrganizationsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListOrganizationsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListOrganizationsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOrganizationsResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListOrganizationsResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListOrganizationsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListOrganizationsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.setSyncAuthorization
     * @desc Sets the permissions required to allow the Synchronizer to download environment data from the control plane. You must call this API to enable proper functioning of hybrid.  Pass the ETag when calling `setSyncAuthorization` to ensure that you are updating the correct version. To get an ETag, call [getSyncAuthorization](getSyncAuthorization). If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately.  For more information, see [Enable Synchronizer access](https://docs.apigee.com/hybrid/latest/synchronizer-access#enable-synchronizer-access).  **Note**: Available to Apigee hybrid only.
     * @alias apigee.organizations.setSyncAuthorization
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the Apigee organization. Use the following structure in your request:  `organizations/{org}`
     * @param {().GoogleCloudApigeeV1SyncAuthorization} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    setSyncAuthorization(
      params?: Params$Resource$Organizations$Setsyncauthorization,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SyncAuthorization>;
    setSyncAuthorization(
      params: Params$Resource$Organizations$Setsyncauthorization,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SyncAuthorization>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void;
    setSyncAuthorization(
      params: Params$Resource$Organizations$Setsyncauthorization,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void;
    setSyncAuthorization(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void;
    setSyncAuthorization(
      paramsOrCallback?:
        | Params$Resource$Organizations$Setsyncauthorization
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SyncAuthorization>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SyncAuthorization>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SyncAuthorization
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SyncAuthorization> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Setsyncauthorization;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Setsyncauthorization;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:setSyncAuthorization').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SyncAuthorization>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SyncAuthorization>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.update
     * @desc Updates the properties for an Apigee organization. No other fields in the organization profile will be updated.
     * @alias apigee.organizations.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Apigee organization name in the following format:   `organizations/{org}`
     * @param {().GoogleCloudApigeeV1Organization} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Organization>;
    update(
      params: Params$Resource$Organizations$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void;
    update(
      params: Params$Resource$Organizations$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Organization>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Organization> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Organization>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Organization>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the GCP project in which to associate the Apigee organization. Pass the information as a query parameter using the following structure in your request:   `projects/<project>`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Organization;
  }
  export interface Params$Resource$Organizations$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Apigee organization name in the following format:   `organizations/{org}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Getmetrics
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Getsites
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     *
     */
    domain?: string;
    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
    /**
     *
     */
    zmsId?: string;
  }
  export interface Params$Resource$Organizations$Getsyncauthorization
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:  `organizations/{org}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1GetSyncAuthorizationRequest;
  }
  export interface Params$Resource$Organizations$Getsystem
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Use the following structure in your request:   `organizations`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Setsyncauthorization
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:  `organizations/{org}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1SyncAuthorization;
  }
  export interface Params$Resource$Organizations$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Apigee organization name in the following format:   `organizations/{org}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Organization;
  }

  export class Resource$Organizations$Apiproducts {
    context: APIRequestContext;
    attributes: Resource$Organizations$Apiproducts$Attributes;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.attributes = new Resource$Organizations$Apiproducts$Attributes(
        this.context
      );
    }

    /**
     * apigee.organizations.apiproducts.attributes
     * @desc Updates or creates API product attributes. This API **replaces** the current list of attributes with the attributes specified in the request body. In this way, you can update existing attributes, add new attributes, or delete existing attributes by omitting them from the request body.  OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
     * @alias apigee.organizations.apiproducts.attributes
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     * @param {().GoogleCloudApigeeV1Attributes} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    attributes(
      params?: Params$Resource$Organizations$Apiproducts$Attributes,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes>;
    attributes(
      params: Params$Resource$Organizations$Apiproducts$Attributes,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      params: Params$Resource$Organizations$Apiproducts$Attributes,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Attributes
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Attributes;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Attributes;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/attributes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apiproducts.create
     * @desc Creates an API product in an organization. You create API products after you have proxied backend services using API proxies. An API product is a collection of API resources combined with quota settings and metadata that you can use to deliver customized and productized API bundles to your developer community. This metadata can include:  - Scope - Environments - API proxies - Extensible profile  API products enable you repackage APIs on-the-fly, without having to do any additional coding or configuration. Apigee recommends that you start with a simple API product including only required elements. You then provision credentials to apps to enable them to start testing your APIs.  After you have authentication and authorization working against a simple API product, you can iterate to create finer grained API products, defining different sets of API resources for each API product.  <aside class="warning"><strong>WARNING:</strong>  - If you don't specify an API proxy in the request body, <em>any</em> app associated with the product can make calls to <em>any</em> API in your entire organization. - If you don't specify an environment in the request body, the product allows access to all environments.  </aside>  For more information, see {{what_api_product}}
     * @alias apigee.organizations.apiproducts.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The parent organization name under which the API product will be created. Must be in the following form: <pre>organizations/<var>organization_ID</var></pre>
     * @param {().GoogleCloudApigeeV1ApiProduct} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Apiproducts$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct>;
    create(
      params: Params$Resource$Organizations$Apiproducts$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    create(
      params: Params$Resource$Organizations$Apiproducts$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apiproducts').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apiproducts.delete
     * @desc Deletes an API product from an organization.  Deleting an API product causes app requests to the resource URIs defined in the API product to fail.  Ensure that you create a new API product to serve existing apps, unless your intention is to disable access to the resources defined in the API product.  The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
     * @alias apigee.organizations.apiproducts.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Apiproducts$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct>;
    delete(
      params: Params$Resource$Organizations$Apiproducts$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    delete(
      params: Params$Resource$Organizations$Apiproducts$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apiproducts.get
     * @desc Gets configuration details for an API product.  The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
     * @alias apigee.organizations.apiproducts.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Apiproducts$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct>;
    get(
      params: Params$Resource$Organizations$Apiproducts$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    get(
      params: Params$Resource$Organizations$Apiproducts$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apiproducts.list
     * @desc Lists all API product names for an organization. Filter the list by passing an `attributename` and `attibutevalue`.  The limit on the number of API products returned by the API is 1000. You can paginate the list of API products returned using the `startKey` and `count` query parameters.
     * @alias apigee.organizations.apiproducts.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.attributename The name of the attribute to search.
     * @param {string=} params.attributevalue The value of the attribute.
     * @param {string=} params.count Enter the number of API products you want returned in the API call. The limit is 1000.
     * @param {boolean=} params.expand Set to `true` to get expanded details about each API.
     * @param {string} params.parent **Required.** The parent organization name in the following form: <pre>organizations/<var>organization_ID</var></pre>
     * @param {string=} params.startKey Gets a list of API products starting with a specific API product in the list. For example, if you're returning 50 API products at a time (using the `count` query parameter), you can view products 50-99 by entering the name of the 50th API product in the first API (without using `startKey`). Product name is case sensitive.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Apiproducts$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListApiProductsResponse>;
    list(
      params: Params$Resource$Organizations$Apiproducts$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListApiProductsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProductsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Apiproducts$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProductsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProductsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListApiProductsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListApiProductsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProductsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListApiProductsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apiproducts').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListApiProductsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListApiProductsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.apiproducts.update
     * @desc Updates an existing API product. You must include all required values, whether or not you are updating them, as well as any optional values that you are updating.  The API product name required in the request URL is the internal name of the product, not the Display Name. While they may be the same, it depends on whether the API product was created via UI or API. View the list of API products to identify their internal names.
     * @alias apigee.organizations.apiproducts.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     * @param {().GoogleCloudApigeeV1ApiProduct} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Apiproducts$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct>;
    update(
      params: Params$Resource$Organizations$Apiproducts$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    update(
      params: Params$Resource$Organizations$Apiproducts$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProduct>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProduct> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProduct>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Apiproducts$Attributes
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Attributes;
  }
  export interface Params$Resource$Organizations$Apiproducts$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The parent organization name under which the API product will be created. Must be in the following form: <pre>organizations/<var>organization_ID</var></pre>
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1ApiProduct;
  }
  export interface Params$Resource$Organizations$Apiproducts$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apiproducts$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apiproducts$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * The name of the attribute to search.
     */
    attributename?: string;
    /**
     * The value of the attribute.
     */
    attributevalue?: string;
    /**
     * Enter the number of API products you want returned in the API call. The limit is 1000.
     */
    count?: string;
    /**
     * Set to `true` to get expanded details about each API.
     */
    expand?: boolean;
    /**
     * **Required.** The parent organization name in the following form: <pre>organizations/<var>organization_ID</var></pre>
     */
    parent?: string;
    /**
     * Gets a list of API products starting with a specific API product in the list. For example, if you're returning 50 API products at a time (using the `count` query parameter), you can view products 50-99 by entering the name of the 50th API product in the first API (without using `startKey`). Product name is case sensitive.
     */
    startKey?: string;
  }
  export interface Params$Resource$Organizations$Apiproducts$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1ApiProduct;
  }

  export class Resource$Organizations$Apiproducts$Attributes {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.apiproducts.attributes.delete
     * @desc Deletes an API product attribute.
     * @alias apigee.organizations.apiproducts.attributes.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Apiproducts$Attributes$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    delete(
      params: Params$Resource$Organizations$Apiproducts$Attributes$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      params: Params$Resource$Organizations$Apiproducts$Attributes$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Attributes$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Attributes$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Attributes$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apiproducts.attributes.get
     * @desc Returns the value of an API product attribute.
     * @alias apigee.organizations.apiproducts.attributes.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Apiproducts$Attributes$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    get(
      params: Params$Resource$Organizations$Apiproducts$Attributes$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      params: Params$Resource$Organizations$Apiproducts$Attributes$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Attributes$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Attributes$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Attributes$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apiproducts.attributes.list
     * @desc Returns a list of all API product attributes.
     * @alias apigee.organizations.apiproducts.attributes.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The parent organization name. Must be in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Apiproducts$Attributes$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes>;
    list(
      params: Params$Resource$Organizations$Apiproducts$Attributes$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      params: Params$Resource$Organizations$Apiproducts$Attributes$List,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Attributes$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Attributes$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Attributes$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/attributes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apiproducts.attributes.updateApiProductAttribute
     * @desc Updates the value of an API product attribute. Limitations are:  OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
     * @alias apigee.organizations.apiproducts.attributes.updateApiProductAttribute
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     * @param {().GoogleCloudApigeeV1Attribute} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateApiProductAttribute(
      params?: Params$Resource$Organizations$Apiproducts$Attributes$Updateapiproductattribute,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    updateApiProductAttribute(
      params: Params$Resource$Organizations$Apiproducts$Attributes$Updateapiproductattribute,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateApiProductAttribute(
      params: Params$Resource$Organizations$Apiproducts$Attributes$Updateapiproductattribute,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateApiProductAttribute(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateApiProductAttribute(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apiproducts$Attributes$Updateapiproductattribute
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apiproducts$Attributes$Updateapiproductattribute;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apiproducts$Attributes$Updateapiproductattribute;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Apiproducts$Attributes$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apiproducts$Attributes$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apiproducts$Attributes$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The parent organization name. Must be in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Apiproducts$Attributes$Updateapiproductattribute
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * **Required.** API product name in the following form: <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Attribute;
  }

  export class Resource$Organizations$Apis {
    context: APIRequestContext;
    deployments: Resource$Organizations$Apis$Deployments;
    keyvaluemaps: Resource$Organizations$Apis$Keyvaluemaps;
    revisions: Resource$Organizations$Apis$Revisions;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.deployments = new Resource$Organizations$Apis$Deployments(
        this.context
      );
      this.keyvaluemaps = new Resource$Organizations$Apis$Keyvaluemaps(
        this.context
      );
      this.revisions = new Resource$Organizations$Apis$Revisions(this.context);
    }

    /**
     * apigee.organizations.apis.create
     * @desc Creates an API proxy. The API proxy created will not be accessible at runtime until it is deployed to an environment.  Create a new API proxy by setting the `name` query parameter to the name of the API proxy.  Import an API proxy configuration bundle stored in zip format on your local machine to your organization by doing the following:  * Set the `name` query parameter to the name of the API proxy. * Set the `action` query parameter to `import`. * Set the `Content-Type` header to `multipart/form-data`. * Pass as a file the name of API proxy   configuration bundle stored in zip format on your local machine using   the `file` form field.  **Note**: To validate the API proxy configuration bundle only   without importing it, set the `action` query   parameter to `validate`.  When importing an API proxy configuration bundle, if the API proxy does not exist, it will be created. If the API proxy exists, then a new revision is created. Invalid API proxy configurations are rejected, and a list of validation errors is returned to the client.
     * @alias apigee.organizations.apis.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Action to perform when importing an API proxy configuration bundle. Set this parameter to one of the following values:  * `import` to import the API proxy configuration bundle. * `validate` to validate the API proxy configuration bundle without    importing it.
     * @param {string=} params.name Name of the API proxy. Restrict the characters used to: A-Za-z0-9._-
     * @param {string} params.parent Required. Name of the organization in the following format:   `organizations/{org}`
     * @param {boolean=} params.validate Ignored. All uploads are validated regardless of the value of this field. Maintained for compatibility with Apigee Edge API.
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Apis$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxyRevision>;
    create(
      params: Params$Resource$Organizations$Apis$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    create(
      params: Params$Resource$Organizations$Apis$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiProxyRevision
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxyRevision> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apis').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxyRevision>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxyRevision>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apis.delete
     * @desc Deletes an API proxy and all associated endpoints, policies, resources, and revisions. The API proxy must be undeployed before you can delete it.
     * @alias apigee.organizations.apis.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the API proxy in the following format:   `organizations/{org}/apis/{api}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Apis$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxy>;
    delete(
      params: Params$Resource$Organizations$Apis$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void;
    delete(
      params: Params$Resource$Organizations$Apis$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxy> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxy>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxy>(parameters);
      }
    }

    /**
     * apigee.organizations.apis.get
     * @desc Gets an API proxy including a list of existing revisions.
     * @alias apigee.organizations.apis.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the API proxy in the following format:   `organizations/{org}/apis/{api}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Apis$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxy>;
    get(
      params: Params$Resource$Organizations$Apis$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void;
    get(
      params: Params$Resource$Organizations$Apis$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxy>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxy> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxy>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxy>(parameters);
      }
    }

    /**
     * apigee.organizations.apis.list
     * @desc Lists the names of all API proxies in an organization. The names returned correspond to the names defined in the configuration files for each API proxy.
     * @alias apigee.organizations.apis.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.includeMetaData Flag that specifies whether to include API proxy metadata in the response.
     * @param {boolean=} params.includeRevisions Flag that specifies whether to include a list of revisions in the response.
     * @param {string} params.parent Required. Name of the organization in the following format:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Apis$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListApiProxiesResponse>;
    list(
      params: Params$Resource$Organizations$Apis$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListApiProxiesResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProxiesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Apis$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProxiesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProxiesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListApiProxiesResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListApiProxiesResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiProxiesResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListApiProxiesResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apis').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListApiProxiesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListApiProxiesResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Apis$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Action to perform when importing an API proxy configuration bundle. Set this parameter to one of the following values:  * `import` to import the API proxy configuration bundle. * `validate` to validate the API proxy configuration bundle without    importing it.
     */
    action?: string;
    /**
     * Name of the API proxy. Restrict the characters used to: A-Za-z0-9._-
     */
    name?: string;
    /**
     * Required. Name of the organization in the following format:   `organizations/{org}`
     */
    parent?: string;
    /**
     * Ignored. All uploads are validated regardless of the value of this field. Maintained for compatibility with Apigee Edge API.
     */
    validate?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }
  export interface Params$Resource$Organizations$Apis$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API proxy in the following format:   `organizations/{org}/apis/{api}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apis$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API proxy in the following format:   `organizations/{org}/apis/{api}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apis$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Flag that specifies whether to include API proxy metadata in the response.
     */
    includeMetaData?: boolean;
    /**
     * Flag that specifies whether to include a list of revisions in the response.
     */
    includeRevisions?: boolean;
    /**
     * Required. Name of the organization in the following format:   `organizations/{org}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Apis$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.apis.deployments.list
     * @desc Lists all deployments of an API proxy.
     * @alias apigee.organizations.apis.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the API proxy for which to return deployment information in the following format:  `organizations/{org}/apis/{api}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Apis$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Apis$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Apis$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Apis$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API proxy for which to return deployment information in the following format:  `organizations/{org}/apis/{api}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Apis$Keyvaluemaps {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.apis.keyvaluemaps.create
     * @desc Creates a key value map in an api proxy.
     * @alias apigee.organizations.apis.keyvaluemaps.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The name of the environment in which to create the key value map. Must be of the form `organizations/{organization}/apis/{api}`.
     * @param {().GoogleCloudApigeeV1KeyValueMap} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Apis$Keyvaluemaps$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap>;
    create(
      params: Params$Resource$Organizations$Apis$Keyvaluemaps$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      params: Params$Resource$Organizations$Apis$Keyvaluemaps$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Keyvaluemaps$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Keyvaluemaps$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Keyvaluemaps$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keyvaluemaps').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apis.keyvaluemaps.delete
     * @desc Delete a key value map in an api proxy.
     * @alias apigee.organizations.apis.keyvaluemaps.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the key value map. Must be of the form `organizations/{organization}/apis/{api}/keyvaluemaps/{keyvaluemap}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Apis$Keyvaluemaps$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap>;
    delete(
      params: Params$Resource$Organizations$Apis$Keyvaluemaps$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      params: Params$Resource$Organizations$Apis$Keyvaluemaps$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Keyvaluemaps$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Keyvaluemaps$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Keyvaluemaps$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Apis$Keyvaluemaps$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the environment in which to create the key value map. Must be of the form `organizations/{organization}/apis/{api}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1KeyValueMap;
  }
  export interface Params$Resource$Organizations$Apis$Keyvaluemaps$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the key value map. Must be of the form `organizations/{organization}/apis/{api}/keyvaluemaps/{keyvaluemap}`.
     */
    name?: string;
  }

  export class Resource$Organizations$Apis$Revisions {
    context: APIRequestContext;
    deployments: Resource$Organizations$Apis$Revisions$Deployments;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.deployments = new Resource$Organizations$Apis$Revisions$Deployments(
        this.context
      );
    }

    /**
     * apigee.organizations.apis.revisions.delete
     * @desc Deletes an API proxy revision and all policies, resources, endpoints, and revisions associated with it. The API proxy revision must be undeployed before you can delete it.
     * @alias apigee.organizations.apis.revisions.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. API proxy revision in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Apis$Revisions$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxyRevision>;
    delete(
      params: Params$Resource$Organizations$Apis$Revisions$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    delete(
      params: Params$Resource$Organizations$Apis$Revisions$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Revisions$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiProxyRevision
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxyRevision> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Revisions$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Revisions$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxyRevision>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxyRevision>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.apis.revisions.get
     * @desc Gets an API proxy revision.  To download the API proxy configuration bundle for the specified revision as a zip file, do the following:   * Set the `format` query parameter to `bundle`.  * Set the `Accept` header to `application/zip`.  If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the API proxy configuration locally and upload the updated API proxy configuration revision, as described in [updateApiProxyRevision](updateApiProxyRevision).
     * @alias apigee.organizations.apis.revisions.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.format Format used when downloading the API proxy configuration revision. Set to `bundle` to download the API proxy configuration revision as a zip file.
     * @param {string} params.name Required. API proxy revision in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Apis$Revisions$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleApiHttpBody>;
    get(
      params: Params$Resource$Organizations$Apis$Revisions$Get,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    get(
      params: Params$Resource$Organizations$Apis$Revisions$Get,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleApiHttpBody>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Revisions$Get
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback?: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void | GaxiosPromise<Schema$GoogleApiHttpBody> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Revisions$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Revisions$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleApiHttpBody>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleApiHttpBody>(parameters);
      }
    }

    /**
     * apigee.organizations.apis.revisions.updateApiProxyRevision
     * @desc Updates an existing API proxy revision by uploading the API proxy configuration bundle as a zip file from your local machine.  You can update only API proxy revisions that have never been deployed. After deployment, an API proxy revision becomes immutable, even if it is undeployed.  Set the `Content-Type` header to either `multipart/form-data` or `application/octet-stream`.
     * @alias apigee.organizations.apis.revisions.updateApiProxyRevision
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. API proxy revision to update in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`
     * @param {boolean=} params.validate Ignored. All uploads are validated regardless of the value of this field. Maintained for compatibility with Apigee Edge API.
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateApiProxyRevision(
      params?: Params$Resource$Organizations$Apis$Revisions$Updateapiproxyrevision,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxyRevision>;
    updateApiProxyRevision(
      params: Params$Resource$Organizations$Apis$Revisions$Updateapiproxyrevision,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    updateApiProxyRevision(
      params: Params$Resource$Organizations$Apis$Revisions$Updateapiproxyrevision,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    updateApiProxyRevision(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>
    ): void;
    updateApiProxyRevision(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Revisions$Updateapiproxyrevision
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiProxyRevision>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiProxyRevision
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiProxyRevision> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Revisions$Updateapiproxyrevision;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Revisions$Updateapiproxyrevision;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxyRevision>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiProxyRevision>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Apis$Revisions$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. API proxy revision in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apis$Revisions$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Format used when downloading the API proxy configuration revision. Set to `bundle` to download the API proxy configuration revision as a zip file.
     */
    format?: string;
    /**
     * Required. API proxy revision in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apis$Revisions$Updateapiproxyrevision
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. API proxy revision to update in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`
     */
    name?: string;
    /**
     * Ignored. All uploads are validated regardless of the value of this field. Maintained for compatibility with Apigee Edge API.
     */
    validate?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }

  export class Resource$Organizations$Apis$Revisions$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.apis.revisions.deployments.list
     * @desc Lists all deployments of an API proxy revision.
     * @alias apigee.organizations.apis.revisions.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the API proxy revision for which to return deployment information in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Apis$Revisions$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Apis$Revisions$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Apis$Revisions$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apis$Revisions$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apis$Revisions$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apis$Revisions$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Apis$Revisions$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API proxy revision for which to return deployment information in the following format:   `organizations/{org}/apis/{api}/revisions/{rev}`.
     */
    parent?: string;
  }

  export class Resource$Organizations$Apps {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.apps.get
     * @desc Gets the app profile for the specified app ID.
     * @alias apigee.organizations.apps.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. App ID in the following format:  `organizations/{org}/apps/{app}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Apps$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1App>;
    get(
      params: Params$Resource$Organizations$Apps$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1App>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1App>
    ): void;
    get(
      params: Params$Resource$Organizations$Apps$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1App>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1App>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apps$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1App>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1App>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1App>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1App> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apps$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apps$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1App>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1App>(parameters);
      }
    }

    /**
     * apigee.organizations.apps.list
     * @desc Lists IDs of apps within an organization that have the specified app status (approved or revoked) or are of the specified app type (developer or company).
     * @alias apigee.organizations.apps.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.apiProduct API product.
     * @param {string=} params.apptype Optional. Filter by the type of the app. Valid values are `company` or `developer`. Defaults to `developer`.
     * @param {boolean=} params.expand Optional. Flag that specifies whether to return an expanded list of apps for the organization. Defaults to `false`.
     * @param {string=} params.ids Optional. Comma-separated list of app IDs on which to filter.
     * @param {boolean=} params.includeCred Optional. Flag that specifies whether to include credentials in the response.
     * @param {string=} params.keyStatus Optional. Key status of the app. Valid values include `approved` or `revoked`. Defaults to `approved`.
     * @param {string} params.parent Required. Resource path of the parent in the following format:  `organizations/{org}`
     * @param {string=} params.rows Optional. Maximum number of app IDs to return. Defaults to 10000.
     * @param {string=} params.startKey Returns the list of apps starting from the specified app ID.
     * @param {string=} params.status Optional. Filter by the status of the app. Valid values are `approved` or `revoked`. Defaults to `approved`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Apps$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListAppsResponse>;
    list(
      params: Params$Resource$Organizations$Apps$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListAppsResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ListAppsResponse>
    ): void;
    list(
      params: Params$Resource$Organizations$Apps$List,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ListAppsResponse>
    ): void;
    list(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ListAppsResponse>
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Apps$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListAppsResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListAppsResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListAppsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListAppsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Apps$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Apps$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apps').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListAppsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ListAppsResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Apps$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. App ID in the following format:  `organizations/{org}/apps/{app}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Apps$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * API product.
     */
    apiProduct?: string;
    /**
     * Optional. Filter by the type of the app. Valid values are `company` or `developer`. Defaults to `developer`.
     */
    apptype?: string;
    /**
     * Optional. Flag that specifies whether to return an expanded list of apps for the organization. Defaults to `false`.
     */
    expand?: boolean;
    /**
     * Optional. Comma-separated list of app IDs on which to filter.
     */
    ids?: string;
    /**
     * Optional. Flag that specifies whether to include credentials in the response.
     */
    includeCred?: boolean;
    /**
     * Optional. Key status of the app. Valid values include `approved` or `revoked`. Defaults to `approved`.
     */
    keyStatus?: string;
    /**
     * Required. Resource path of the parent in the following format:  `organizations/{org}`
     */
    parent?: string;
    /**
     * Optional. Maximum number of app IDs to return. Defaults to 10000.
     */
    rows?: string;
    /**
     * Returns the list of apps starting from the specified app ID.
     */
    startKey?: string;
    /**
     * Optional. Filter by the status of the app. Valid values are `approved` or `revoked`. Defaults to `approved`.
     */
    status?: string;
  }

  export class Resource$Organizations$Companies {
    context: APIRequestContext;
    apps: Resource$Organizations$Companies$Apps;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.apps = new Resource$Organizations$Companies$Apps(this.context);
    }

    /**
     * apigee.organizations.companies.create
     * @desc Creates an app for a company. Note that you must first create a profile for the company in your organization before you can register apps that are associated with the company.
     * @alias apigee.organizations.companies.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Name of org that the company will be created in `{parent=organizations/x}`
     * @param {().GoogleCloudApigeeV1Company} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Companies$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Company>;
    create(
      params: Params$Resource$Organizations$Companies$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    create(
      params: Params$Resource$Organizations$Companies$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Company> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/companies').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Company>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Company>(parameters);
      }
    }

    /**
     * apigee.organizations.companies.delete
     * @desc Deletes an existing company.
     * @alias apigee.organizations.companies.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name The company resource name `organizations/{org}/companies/{company}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Companies$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Company>;
    delete(
      params: Params$Resource$Organizations$Companies$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    delete(
      params: Params$Resource$Organizations$Companies$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Company> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Company>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Company>(parameters);
      }
    }

    /**
     * apigee.organizations.companies.get
     * @desc List details for a company.
     * @alias apigee.organizations.companies.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name The company resource name `organizations/{org}/companies/{company}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Companies$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Company>;
    get(
      params: Params$Resource$Organizations$Companies$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    get(
      params: Params$Resource$Organizations$Companies$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Company> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Company>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Company>(parameters);
      }
    }

    /**
     * apigee.organizations.companies.list
     * @desc List all companies in an organization, and optionally returns an expanded list of companies, displaying a full profile for each company in the organization.
     * @alias apigee.organizations.companies.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.count Limits the list to the number you specify. The limit is 100.
     * @param {boolean=} params.expand Set expand to true to return a full profile for each company.
     * @param {boolean=} params.includeDevelopers Optional. include developers in the response.
     * @param {string} params.parent The parent organization name `organizations/{org}`
     * @param {string=} params.startKey To filter the keys that are returned, enter the email of a developer that the list will start with.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Companies$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListCompaniesResponse>;
    list(
      params: Params$Resource$Organizations$Companies$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListCompaniesResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompaniesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Companies$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompaniesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompaniesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListCompaniesResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListCompaniesResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompaniesResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListCompaniesResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/companies').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListCompaniesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListCompaniesResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.companies.update
     * @desc Updates an existing company. Send the complete company record as a payload with any changes you want to make. Note that to change the status of the Company you use Set the Status of a Company. The attributes in the sample payload below apply to company configuration in monetization. For non-monetized companies, you need send only displayName.
     * @alias apigee.organizations.companies.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Specify the status as active or inactive.
     * @param {string} params.name Name of the company to be updated. `{name=organizations/x/companies/x}`
     * @param {().GoogleCloudApigeeV1Company} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Companies$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Company>;
    update(
      params: Params$Resource$Organizations$Companies$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    update(
      params: Params$Resource$Organizations$Companies$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Company>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Company> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Company>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Company>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Companies$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Name of org that the company will be created in `{parent=organizations/x}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Company;
  }
  export interface Params$Resource$Organizations$Companies$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * The company resource name `organizations/{org}/companies/{company}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Companies$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * The company resource name `organizations/{org}/companies/{company}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Companies$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Limits the list to the number you specify. The limit is 100.
     */
    count?: string;
    /**
     * Set expand to true to return a full profile for each company.
     */
    expand?: boolean;
    /**
     * Optional. include developers in the response.
     */
    includeDevelopers?: boolean;
    /**
     * The parent organization name `organizations/{org}`
     */
    parent?: string;
    /**
     * To filter the keys that are returned, enter the email of a developer that the list will start with.
     */
    startKey?: string;
  }
  export interface Params$Resource$Organizations$Companies$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Specify the status as active or inactive.
     */
    action?: string;
    /**
     * Name of the company to be updated. `{name=organizations/x/companies/x}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Company;
  }

  export class Resource$Organizations$Companies$Apps {
    context: APIRequestContext;
    keys: Resource$Organizations$Companies$Apps$Keys;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.keys = new Resource$Organizations$Companies$Apps$Keys(this.context);
    }

    /**
     * apigee.organizations.companies.apps.create
     * @desc Creates an app for a company.
     * @alias apigee.organizations.companies.apps.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Resource path of the parent: `organizations/{org}/companies/{company_name}`
     * @param {().GoogleCloudApigeeV1CompanyApp} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Companies$Apps$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp>;
    create(
      params: Params$Resource$Organizations$Companies$Apps$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    create(
      params: Params$Resource$Organizations$Companies$Apps$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apps').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.companies.apps.delete
     * @desc Deletes a company app.
     * @alias apigee.organizations.companies.apps.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name name of the app resource: `organizations/{org}/companies/{company_name}/apps/{app_name}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Companies$Apps$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp>;
    delete(
      params: Params$Resource$Organizations$Companies$Apps$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    delete(
      params: Params$Resource$Organizations$Companies$Apps$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.companies.apps.get
     * @desc Gets the profile of a specific company app.
     * @alias apigee.organizations.companies.apps.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name name of the app resource: `organizations/{org}/companies/{company_name}/apps/{app_name}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Companies$Apps$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp>;
    get(
      params: Params$Resource$Organizations$Companies$Apps$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    get(
      params: Params$Resource$Organizations$Companies$Apps$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.companies.apps.list
     * @desc List company apps in an organization. You can optionally expand the response to include the profile for each app.
     * @alias apigee.organizations.companies.apps.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.count Limits the list to the number you specify. The limit is 100.
     * @param {boolean=} params.expand Set expand to true to return a full profile
     * @param {string} params.parent The name of a company resource: `organizations/{org}/companies/{company_name}`
     * @param {string=} params.startKey Lets you return a list of app starting with a specific app name in the list.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Companies$Apps$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListCompanyAppsResponse>;
    list(
      params: Params$Resource$Organizations$Companies$Apps$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Companies$Apps$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListCompanyAppsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apps').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListCompanyAppsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListCompanyAppsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.companies.apps.update
     * @desc Updates an existing company app.
     * @alias apigee.organizations.companies.apps.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Resource path of the app: `organizations/{org}/companies/{company_name}/apps/{app_name}`
     * @param {().GoogleCloudApigeeV1CompanyApp} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Companies$Apps$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp>;
    update(
      params: Params$Resource$Organizations$Companies$Apps$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    update(
      params: Params$Resource$Organizations$Companies$Apps$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CompanyApp>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Companies$Apps$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Resource path of the parent: `organizations/{org}/companies/{company_name}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1CompanyApp;
  }
  export interface Params$Resource$Organizations$Companies$Apps$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * name of the app resource: `organizations/{org}/companies/{company_name}/apps/{app_name}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Companies$Apps$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * name of the app resource: `organizations/{org}/companies/{company_name}/apps/{app_name}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Companies$Apps$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Limits the list to the number you specify. The limit is 100.
     */
    count?: string;
    /**
     * Set expand to true to return a full profile
     */
    expand?: boolean;
    /**
     * The name of a company resource: `organizations/{org}/companies/{company_name}`
     */
    parent?: string;
    /**
     * Lets you return a list of app starting with a specific app name in the list.
     */
    startKey?: string;
  }
  export interface Params$Resource$Organizations$Companies$Apps$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Resource path of the app: `organizations/{org}/companies/{company_name}/apps/{app_name}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1CompanyApp;
  }

  export class Resource$Organizations$Companies$Apps$Keys {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.companies.apps.keys.delete
     * @desc Deletes a key for a company app and removes all API products associated with the app. The key can no longer be used to access any APIs.
     * @alias apigee.organizations.companies.apps.keys.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Resource name of a company app key `organizations/{org}/companies/{company}/apps/{app}/keys/{key}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Companies$Apps$Keys$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyAppKey>;
    delete(
      params: Params$Resource$Organizations$Companies$Apps$Keys$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    delete(
      params: Params$Resource$Organizations$Companies$Apps$Keys$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$Keys$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$Keys$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$Keys$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CompanyAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CompanyAppKey>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.companies.apps.keys.get
     * @desc Gets information about the consumer key issued to a specific company app.
     * @alias apigee.organizations.companies.apps.keys.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Resource name of a company app key `organizations/{org}/companies/{company}/apps/{app}/keys/{key}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Companies$Apps$Keys$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyAppKey>;
    get(
      params: Params$Resource$Organizations$Companies$Apps$Keys$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    get(
      params: Params$Resource$Organizations$Companies$Apps$Keys$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$Keys$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$Keys$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$Keys$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CompanyAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CompanyAppKey>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.companies.apps.keys.updateCompanyAppKey
     * @desc Updates an existing company app key to add additional API products or attributes. Note that only a single API product can be resolved per app key at runtime. API products are resolved by name, in alphabetical order. The first API product found in the list will be returned.
     * @alias apigee.organizations.companies.apps.keys.updateCompanyAppKey
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Set action to approve or revoke.
     * @param {string} params.name Resource name of a company app key `organizations/{org}/companies/{company}/apps/{app}/keys/{key}`
     * @param {().GoogleCloudApigeeV1CompanyAppKey} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateCompanyAppKey(
      params?: Params$Resource$Organizations$Companies$Apps$Keys$Updatecompanyappkey,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyAppKey>;
    updateCompanyAppKey(
      params: Params$Resource$Organizations$Companies$Apps$Keys$Updatecompanyappkey,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    updateCompanyAppKey(
      params: Params$Resource$Organizations$Companies$Apps$Keys$Updatecompanyappkey,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    updateCompanyAppKey(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void;
    updateCompanyAppKey(
      paramsOrCallback?:
        | Params$Resource$Organizations$Companies$Apps$Keys$Updatecompanyappkey
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CompanyAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CompanyAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Companies$Apps$Keys$Updatecompanyappkey;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Companies$Apps$Keys$Updatecompanyappkey;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CompanyAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CompanyAppKey>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Companies$Apps$Keys$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Resource name of a company app key `organizations/{org}/companies/{company}/apps/{app}/keys/{key}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Companies$Apps$Keys$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Resource name of a company app key `organizations/{org}/companies/{company}/apps/{app}/keys/{key}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Companies$Apps$Keys$Updatecompanyappkey
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Set action to approve or revoke.
     */
    action?: string;
    /**
     * Resource name of a company app key `organizations/{org}/companies/{company}/apps/{app}/keys/{key}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1CompanyAppKey;
  }

  export class Resource$Organizations$Consumerresources {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.consumerresources.apis
     * @desc List all API docs in a ZMS zone that match the given query. Not a recognized rest pattern
     * @alias apigee.organizations.consumerresources.apis
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Must be of the form `organizations/{organization_id}`
     * @param {string=} params.q
     * @param {string=} params.zmsId
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    apis(
      params?: Params$Resource$Organizations$Consumerresources$Apis,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1PortalResourceCollection>;
    apis(
      params: Params$Resource$Organizations$Consumerresources$Apis,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceCollection
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void;
    apis(
      params: Params$Resource$Organizations$Consumerresources$Apis,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void;
    apis(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void;
    apis(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumerresources$Apis
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceCollection
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceCollection
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1PortalResourceCollection
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumerresources$Apis;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumerresources$Apis;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/consumerresources/apis').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1PortalResourceCollection>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1PortalResourceCollection
        >(parameters);
      }
    }

    /**
     * apigee.organizations.consumerresources.getResourcetypes
     * @desc Get all consumer resource types managed by this API.
     * @alias apigee.organizations.consumerresources.getResourcetypes
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Must be of the form `organizations/{organization_id}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getResourcetypes(
      params?: Params$Resource$Organizations$Consumerresources$Getresourcetypes,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1PortalResourceTypeCollection>;
    getResourcetypes(
      params: Params$Resource$Organizations$Consumerresources$Getresourcetypes,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
      >
    ): void;
    getResourcetypes(
      params: Params$Resource$Organizations$Consumerresources$Getresourcetypes,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
      >
    ): void;
    getResourcetypes(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
      >
    ): void;
    getResourcetypes(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumerresources$Getresourcetypes
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumerresources$Getresourcetypes;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumerresources$Getresourcetypes;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/v1/{+parent}/consumerresources/resourcetypes'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1PortalResourceTypeCollection
        >(parameters);
      }
    }

    /**
     * apigee.organizations.consumerresources.pages
     * @desc List all pages in a ZMS zone that match the query string. Not a recognized rest pattern
     * @alias apigee.organizations.consumerresources.pages
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Must be of the form `organizations/{organization_id}`
     * @param {string=} params.q
     * @param {string=} params.zmsId
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    pages(
      params?: Params$Resource$Organizations$Consumerresources$Pages,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1PortalResourceCollection>;
    pages(
      params: Params$Resource$Organizations$Consumerresources$Pages,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceCollection
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void;
    pages(
      params: Params$Resource$Organizations$Consumerresources$Pages,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void;
    pages(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void;
    pages(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumerresources$Pages
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceCollection
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PortalResourceCollection
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalResourceCollection
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1PortalResourceCollection
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumerresources$Pages;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumerresources$Pages;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/consumerresources/pages').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1PortalResourceCollection>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1PortalResourceCollection
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Consumerresources$Apis
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Must be of the form `organizations/{organization_id}`
     */
    parent?: string;
    /**
     *
     */
    q?: string;
    /**
     *
     */
    zmsId?: string;
  }
  export interface Params$Resource$Organizations$Consumerresources$Getresourcetypes
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Must be of the form `organizations/{organization_id}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Consumerresources$Pages
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Must be of the form `organizations/{organization_id}`
     */
    parent?: string;
    /**
     *
     */
    q?: string;
    /**
     *
     */
    zmsId?: string;
  }

  export class Resource$Organizations$Consumers {
    context: APIRequestContext;
    apps: Resource$Organizations$Consumers$Apps;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.apps = new Resource$Organizations$Consumers$Apps(this.context);
    }

    /**
     * apigee.organizations.consumers.access
     * @desc Checks whether a developer has access to a resource.
     * @alias apigee.organizations.consumers.access
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your  request:   `organizations/{org}`
     * @param {().GoogleCloudApigeeV1CheckAccessBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    access(
      params?: Params$Resource$Organizations$Consumers$Access,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CheckAccessResponse>;
    access(
      params: Params$Resource$Organizations$Consumers$Access,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CheckAccessResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CheckAccessResponse
      >
    ): void;
    access(
      params: Params$Resource$Organizations$Consumers$Access,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CheckAccessResponse
      >
    ): void;
    access(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CheckAccessResponse
      >
    ): void;
    access(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Access
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CheckAccessResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CheckAccessResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CheckAccessResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CheckAccessResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Access;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Access;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/consumers/access').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CheckAccessResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CheckAccessResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.consumers.status
     * @desc Checks the status of this service.
     * @alias apigee.organizations.consumers.status
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your  request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    status(
      params?: Params$Resource$Organizations$Consumers$Status,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CapiServerStatusResponse>;
    status(
      params: Params$Resource$Organizations$Consumers$Status,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1CapiServerStatusResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CapiServerStatusResponse
      >
    ): void;
    status(
      params: Params$Resource$Organizations$Consumers$Status,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CapiServerStatusResponse
      >
    ): void;
    status(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CapiServerStatusResponse
      >
    ): void;
    status(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Status
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1CapiServerStatusResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1CapiServerStatusResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CapiServerStatusResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1CapiServerStatusResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Status;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Status;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/consumers/status').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CapiServerStatusResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1CapiServerStatusResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Consumers$Access
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your  request:   `organizations/{org}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1CheckAccessBody;
  }
  export interface Params$Resource$Organizations$Consumers$Status
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your  request:   `organizations/{org}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Consumers$Apps {
    context: APIRequestContext;
    keys: Resource$Organizations$Consumers$Apps$Keys;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.keys = new Resource$Organizations$Consumers$Apps$Keys(this.context);
    }

    /**
     * apigee.organizations.consumers.apps.create
     * @desc Creates an app.
     * @alias apigee.organizations.consumers.apps.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your  request:   `organizations/{org}`
     * @param {().GoogleCloudApigeeV1CreateConsumerAppRequestBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Consumers$Apps$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerAppResponse>;
    create(
      params: Params$Resource$Organizations$Consumers$Apps$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    create(
      params: Params$Resource$Organizations$Consumers$Apps$Create,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    create(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Apps$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerAppResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Apps$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Apps$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/consumers/apps').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerAppResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerAppResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.consumers.apps.delete
     * @desc Deletes an app.
     * @alias apigee.organizations.consumers.apps.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Consumers$Apps$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse>;
    delete(
      params: Params$Resource$Organizations$Consumers$Apps$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    delete(
      params: Params$Resource$Organizations$Consumers$Apps$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Apps$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Apps$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Apps$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.consumers.apps.get
     * @desc Gets an app.
     * @alias apigee.organizations.consumers.apps.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Consumers$Apps$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerAppResponse>;
    get(
      params: Params$Resource$Organizations$Consumers$Apps$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    get(
      params: Params$Resource$Organizations$Consumers$Apps$Get,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    get(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Apps$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerAppResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Apps$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Apps$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerAppResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerAppResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.consumers.apps.list
     * @desc Lists all apps.
     * @alias apigee.organizations.consumers.apps.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Consumers$Apps$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListConsumerAppsResponse>;
    list(
      params: Params$Resource$Organizations$Consumers$Apps$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Consumers$Apps$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Apps$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Apps$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Apps$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/consumers/apps').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListConsumerAppsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListConsumerAppsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.consumers.apps.update
     * @desc Updates an app.
     * @alias apigee.organizations.consumers.apps.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     * @param {().GoogleCloudApigeeV1PortalApp} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Consumers$Apps$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerAppResponse>;
    update(
      params: Params$Resource$Organizations$Consumers$Apps$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    update(
      params: Params$Resource$Organizations$Consumers$Apps$Update,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    update(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Apps$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerAppResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerAppResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerAppResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Apps$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Apps$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerAppResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerAppResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Consumers$Apps$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your  request:   `organizations/{org}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1CreateConsumerAppRequestBody;
  }
  export interface Params$Resource$Organizations$Consumers$Apps$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Consumers$Apps$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Consumers$Apps$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Consumers$Apps$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1PortalApp;
  }

  export class Resource$Organizations$Consumers$Apps$Keys {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.consumers.apps.keys.approveRevokeConsumerAppKey
     * @desc Approves or revokes an API key for an app.
     * @alias apigee.organizations.consumers.apps.keys.approveRevokeConsumerAppKey
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the API key. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}/keys/{key}`
     * @param {().GoogleCloudApigeeV1KeyStatusChange} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    approveRevokeConsumerAppKey(
      params?: Params$Resource$Organizations$Consumers$Apps$Keys$Approverevokeconsumerappkey,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    approveRevokeConsumerAppKey(
      params: Params$Resource$Organizations$Consumers$Apps$Keys$Approverevokeconsumerappkey,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    approveRevokeConsumerAppKey(
      params: Params$Resource$Organizations$Consumers$Apps$Keys$Approverevokeconsumerappkey,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    approveRevokeConsumerAppKey(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    approveRevokeConsumerAppKey(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Apps$Keys$Approverevokeconsumerappkey
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Apps$Keys$Approverevokeconsumerappkey;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Apps$Keys$Approverevokeconsumerappkey;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.consumers.apps.keys.create
     * @desc Creates an API key for an app.
     * @alias apigee.organizations.consumers.apps.keys.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Consumers$Apps$Keys$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse>;
    create(
      params: Params$Resource$Organizations$Consumers$Apps$Keys$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    create(
      params: Params$Resource$Organizations$Consumers$Apps$Keys$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Consumers$Apps$Keys$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Consumers$Apps$Keys$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Consumers$Apps$Keys$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keys').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Consumers$Apps$Keys$Approverevokeconsumerappkey
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API key. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}/keys/{key}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1KeyStatusChange;
  }
  export interface Params$Resource$Organizations$Consumers$Apps$Keys$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the app. Use the following structure in your request:   `organizations/{org}/consumers/apps/{app}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.deployments.list
     * @desc Lists all deployments of API proxies or shared flows.
     * @alias apigee.organizations.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the organization for which to return deployment information in the following format:  `organizations/{org}`
     * @param {boolean=} params.sharedFlows Optional. Flag that specifies whether to return shared flow or API proxy deployments. Set to `true` to return shared flow deployments; set to `false` to return API proxy deployments. Defaults to `false`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the organization for which to return deployment information in the following format:  `organizations/{org}`
     */
    parent?: string;
    /**
     * Optional. Flag that specifies whether to return shared flow or API proxy deployments. Set to `true` to return shared flow deployments; set to `false` to return API proxy deployments. Defaults to `false`.
     */
    sharedFlows?: boolean;
  }

  export class Resource$Organizations$Developers {
    context: APIRequestContext;
    apps: Resource$Organizations$Developers$Apps;
    attributes: Resource$Organizations$Developers$Attributes;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.apps = new Resource$Organizations$Developers$Apps(this.context);
      this.attributes = new Resource$Organizations$Developers$Attributes(
        this.context
      );
    }

    /**
     * apigee.organizations.developers.attributes
     * @desc Updates developer attributes.  This API replaces the existing attributes with those specified in the request. Add new attributes, and include or exclude any existing attributes that you want to retain or remove, respectively.  The custom attribute limit is 18.  **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
     * @alias apigee.organizations.developers.attributes
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Email address of the developer for which attributes are being updated in the following format:   `organizations/{org}/developers/{developer_email}`
     * @param {().GoogleCloudApigeeV1Attributes} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    attributes(
      params?: Params$Resource$Organizations$Developers$Attributes,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes>;
    attributes(
      params: Params$Resource$Organizations$Developers$Attributes,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      params: Params$Resource$Organizations$Developers$Attributes,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Attributes
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Attributes;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Attributes;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/attributes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.create
     * @desc Creates a developer. Once created, the developer can register an app and obtain an API key.  At creation time, a developer is set as `active`. To change the developer status, use the SetDeveloperStatus API.
     * @alias apigee.organizations.developers.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization in which the developer is created. Use the following structure in your request:   `organizations/{org}`.
     * @param {().GoogleCloudApigeeV1Developer} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Developers$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Developer>;
    create(
      params: Params$Resource$Organizations$Developers$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    create(
      params: Params$Resource$Organizations$Developers$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Developer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/developers').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.delete
     * @desc Deletes a developer. All apps and API keys associated with the developer are also removed.  **Warning**: This API will permanently delete the developer and related artifacts.  To avoid permanently deleting developers and their artifacts, set the developer status to `inactive` using the SetDeveloperStatus API.  **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.
     * @alias apigee.organizations.developers.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Developers$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Developer>;
    delete(
      params: Params$Resource$Organizations$Developers$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    delete(
      params: Params$Resource$Organizations$Developers$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Developer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.get
     * @desc Returns the developer details, including the developer's name, email address, apps, and other information.  **Note**: The response includes only the first 100 developer apps.
     * @alias apigee.organizations.developers.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Status of the developer. Valid values are `active` or `inactive`.
     * @param {string} params.name Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Developers$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Developer>;
    get(
      params: Params$Resource$Organizations$Developers$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    get(
      params: Params$Resource$Organizations$Developers$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Developer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.list
     * @desc Lists all developers in an organization by email address.  By default, the response does not include company developers. Set the `includeCompany` query parameter to `true` to include company developers.  **Note**: A maximum of 1000 developers are returned in the response. You paginate the list of developers returned using the `startKey` and `count` query parameters.
     * @alias apigee.organizations.developers.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.count Optional. Number of developers to return in the API call. Use with the `startKey` parameter to provide more targeted filtering. The limit is 1000.
     * @param {boolean=} params.expand Specifies whether to expand the results. Set to `true` to expand the results. This query parameter is not valid if you use the `count` or `startKey` query parameters.
     * @param {string=} params.ids Optional. List of IDs to include, separated by commas.
     * @param {boolean=} params.includeCompany Flag that specifies whether to include company details in the response.
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`.
     * @param {string=} params.startKey **Note**: Must be used in conjunction with the `count` parameter.  Email address of the developer from which to start displaying the list of developers. For example, if the an unfiltered list returns:  ``` westley@example.com fezzik@example.com buttercup@example.com ```  and your `startKey` is `fezzik@example.com`, the list returned will be  ``` fezzik@example.com buttercup@example.com ```
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Developers$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListOfDevelopersResponse>;
    list(
      params: Params$Resource$Organizations$Developers$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Developers$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/developers').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListOfDevelopersResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListOfDevelopersResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.developers.setDeveloperStatus
     * @desc Sets the status of a developer. Valid values are `active` or `inactive`.  A developer is `active` by default. If you set a developer's status to `inactive`, the API keys assigned to the developer apps are no longer valid even though the API keys are set to `approved`. Inactive developers can still sign in to the developer portal and create apps; however, any new API keys generated during app creation won't work.  If successful, the API call returns the following HTTP status code: `204 No Content`
     * @alias apigee.organizations.developers.setDeveloperStatus
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Status of the developer. Valid values are `active` and `inactive`.
     * @param {string} params.name Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    setDeveloperStatus(
      params?: Params$Resource$Organizations$Developers$Setdeveloperstatus,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    setDeveloperStatus(
      params: Params$Resource$Organizations$Developers$Setdeveloperstatus,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    setDeveloperStatus(
      params: Params$Resource$Organizations$Developers$Setdeveloperstatus,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    setDeveloperStatus(
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    setDeveloperStatus(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Setdeveloperstatus
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback?: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void | GaxiosPromise<Schema$GoogleProtobufEmpty> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Setdeveloperstatus;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Setdeveloperstatus;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * apigee.organizations.developers.update
     * @desc Updates a developer.  This API replaces the existing developer details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively.  The custom attribute limit is 18.  **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
     * @alias apigee.organizations.developers.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     * @param {().GoogleCloudApigeeV1Developer} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Developers$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Developer>;
    update(
      params: Params$Resource$Organizations$Developers$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    update(
      params: Params$Resource$Organizations$Developers$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Developer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Developer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Developer>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Developers$Attributes
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Email address of the developer for which attributes are being updated in the following format:   `organizations/{org}/developers/{developer_email}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Attributes;
  }
  export interface Params$Resource$Organizations$Developers$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization in which the developer is created. Use the following structure in your request:   `organizations/{org}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Developer;
  }
  export interface Params$Resource$Organizations$Developers$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Status of the developer. Valid values are `active` or `inactive`.
     */
    action?: string;
    /**
     * Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Optional. Number of developers to return in the API call. Use with the `startKey` parameter to provide more targeted filtering. The limit is 1000.
     */
    count?: string;
    /**
     * Specifies whether to expand the results. Set to `true` to expand the results. This query parameter is not valid if you use the `count` or `startKey` query parameters.
     */
    expand?: boolean;
    /**
     * Optional. List of IDs to include, separated by commas.
     */
    ids?: string;
    /**
     * Flag that specifies whether to include company details in the response.
     */
    includeCompany?: boolean;
    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`.
     */
    parent?: string;
    /**
     * **Note**: Must be used in conjunction with the `count` parameter.  Email address of the developer from which to start displaying the list of developers. For example, if the an unfiltered list returns:  ``` westley@example.com fezzik@example.com buttercup@example.com ```  and your `startKey` is `fezzik@example.com`, the list returned will be  ``` fezzik@example.com buttercup@example.com ```
     */
    startKey?: string;
  }
  export interface Params$Resource$Organizations$Developers$Setdeveloperstatus
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Status of the developer. Valid values are `active` and `inactive`.
     */
    action?: string;
    /**
     * Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Email address of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Developer;
  }

  export class Resource$Organizations$Developers$Apps {
    context: APIRequestContext;
    attributes: Resource$Organizations$Developers$Apps$Attributes;
    keys: Resource$Organizations$Developers$Apps$Keys;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.attributes = new Resource$Organizations$Developers$Apps$Attributes(
        this.context
      );
      this.keys = new Resource$Organizations$Developers$Apps$Keys(this.context);
    }

    /**
     * apigee.organizations.developers.apps.attributes
     * @desc Updates attributes for a developer app. This API replaces the current attributes with those specified in the request.
     * @alias apigee.organizations.developers.apps.attributes
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     * @param {().GoogleCloudApigeeV1Attributes} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    attributes(
      params?: Params$Resource$Organizations$Developers$Apps$Attributes,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes>;
    attributes(
      params: Params$Resource$Organizations$Developers$Apps$Attributes,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      params: Params$Resource$Organizations$Developers$Apps$Attributes,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    attributes(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Attributes
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Attributes;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Attributes;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/attributes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.create
     * @desc Creates an app associated with a developer. This API associates the developer app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product.  The `name` is the unique ID of the app that you can use in API calls. The `DisplayName` (set as an attribute) appears in the UI. If you don't set the `DisplayName` attribute, the `name` appears in the UI.
     * @alias apigee.organizations.developers.apps.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the developer. Use the following structure in your request:    `organizations/{org}/developers/{developer_email}`
     * @param {().GoogleCloudApigeeV1DeveloperApp} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Developers$Apps$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp>;
    create(
      params: Params$Resource$Organizations$Developers$Apps$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    create(
      params: Params$Resource$Organizations$Developers$Apps$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apps').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.delete
     * @desc Deletes a developer app.  **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.
     * @alias apigee.organizations.developers.apps.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Developers$Apps$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp>;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.generateKeyPairOrUpdateDeveloperAppStatus
     * @desc Manages access to a developer app by enabling you to:  * Approve or revoke a developer app * Generate a new consumer key and secret for a developer app  To approve or revoke a developer app, set the `action` query parameter to `approved` or `revoked`, respectively, and the `Content-Type` header to `application/octet-stream`. If a developer app is revoked, none of its API keys are valid for API calls even though the keys are still `approved`. If successful, the API call returns the following HTTP status code: `204 No Content`  To generate a new consumer key and secret for a developer app, pass the new key/secret details. Rather than replace an existing key, this API generates a new key. In this case, multiple key pairs may be associated with a single developer app. Each key pair has an independent status (`approved` or `revoked`) and expiration time. Any approved, non-expired key can be used in an API call.  For example, if you're using API key rotation, you can generate new keys with expiration times that overlap keys that are going to expire. You might also generate a new consumer key/secret if the security of the original key/secret is compromised.  The `keyExpiresIn` property defines the expiration time for the API key in milliseconds. If you don't set this property or set it to `-1`, the API key never expires.  **Notes**:  * When generating a new key/secret, this API replaces the existing attributes, notes, and callback URLs with those specified in the request. Include or exclude any existing information that you want to retain or delete, respectively. * To migrate existing consumer keys and secrets to hybrid from another system, see the CreateDeveloperAppKey API.
     * @alias apigee.organizations.developers.apps.generateKeyPairOrUpdateDeveloperAppStatus
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Action. Valid values are `approve` or `revoke`.
     * @param {string} params.name Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     * @param {().GoogleCloudApigeeV1DeveloperApp} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    generateKeyPairOrUpdateDeveloperAppStatus(
      params?: Params$Resource$Organizations$Developers$Apps$Generatekeypairorupdatedeveloperappstatus,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp>;
    generateKeyPairOrUpdateDeveloperAppStatus(
      params: Params$Resource$Organizations$Developers$Apps$Generatekeypairorupdatedeveloperappstatus,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    generateKeyPairOrUpdateDeveloperAppStatus(
      params: Params$Resource$Organizations$Developers$Apps$Generatekeypairorupdatedeveloperappstatus,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    generateKeyPairOrUpdateDeveloperAppStatus(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    generateKeyPairOrUpdateDeveloperAppStatus(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Generatekeypairorupdatedeveloperappstatus
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Generatekeypairorupdatedeveloperappstatus;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Generatekeypairorupdatedeveloperappstatus;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.get
     * @desc Returns the details for a developer app.
     * @alias apigee.organizations.developers.apps.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.entity **Note**: Must be used in conjunction with the `query` parameter.  Set to `apiresources` to return the number of API resources that have been approved for access by a developer app in the specified Apigee organization.
     * @param {string} params.name Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     * @param {string=} params.query **Note**: Must be used in conjunction with the `entity` parameter.  Set to `count` to return the number of API resources that have been approved for access by a developer app in the specified Apigee organization.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Developers$Apps$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp>;
    get(
      params: Params$Resource$Organizations$Developers$Apps$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    get(
      params: Params$Resource$Organizations$Developers$Apps$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.list
     * @desc Lists all apps created by a developer in an Apigee organization. Optionally, you can request an expanded view of the developer apps.  A maximum of 100 developer apps are returned per API call. You can paginate the list of deveoper apps returned using the `startKey` and `count` query parameters.
     * @alias apigee.organizations.developers.apps.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.count Number of developer apps to return in the API call. Use with the `startKey` parameter to provide more targeted filtering. The limit is 1000.
     * @param {boolean=} params.expand Optional. Specifies whether to expand the results. Set to `true` to expand the results. This query parameter is not valid if you use the `count` or `startKey` query parameters.
     * @param {string} params.parent Required. Name of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     * @param {boolean=} params.shallowExpand Optional. Specifies whether to expand the results in shallow mode. Set to `true` to expand the results in shallow mode.
     * @param {string=} params.startKey **Note**: Must be used in conjunction with the `count` parameter.  Name of the developer app from which to start displaying the list of developer apps. For example, if you're returning 50 developer apps at a time (using the `count` query parameter), you can view developer apps 50-99 by entering the name of the 50th developer app. The developer app name is case sensitive.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Developers$Apps$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse>;
    list(
      params: Params$Resource$Organizations$Developers$Apps$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Developers$Apps$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apps').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeveloperAppsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.developers.apps.update
     * @desc Updates the details for a developer app. In addition, you can add an API product to a developer app and automatically generate an API key for the app to use when calling APIs in the API product.  If you want to use an existing API key for the API product, add the API product to the API key using the UpdateDeveloperAppKey API.  Using this API, you cannot update the following:  * App name as it is the primary key used to identify the app and cannot   be changed. * Scopes associated with the app. Instead, use the   ReplaceDeveloperAppKey API.  This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.
     * @alias apigee.organizations.developers.apps.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     * @param {().GoogleCloudApigeeV1DeveloperApp} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Developers$Apps$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp>;
    update(
      params: Params$Resource$Organizations$Developers$Apps$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    update(
      params: Params$Resource$Organizations$Developers$Apps$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperApp>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperApp> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperApp>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Developers$Apps$Attributes
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Attributes;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer. Use the following structure in your request:    `organizations/{org}/developers/{developer_email}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DeveloperApp;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Generatekeypairorupdatedeveloperappstatus
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Action. Valid values are `approve` or `revoke`.
     */
    action?: string;
    /**
     * Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DeveloperApp;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * **Note**: Must be used in conjunction with the `query` parameter.  Set to `apiresources` to return the number of API resources that have been approved for access by a developer app in the specified Apigee organization.
     */
    entity?: string;
    /**
     * Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     */
    name?: string;
    /**
     * **Note**: Must be used in conjunction with the `entity` parameter.  Set to `count` to return the number of API resources that have been approved for access by a developer app in the specified Apigee organization.
     */
    query?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Number of developer apps to return in the API call. Use with the `startKey` parameter to provide more targeted filtering. The limit is 1000.
     */
    count?: string;
    /**
     * Optional. Specifies whether to expand the results. Set to `true` to expand the results. This query parameter is not valid if you use the `count` or `startKey` query parameters.
     */
    expand?: boolean;
    /**
     * Required. Name of the developer. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}`
     */
    parent?: string;
    /**
     * Optional. Specifies whether to expand the results in shallow mode. Set to `true` to expand the results in shallow mode.
     */
    shallowExpand?: boolean;
    /**
     * **Note**: Must be used in conjunction with the `count` parameter.  Name of the developer app from which to start displaying the list of developer apps. For example, if you're returning 50 developer apps at a time (using the `count` query parameter), you can view developer apps 50-99 by entering the name of the 50th developer app. The developer app name is case sensitive.
     */
    startKey?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DeveloperApp;
  }

  export class Resource$Organizations$Developers$Apps$Attributes {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.developers.apps.attributes.delete
     * @desc Deletes a developer app attribute.
     * @alias apigee.organizations.developers.apps.attributes.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer app attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Developers$Apps$Attributes$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Attributes$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Attributes$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Attributes$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.attributes.get
     * @desc Returns a developer app attribute.
     * @alias apigee.organizations.developers.apps.attributes.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer app attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Developers$Apps$Attributes$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    get(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Attributes$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Attributes$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Attributes$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.attributes.list
     * @desc Returns a list of all developer app attributes.
     * @alias apigee.organizations.developers.apps.attributes.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Developers$Apps$Attributes$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes>;
    list(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$List,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Attributes$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Attributes$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Attributes$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/attributes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.attributes.updateDeveloperAppAttribute
     * @desc Updates a developer app attribute.  **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
     * @alias apigee.organizations.developers.apps.attributes.updateDeveloperAppAttribute
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer app attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
     * @param {().GoogleCloudApigeeV1Attribute} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateDeveloperAppAttribute(
      params?: Params$Resource$Organizations$Developers$Apps$Attributes$Updatedeveloperappattribute,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    updateDeveloperAppAttribute(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$Updatedeveloperappattribute,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateDeveloperAppAttribute(
      params: Params$Resource$Organizations$Developers$Apps$Attributes$Updatedeveloperappattribute,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateDeveloperAppAttribute(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateDeveloperAppAttribute(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Attributes$Updatedeveloperappattribute
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Attributes$Updatedeveloperappattribute;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Attributes$Updatedeveloperappattribute;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Developers$Apps$Attributes$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer app attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Attributes$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer app attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Attributes$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer app. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Attributes$Updatedeveloperappattribute
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer app attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Attribute;
  }

  export class Resource$Organizations$Developers$Apps$Keys {
    context: APIRequestContext;
    apiproducts: Resource$Organizations$Developers$Apps$Keys$Apiproducts;
    create: Resource$Organizations$Developers$Apps$Keys$Create;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.apiproducts = new Resource$Organizations$Developers$Apps$Keys$Apiproducts(
        this.context
      );
      this.create = new Resource$Organizations$Developers$Apps$Keys$Create(
        this.context
      );
    }

    /**
     * apigee.organizations.developers.apps.keys.create
     * @desc Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee hybrid from another system.  Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed.  **Note**: To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each.  After creating the consumer key and secret, associate the key with an API product using the UpdateDeveloperAppKey API.  If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API.
     * @alias apigee.organizations.developers.apps.keys.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Parent of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps`
     * @param {().GoogleCloudApigeeV1DeveloperAppKey} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey>;
    create(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    create(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keys').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.keys.delete
     * @desc Deletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs.  **Note**: After you delete a consumer key, you may want to: 1. Create a new consumer key and secret for the developer app using the CreateDeveloperAppKey API, and subsequently add an API product to the key using the UpdateDeveloperAppKey API. 2. Delete the developer app, if it is no longer required.
     * @alias apigee.organizations.developers.apps.keys.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey>;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.keys.get
     * @desc Returns details for a consumer key for a developer app, including the key and secret value, associated API products, and other information.
     * @alias apigee.organizations.developers.apps.keys.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey>;
    get(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    get(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.keys.replaceDeveloperAppKey
     * @desc Updates the scope of an app.  This API replaces the existing scopes with those specified in the request. Include or exclude any existing scopes that you want to retain or delete, respectively. The specified scopes must already be defined for the API products associated with the app.  This API sets the `scopes` element under the `apiProducts` element in the attributes of the app.
     * @alias apigee.organizations.developers.apps.keys.replaceDeveloperAppKey
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     * @param {().GoogleCloudApigeeV1DeveloperAppKey} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    replaceDeveloperAppKey(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Replacedeveloperappkey,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey>;
    replaceDeveloperAppKey(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Replacedeveloperappkey,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    replaceDeveloperAppKey(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Replacedeveloperappkey,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    replaceDeveloperAppKey(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    replaceDeveloperAppKey(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Replacedeveloperappkey
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Replacedeveloperappkey;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Replacedeveloperappkey;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.keys.updateDeveloperAppKey
     * @desc Adds an API product to a developer app key, enabling the app that holds the key to access the API resources bundled in the API product.  In addition, you can add attributes to a developer app key. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.  You can use the same key to access all API products associated with the app.
     * @alias apigee.organizations.developers.apps.keys.updateDeveloperAppKey
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Approve or revoke the consumer key by setting this value to `approve` or `revoke`, respectively.
     * @param {string} params.name Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     * @param {().GoogleCloudApigeeV1DeveloperAppKey} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateDeveloperAppKey(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Updatedeveloperappkey,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey>;
    updateDeveloperAppKey(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Updatedeveloperappkey,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    updateDeveloperAppKey(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Updatedeveloperappkey,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    updateDeveloperAppKey(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    updateDeveloperAppKey(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Updatedeveloperappkey
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Updatedeveloperappkey;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Updatedeveloperappkey;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Developers$Apps$Keys$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Parent of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DeveloperAppKey;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Keys$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Keys$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Keys$Replacedeveloperappkey
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DeveloperAppKey;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Keys$Updatedeveloperappkey
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Approve or revoke the consumer key by setting this value to `approve` or `revoke`, respectively.
     */
    action?: string;
    /**
     * Name of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DeveloperAppKey;
  }

  export class Resource$Organizations$Developers$Apps$Keys$Apiproducts {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.developers.apps.keys.apiproducts.delete
     * @desc Removes an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product.  **Note**: The consumer key is not removed, only its association with the API product.
     * @alias apigee.organizations.developers.apps.keys.apiproducts.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Name of the API product in the developer app key in the following format:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey>;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    delete(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.apps.keys.apiproducts.updateDeveloperAppKeyApiProduct
     * @desc Approve or revoke an app's consumer key. After a consumer key is approved, the app can use it to access APIs.  A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee hybrid checks the status of the consumer key and if set to `revoked` will not allow access to the API.
     * @alias apigee.organizations.developers.apps.keys.apiproducts.updateDeveloperAppKeyApiProduct
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Approve or revoke the consumer key by setting this value to `approve` or `revoke`, respectively.
     * @param {string} params.name Name of the API product in the developer app key in the following format:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateDeveloperAppKeyApiProduct(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Updatedeveloperappkeyapiproduct,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    updateDeveloperAppKeyApiProduct(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Updatedeveloperappkeyapiproduct,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    updateDeveloperAppKeyApiProduct(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Updatedeveloperappkeyapiproduct,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    updateDeveloperAppKeyApiProduct(
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    updateDeveloperAppKeyApiProduct(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Updatedeveloperappkeyapiproduct
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback?: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void | GaxiosPromise<Schema$GoogleProtobufEmpty> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Updatedeveloperappkeyapiproduct;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Updatedeveloperappkeyapiproduct;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Name of the API product in the developer app key in the following format:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Apps$Keys$Apiproducts$Updatedeveloperappkeyapiproduct
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Approve or revoke the consumer key by setting this value to `approve` or `revoke`, respectively.
     */
    action?: string;
    /**
     * Name of the API product in the developer app key in the following format:   `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
     */
    name?: string;
  }

  export class Resource$Organizations$Developers$Apps$Keys$Create {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.developers.apps.keys.create.create
     * @desc Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee hybrid from another system.  Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed.  **Note**: To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each.  After creating the consumer key and secret, associate the key with an API product using the UpdateDeveloperAppKey API.  If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API.
     * @alias apigee.organizations.developers.apps.keys.create.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Parent of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps`
     * @param {().GoogleCloudApigeeV1DeveloperAppKey} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Developers$Apps$Keys$Create$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey>;
    create(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Create$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    create(
      params: Params$Resource$Organizations$Developers$Apps$Keys$Create$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Apps$Keys$Create$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DeveloperAppKey>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DeveloperAppKey> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Apps$Keys$Create$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Apps$Keys$Create$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keys/create').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DeveloperAppKey>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Developers$Apps$Keys$Create$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Parent of the developer app key. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/apps`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DeveloperAppKey;
  }

  export class Resource$Organizations$Developers$Attributes {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.developers.attributes.delete
     * @desc Deletes a developer attribute.
     * @alias apigee.organizations.developers.attributes.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Developers$Attributes$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    delete(
      params: Params$Resource$Organizations$Developers$Attributes$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      params: Params$Resource$Organizations$Developers$Attributes$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Attributes$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Attributes$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Attributes$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.attributes.get
     * @desc Returns the value of the specified developer attribute.
     * @alias apigee.organizations.developers.attributes.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Developers$Attributes$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    get(
      params: Params$Resource$Organizations$Developers$Attributes$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      params: Params$Resource$Organizations$Developers$Attributes$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Attributes$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Attributes$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Attributes$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.attributes.list
     * @desc Returns a list of all developer attributes.
     * @alias apigee.organizations.developers.attributes.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Email address of the developer for which attributes are being listed in the following format:   `organizations/{org}/developers/{developer_email}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Developers$Attributes$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes>;
    list(
      params: Params$Resource$Organizations$Developers$Attributes$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      params: Params$Resource$Organizations$Developers$Attributes$List,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Attributes$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attributes>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attributes> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Attributes$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Attributes$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/attributes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attributes>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.developers.attributes.updateDeveloperAttribute
     * @desc Updates a developer attribute.  **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
     * @alias apigee.organizations.developers.attributes.updateDeveloperAttribute
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the developer attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
     * @param {().GoogleCloudApigeeV1Attribute} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateDeveloperAttribute(
      params?: Params$Resource$Organizations$Developers$Attributes$Updatedeveloperattribute,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute>;
    updateDeveloperAttribute(
      params: Params$Resource$Organizations$Developers$Attributes$Updatedeveloperattribute,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateDeveloperAttribute(
      params: Params$Resource$Organizations$Developers$Attributes$Updatedeveloperattribute,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateDeveloperAttribute(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void;
    updateDeveloperAttribute(
      paramsOrCallback?:
        | Params$Resource$Organizations$Developers$Attributes$Updatedeveloperattribute
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Attribute>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Attribute> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Developers$Attributes$Updatedeveloperattribute;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Developers$Attributes$Updatedeveloperattribute;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Attribute>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Developers$Attributes$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Attributes$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Developers$Attributes$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Email address of the developer for which attributes are being listed in the following format:   `organizations/{org}/developers/{developer_email}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Developers$Attributes$Updatedeveloperattribute
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the developer attribute. Use the following structure in your request:   `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Attribute;
  }

  export class Resource$Organizations$Environments {
    context: APIRequestContext;
    analytics: Resource$Organizations$Environments$Analytics;
    apis: Resource$Organizations$Environments$Apis;
    caches: Resource$Organizations$Environments$Caches;
    deployments: Resource$Organizations$Environments$Deployments;
    flowhooks: Resource$Organizations$Environments$Flowhooks;
    keystores: Resource$Organizations$Environments$Keystores;
    keyvaluemaps: Resource$Organizations$Environments$Keyvaluemaps;
    optimizedStats: Resource$Organizations$Environments$Optimizedstats;
    queries: Resource$Organizations$Environments$Queries;
    references: Resource$Organizations$Environments$References;
    resourcefiles: Resource$Organizations$Environments$Resourcefiles;
    sharedflows: Resource$Organizations$Environments$Sharedflows;
    stats: Resource$Organizations$Environments$Stats;
    targetservers: Resource$Organizations$Environments$Targetservers;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.analytics = new Resource$Organizations$Environments$Analytics(
        this.context
      );
      this.apis = new Resource$Organizations$Environments$Apis(this.context);
      this.caches = new Resource$Organizations$Environments$Caches(
        this.context
      );
      this.deployments = new Resource$Organizations$Environments$Deployments(
        this.context
      );
      this.flowhooks = new Resource$Organizations$Environments$Flowhooks(
        this.context
      );
      this.keystores = new Resource$Organizations$Environments$Keystores(
        this.context
      );
      this.keyvaluemaps = new Resource$Organizations$Environments$Keyvaluemaps(
        this.context
      );
      this.optimizedStats = new Resource$Organizations$Environments$Optimizedstats(
        this.context
      );
      this.queries = new Resource$Organizations$Environments$Queries(
        this.context
      );
      this.references = new Resource$Organizations$Environments$References(
        this.context
      );
      this.resourcefiles = new Resource$Organizations$Environments$Resourcefiles(
        this.context
      );
      this.sharedflows = new Resource$Organizations$Environments$Sharedflows(
        this.context
      );
      this.stats = new Resource$Organizations$Environments$Stats(this.context);
      this.targetservers = new Resource$Organizations$Environments$Targetservers(
        this.context
      );
    }

    /**
     * apigee.organizations.environments.create
     * @desc Creates an environment in an organization.
     * @alias apigee.organizations.environments.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.name Optional. Name of the environment. Alternatively, the name may be specified in the request body in the environment_id field.
     * @param {string} params.parent Required. Name of the organization in which the environment will be created. Use the following structure in your request:  `organizations/{org}`
     * @param {().GoogleCloudApigeeV1Environment} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningOperation>;
    create(
      params: Params$Resource$Organizations$Environments$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Create,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Create
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback?: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void | GaxiosPromise<Schema$GoogleLongrunningOperation> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/environments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningOperation>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningOperation>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.delete
     * @desc Deletes an environment from an organization.
     * @alias apigee.organizations.environments.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningOperation>;
    delete(
      params: Params$Resource$Organizations$Environments$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$Delete,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Delete
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback?: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void | GaxiosPromise<Schema$GoogleLongrunningOperation> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningOperation>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningOperation>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.get
     * @desc Gets environment details.
     * @alias apigee.organizations.environments.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Environment>;
    get(
      params: Params$Resource$Organizations$Environments$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Environment> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Environment>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Environment>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.getDatalocation
     * @desc Get Google Cloud Storage (GCS) signed url for specific organization and environment. Collection agent uses this signed url to upload data to GCS bucket.
     * @alias apigee.organizations.environments.getDatalocation
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.contentType Content-Type for uploaded file.
     * @param {string=} params.dataset Required. Dataset could be one of `api`, `mint`, `trace` and `event`
     * @param {string} params.name Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}/datalocation`.
     * @param {string=} params.relativeFilePath Required. Relative path to the GCS bucket
     * @param {string=} params.repo Required. Repository name
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getDatalocation(
      params?: Params$Resource$Organizations$Environments$Getdatalocation,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DataLocation>;
    getDatalocation(
      params: Params$Resource$Organizations$Environments$Getdatalocation,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DataLocation>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DataLocation>
    ): void;
    getDatalocation(
      params: Params$Resource$Organizations$Environments$Getdatalocation,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DataLocation>
    ): void;
    getDatalocation(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DataLocation>
    ): void;
    getDatalocation(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Getdatalocation
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DataLocation>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DataLocation>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DataLocation>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DataLocation> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Getdatalocation;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Getdatalocation;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DataLocation>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DataLocation>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.getDebugmask
     * @desc Gets the debug mask singleton resource for an environment.
     * @alias apigee.organizations.environments.getDebugmask
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the debug mask. Use the following structure in your request:   `organizations/{org}/environments/{env}/debugmask`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getDebugmask(
      params?: Params$Resource$Organizations$Environments$Getdebugmask,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DebugMask>;
    getDebugmask(
      params: Params$Resource$Organizations$Environments$Getdebugmask,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void;
    getDebugmask(
      params: Params$Resource$Organizations$Environments$Getdebugmask,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void;
    getDebugmask(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void;
    getDebugmask(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Getdebugmask
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DebugMask> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Getdebugmask;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Getdebugmask;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DebugMask>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DebugMask>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.getDeployedConfig
     * @desc Gets the deployed configuration for an environment.
     * @alias apigee.organizations.environments.getDeployedConfig
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the environment deployed configuration resource. Use the following structure in your request:  `organizations/{org}/environments/{env}/deployedConfig`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getDeployedConfig(
      params?: Params$Resource$Organizations$Environments$Getdeployedconfig,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1EnvironmentConfig>;
    getDeployedConfig(
      params: Params$Resource$Organizations$Environments$Getdeployedconfig,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EnvironmentConfig>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1EnvironmentConfig
      >
    ): void;
    getDeployedConfig(
      params: Params$Resource$Organizations$Environments$Getdeployedconfig,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1EnvironmentConfig
      >
    ): void;
    getDeployedConfig(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1EnvironmentConfig
      >
    ): void;
    getDeployedConfig(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Getdeployedconfig
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EnvironmentConfig>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EnvironmentConfig>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1EnvironmentConfig
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1EnvironmentConfig> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Getdeployedconfig;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Getdeployedconfig;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1EnvironmentConfig>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1EnvironmentConfig>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.getIamPolicy
     * @desc Gets the IAM policy on an environment. For more information, see [Manage users, roles, and permissions using the API](https://docs.apigee.com/hybrid/latest/manage-users-roles).  You must have the `apigee.environments.getIamPolicy` permission to call this API.
     * @alias apigee.organizations.environments.getIamPolicy
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {integer=} params.options.requestedPolicyVersion Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.
     * @param {string} params.resource_ REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getIamPolicy(
      params?: Params$Resource$Organizations$Environments$Getiampolicy,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleIamV1Policy>;
    getIamPolicy(
      params: Params$Resource$Organizations$Environments$Getiampolicy,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleIamV1Policy>,
      callback: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void;
    getIamPolicy(
      params: Params$Resource$Organizations$Environments$Getiampolicy,
      callback: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void;
    getIamPolicy(
      callback: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void;
    getIamPolicy(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Getiampolicy
        | BodyResponseCallback<Schema$GoogleIamV1Policy>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleIamV1Policy>,
      callback?: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void | GaxiosPromise<Schema$GoogleIamV1Policy> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Getiampolicy;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Getiampolicy;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['resource'],
        pathParams: ['resource'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleIamV1Policy>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleIamV1Policy>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.setIamPolicy
     * @desc Sets the IAM policy on an environment, if the policy already exists it will be replaced. For more information, see [Manage users, roles, and permissions using the API](https://docs.apigee.com/hybrid/latest/manage-users-roles).  You must have the `apigee.environments.setIamPolicy` permission to call this API.
     * @alias apigee.organizations.environments.setIamPolicy
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.resource_ REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
     * @param {().GoogleIamV1SetIamPolicyRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    setIamPolicy(
      params?: Params$Resource$Organizations$Environments$Setiampolicy,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleIamV1Policy>;
    setIamPolicy(
      params: Params$Resource$Organizations$Environments$Setiampolicy,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleIamV1Policy>,
      callback: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void;
    setIamPolicy(
      params: Params$Resource$Organizations$Environments$Setiampolicy,
      callback: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void;
    setIamPolicy(
      callback: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void;
    setIamPolicy(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Setiampolicy
        | BodyResponseCallback<Schema$GoogleIamV1Policy>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleIamV1Policy>,
      callback?: BodyResponseCallback<Schema$GoogleIamV1Policy>
    ): void | GaxiosPromise<Schema$GoogleIamV1Policy> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Setiampolicy;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Setiampolicy;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['resource'],
        pathParams: ['resource'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleIamV1Policy>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleIamV1Policy>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.subscribe
     * @desc Creates a subscription for the environment's Pub/Sub topic. The server will assign a random name for this subscription. The "name" and "push_config" must *not* be specified.
     * @alias apigee.organizations.environments.subscribe
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    subscribe(
      params?: Params$Resource$Organizations$Environments$Subscribe,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Subscription>;
    subscribe(
      params: Params$Resource$Organizations$Environments$Subscribe,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Subscription>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Subscription>
    ): void;
    subscribe(
      params: Params$Resource$Organizations$Environments$Subscribe,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Subscription>
    ): void;
    subscribe(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Subscription>
    ): void;
    subscribe(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Subscribe
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Subscription>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Subscription>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Subscription>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Subscription> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Subscribe;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Subscribe;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}:subscribe').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Subscription>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Subscription>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.testIamPermissions
     * @desc Tests the permissions of a user on an environment, and returns a subset of permissions that the user has on the environment. If the environment does not exist, an empty permission set is returned (a NOT_FOUND error is not returned).
     * @alias apigee.organizations.environments.testIamPermissions
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.resource_ REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
     * @param {().GoogleIamV1TestIamPermissionsRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    testIamPermissions(
      params?: Params$Resource$Organizations$Environments$Testiampermissions,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleIamV1TestIamPermissionsResponse>;
    testIamPermissions(
      params: Params$Resource$Organizations$Environments$Testiampermissions,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleIamV1TestIamPermissionsResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleIamV1TestIamPermissionsResponse
      >
    ): void;
    testIamPermissions(
      params: Params$Resource$Organizations$Environments$Testiampermissions,
      callback: BodyResponseCallback<
        Schema$GoogleIamV1TestIamPermissionsResponse
      >
    ): void;
    testIamPermissions(
      callback: BodyResponseCallback<
        Schema$GoogleIamV1TestIamPermissionsResponse
      >
    ): void;
    testIamPermissions(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Testiampermissions
        | BodyResponseCallback<Schema$GoogleIamV1TestIamPermissionsResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleIamV1TestIamPermissionsResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleIamV1TestIamPermissionsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleIamV1TestIamPermissionsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Testiampermissions;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Testiampermissions;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['resource'],
        pathParams: ['resource'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleIamV1TestIamPermissionsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleIamV1TestIamPermissionsResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.unsubscribe
     * @desc Deletes a subscription for the environment's Pub/Sub topic.
     * @alias apigee.organizations.environments.unsubscribe
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     * @param {().GoogleCloudApigeeV1Subscription} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    unsubscribe(
      params?: Params$Resource$Organizations$Environments$Unsubscribe,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    unsubscribe(
      params: Params$Resource$Organizations$Environments$Unsubscribe,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    unsubscribe(
      params: Params$Resource$Organizations$Environments$Unsubscribe,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    unsubscribe(
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    unsubscribe(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Unsubscribe
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback?: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void | GaxiosPromise<Schema$GoogleProtobufEmpty> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Unsubscribe;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Unsubscribe;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}:unsubscribe').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.update
     * @desc Updates an existing environment.  When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get).
     * @alias apigee.organizations.environments.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     * @param {().GoogleCloudApigeeV1Environment} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Environments$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Environment>;
    update(
      params: Params$Resource$Organizations$Environments$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    update(
      params: Params$Resource$Organizations$Environments$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Environment> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Environment>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Environment>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.updateDebugmask
     * @desc Updates the debug mask singleton resource for an environment.
     * @alias apigee.organizations.environments.updateDebugmask
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Name of the debug mask.
     * @param {boolean=} params.replaceRepeatedFields Boolean flag that specifies whether to replace existing values in the debug mask when doing an update. Set to true to replace existing values. The default behavior is to append the values (false).
     * @param {string=} params.updateMask Field debug mask to support partial updates.
     * @param {().GoogleCloudApigeeV1DebugMask} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateDebugmask(
      params?: Params$Resource$Organizations$Environments$Updatedebugmask,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DebugMask>;
    updateDebugmask(
      params: Params$Resource$Organizations$Environments$Updatedebugmask,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void;
    updateDebugmask(
      params: Params$Resource$Organizations$Environments$Updatedebugmask,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void;
    updateDebugmask(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void;
    updateDebugmask(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Updatedebugmask
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugMask>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DebugMask> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Updatedebugmask;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Updatedebugmask;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DebugMask>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DebugMask>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.updateEnvironment
     * @desc Updates an existing environment.  When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get).
     * @alias apigee.organizations.environments.updateEnvironment
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     * @param {().GoogleCloudApigeeV1Environment} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateEnvironment(
      params?: Params$Resource$Organizations$Environments$Updateenvironment,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Environment>;
    updateEnvironment(
      params: Params$Resource$Organizations$Environments$Updateenvironment,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    updateEnvironment(
      params: Params$Resource$Organizations$Environments$Updateenvironment,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    updateEnvironment(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void;
    updateEnvironment(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Updateenvironment
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Environment>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Environment> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Updateenvironment;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Updateenvironment;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Environment>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Environment>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Optional. Name of the environment. Alternatively, the name may be specified in the request body in the environment_id field.
     */
    name?: string;
    /**
     * Required. Name of the organization in which the environment will be created. Use the following structure in your request:  `organizations/{org}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Environment;
  }
  export interface Params$Resource$Organizations$Environments$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Getdatalocation
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Content-Type for uploaded file.
     */
    contentType?: string;
    /**
     * Required. Dataset could be one of `api`, `mint`, `trace` and `event`
     */
    dataset?: string;
    /**
     * Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}/datalocation`.
     */
    name?: string;
    /**
     * Required. Relative path to the GCS bucket
     */
    relativeFilePath?: string;
    /**
     * Required. Repository name
     */
    repo?: string;
  }
  export interface Params$Resource$Organizations$Environments$Getdebugmask
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the debug mask. Use the following structure in your request:   `organizations/{org}/environments/{env}/debugmask`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Getdeployedconfig
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment deployed configuration resource. Use the following structure in your request:  `organizations/{org}/environments/{env}/deployedConfig`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Getiampolicy
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.
     */
    'options.requestedPolicyVersion'?: number;
    /**
     * REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
     */
    resource?: string;
  }
  export interface Params$Resource$Organizations$Environments$Setiampolicy
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
     */
    resource?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleIamV1SetIamPolicyRequest;
  }
  export interface Params$Resource$Organizations$Environments$Subscribe
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Environments$Testiampermissions
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
     */
    resource?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleIamV1TestIamPermissionsRequest;
  }
  export interface Params$Resource$Organizations$Environments$Unsubscribe
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Subscription;
  }
  export interface Params$Resource$Organizations$Environments$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Environment;
  }
  export interface Params$Resource$Organizations$Environments$Updatedebugmask
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Name of the debug mask.
     */
    name?: string;
    /**
     * Boolean flag that specifies whether to replace existing values in the debug mask when doing an update. Set to true to replace existing values. The default behavior is to append the values (false).
     */
    replaceRepeatedFields?: boolean;
    /**
     * Field debug mask to support partial updates.
     */
    updateMask?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DebugMask;
  }
  export interface Params$Resource$Organizations$Environments$Updateenvironment
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment. Use the following structure in your request:  `organizations/{org}/environments/{env}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Environment;
  }

  export class Resource$Organizations$Environments$Analytics {
    context: APIRequestContext;
    admin: Resource$Organizations$Environments$Analytics$Admin;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.admin = new Resource$Organizations$Environments$Analytics$Admin(
        this.context
      );
    }
  }

  export class Resource$Organizations$Environments$Analytics$Admin {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.analytics.admin.getSchemav2
     * @desc Get a list of metrics and dimensions which can be used for creating analytics queries and reports. Each schema element contains the name of the field with its associated type and if it is either custom field or standard field.
     * @alias apigee.organizations.environments.analytics.admin.getSchemav2
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}/analytics/admin/schemav2`.
     * @param {string=} params.type Required. Type refers to the dataset name whose schema needs to be retrieved E.g. type=fact or type=agg_cus1
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getSchemav2(
      params?: Params$Resource$Organizations$Environments$Analytics$Admin$Getschemav2,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Schema>;
    getSchemav2(
      params: Params$Resource$Organizations$Environments$Analytics$Admin$Getschemav2,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Schema>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Schema>
    ): void;
    getSchemav2(
      params: Params$Resource$Organizations$Environments$Analytics$Admin$Getschemav2,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Schema>
    ): void;
    getSchemav2(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Schema>
    ): void;
    getSchemav2(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Analytics$Admin$Getschemav2
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Schema>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Schema>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Schema>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Schema> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Analytics$Admin$Getschemav2;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Analytics$Admin$Getschemav2;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Schema>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Schema>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Analytics$Admin$Getschemav2
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}/analytics/admin/schemav2`.
     */
    name?: string;
    /**
     * Required. Type refers to the dataset name whose schema needs to be retrieved E.g. type=fact or type=agg_cus1
     */
    type?: string;
  }

  export class Resource$Organizations$Environments$Apis {
    context: APIRequestContext;
    deployments: Resource$Organizations$Environments$Apis$Deployments;
    revisions: Resource$Organizations$Environments$Apis$Revisions;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.deployments = new Resource$Organizations$Environments$Apis$Deployments(
        this.context
      );
      this.revisions = new Resource$Organizations$Environments$Apis$Revisions(
        this.context
      );
    }
  }

  export class Resource$Organizations$Environments$Apis$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.apis.deployments.list
     * @desc Lists all deployments of an API proxy in an environment.
     * @alias apigee.organizations.environments.apis.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name representing an API proxy in an environment in the following format:   `organizations/{org}/environments/{env}/apis/{api}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Environments$Apis$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Environments$Apis$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Environments$Apis$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Apis$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Apis$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Apis$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Apis$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name representing an API proxy in an environment in the following format:   `organizations/{org}/environments/{env}/apis/{api}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Environments$Apis$Revisions {
    context: APIRequestContext;
    debugsessions: Resource$Organizations$Environments$Apis$Revisions$Debugsessions;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.debugsessions = new Resource$Organizations$Environments$Apis$Revisions$Debugsessions(
        this.context
      );
    }

    /**
     * apigee.organizations.environments.apis.revisions.deployments
     * @desc Undeploys an API proxy revision from an environment.  Because multiple revisions of the same API proxy can be deployed in the same environment if the base paths are different, you must specify the revision number of the API proxy.
     * @alias apigee.organizations.environments.apis.revisions.deployments
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the API proxy revision deployment in the following format:   `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    deployments(
      params?: Params$Resource$Organizations$Environments$Apis$Revisions$Deployments,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    deployments(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Deployments,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deployments(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Deployments,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deployments(
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deployments(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Apis$Revisions$Deployments
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback?: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void | GaxiosPromise<Schema$GoogleProtobufEmpty> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Apis$Revisions$Deployments;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Apis$Revisions$Deployments;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.apis.revisions.getDeployments
     * @desc Gets the deployment of an API proxy revision and actual state reported by runtime pods.
     * @alias apigee.organizations.environments.apis.revisions.getDeployments
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name representing an API proxy revision in an environment in the following format:   `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getDeployments(
      params?: Params$Resource$Organizations$Environments$Apis$Revisions$Getdeployments,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Deployment>;
    getDeployments(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Getdeployments,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void;
    getDeployments(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Getdeployments,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void;
    getDeployments(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void;
    getDeployments(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Apis$Revisions$Getdeployments
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Deployment> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Apis$Revisions$Getdeployments;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Apis$Revisions$Getdeployments;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Deployment>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Deployment>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Apis$Revisions$Deployments
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API proxy revision deployment in the following format:   `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Apis$Revisions$Getdeployments
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name representing an API proxy revision in an environment in the following format:   `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
     */
    name?: string;
  }

  export class Resource$Organizations$Environments$Apis$Revisions$Debugsessions {
    context: APIRequestContext;
    data: Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.data = new Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data(
        this.context
      );
    }

    /**
     * apigee.organizations.environments.apis.revisions.debugsessions.create
     * @desc Creates a debug session for a deployed API Proxy revision.
     * @alias apigee.organizations.environments.apis.revisions.debugsessions.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The resource name of the API Proxy revision deployment for which to create the DebugSession. Must be of the form  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
     * @param {string=} params.timeout Optional. The time in seconds after which this DebugSession should end. A timeout specified in DebugSession will overwrite this value.
     * @param {().GoogleCloudApigeeV1DebugSession} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DebugSession>;
    create(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugSession>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugSession>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugSession>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugSession>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugSession>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugSession>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1DebugSession>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DebugSession> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/debugsessions').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DebugSession>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1DebugSession>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.apis.revisions.debugsessions.deleteData
     * @desc Deletes the data from a debug session. This does not cancel the debug session or prevent further data from being collected if the session is still active in runtime pods.
     * @alias apigee.organizations.environments.apis.revisions.debugsessions.deleteData
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the debug session to delete. Must be of the form:  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{debugsession}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    deleteData(
      params?: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Deletedata,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    deleteData(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Deletedata,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deleteData(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Deletedata,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deleteData(
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deleteData(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Deletedata
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback?: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void | GaxiosPromise<Schema$GoogleProtobufEmpty> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Deletedata;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Deletedata;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/data').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.apis.revisions.debugsessions.list
     * @desc Lists debug sessions that are currently active in the given API Proxy revision.
     * @alias apigee.organizations.environments.apis.revisions.debugsessions.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The name of the API Proxy revision deployment for which to list debug sessions. Must be of the form:  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDebugSessionsResponse>;
    list(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/debugsessions').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDebugSessionsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDebugSessionsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The resource name of the API Proxy revision deployment for which to create the DebugSession. Must be of the form  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
     */
    parent?: string;
    /**
     * Optional. The time in seconds after which this DebugSession should end. A timeout specified in DebugSession will overwrite this value.
     */
    timeout?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DebugSession;
  }
  export interface Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Deletedata
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the debug session to delete. Must be of the form:  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{debugsession}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the API Proxy revision deployment for which to list debug sessions. Must be of the form:  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
     */
    parent?: string;
  }

  export class Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.apis.revisions.debugsessions.data.get
     * @desc Gets the debug data from a transaction.
     * @alias apigee.organizations.environments.apis.revisions.debugsessions.data.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the debug session transaction. Must be of the form:  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{session}/data/{transaction}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DebugSessionTransaction>;
    get(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DebugSessionTransaction
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DebugSessionTransaction
      >
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data$Get,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DebugSessionTransaction
      >
    ): void;
    get(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DebugSessionTransaction
      >
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data$Get
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DebugSessionTransaction
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DebugSessionTransaction
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DebugSessionTransaction
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DebugSessionTransaction> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DebugSessionTransaction>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1DebugSessionTransaction
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Apis$Revisions$Debugsessions$Data$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the debug session transaction. Must be of the form:  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{session}/data/{transaction}`.
     */
    name?: string;
  }

  export class Resource$Organizations$Environments$Caches {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.caches.delete
     * @desc Deletes a cache.
     * @alias apigee.organizations.environments.caches.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Cache resource name of the form:     `organizations/{organization_id}/environments/{environment_id}/caches/{cache_id}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$Caches$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    delete(
      params: Params$Resource$Organizations$Environments$Caches$Delete,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$Caches$Delete,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Caches$Delete
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback?: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void | GaxiosPromise<Schema$GoogleProtobufEmpty> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Caches$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Caches$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Caches$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Cache resource name of the form:     `organizations/{organization_id}/environments/{environment_id}/caches/{cache_id}`
     */
    name?: string;
  }

  export class Resource$Organizations$Environments$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.deployments.list
     * @desc Lists all deployments of API proxies or shared flows in an environment.
     * @alias apigee.organizations.environments.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the environment for which to return deployment information in the following format:   `organizations/{org}/environments/{env}`
     * @param {boolean=} params.sharedFlows Optional. Flag that specifies whether to return shared flow or API proxy deployments. Set to `true` to return shared flow deployments; set to `false` to return API proxy deployments. Defaults to `false`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Environments$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Environments$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Environments$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment for which to return deployment information in the following format:   `organizations/{org}/environments/{env}`
     */
    parent?: string;
    /**
     * Optional. Flag that specifies whether to return shared flow or API proxy deployments. Set to `true` to return shared flow deployments; set to `false` to return API proxy deployments. Defaults to `false`.
     */
    sharedFlows?: boolean;
  }

  export class Resource$Organizations$Environments$Flowhooks {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.flowhooks.attachSharedFlowToFlowHook
     * @desc Attaches a shared flow to a flow hook.
     * @alias apigee.organizations.environments.flowhooks.attachSharedFlowToFlowHook
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the flow hook to which the shared flow should be attached in the following format:   `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
     * @param {().GoogleCloudApigeeV1FlowHook} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    attachSharedFlowToFlowHook(
      params?: Params$Resource$Organizations$Environments$Flowhooks$Attachsharedflowtoflowhook,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1FlowHook>;
    attachSharedFlowToFlowHook(
      params: Params$Resource$Organizations$Environments$Flowhooks$Attachsharedflowtoflowhook,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    attachSharedFlowToFlowHook(
      params: Params$Resource$Organizations$Environments$Flowhooks$Attachsharedflowtoflowhook,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    attachSharedFlowToFlowHook(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    attachSharedFlowToFlowHook(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Flowhooks$Attachsharedflowtoflowhook
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1FlowHook> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Flowhooks$Attachsharedflowtoflowhook;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Flowhooks$Attachsharedflowtoflowhook;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1FlowHook>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1FlowHook>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.flowhooks.detachSharedFlowFromFlowHook
     * @desc Detaches a shared flow from a flow hook.
     * @alias apigee.organizations.environments.flowhooks.detachSharedFlowFromFlowHook
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the flow hook to detach in the following format:   `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    detachSharedFlowFromFlowHook(
      params?: Params$Resource$Organizations$Environments$Flowhooks$Detachsharedflowfromflowhook,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1FlowHook>;
    detachSharedFlowFromFlowHook(
      params: Params$Resource$Organizations$Environments$Flowhooks$Detachsharedflowfromflowhook,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    detachSharedFlowFromFlowHook(
      params: Params$Resource$Organizations$Environments$Flowhooks$Detachsharedflowfromflowhook,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    detachSharedFlowFromFlowHook(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    detachSharedFlowFromFlowHook(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Flowhooks$Detachsharedflowfromflowhook
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1FlowHook> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Flowhooks$Detachsharedflowfromflowhook;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Flowhooks$Detachsharedflowfromflowhook;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1FlowHook>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1FlowHook>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.flowhooks.get
     * @desc Returns the name of the shared flow attached to the specified flow hook. If there's no shared flow attached to the flow hook, the API does not return an error; it simply does not return a name in the response.
     * @alias apigee.organizations.environments.flowhooks.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the flow hook in the following format:   `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Flowhooks$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1FlowHook>;
    get(
      params: Params$Resource$Organizations$Environments$Flowhooks$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Flowhooks$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Flowhooks$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1FlowHook>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1FlowHook> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Flowhooks$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Flowhooks$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1FlowHook>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1FlowHook>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Flowhooks$Attachsharedflowtoflowhook
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the flow hook to which the shared flow should be attached in the following format:   `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1FlowHook;
  }
  export interface Params$Resource$Organizations$Environments$Flowhooks$Detachsharedflowfromflowhook
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the flow hook to detach in the following format:   `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Flowhooks$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the flow hook in the following format:   `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
     */
    name?: string;
  }

  export class Resource$Organizations$Environments$Keystores {
    context: APIRequestContext;
    aliases: Resource$Organizations$Environments$Keystores$Aliases;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.aliases = new Resource$Organizations$Environments$Keystores$Aliases(
        this.context
      );
    }

    /**
     * apigee.organizations.environments.keystores.create
     * @desc Creates a keystore or truststore:  * Keystore: Contains certificates and their associated keys.  * Truststore: Contains trusted certificates used to validate a  server's certificate. These certificates are typically self-signed  certificates or certificates that are not signed by a trusted CA.
     * @alias apigee.organizations.environments.keystores.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.name Optional. Overrides the value in Keystore.
     * @param {string} params.parent Required. The name of the environment in which to create the keystore. Must be of the form `organizations/{organization}/environments/{environment}`.
     * @param {().GoogleCloudApigeeV1Keystore} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Keystores$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Keystore>;
    create(
      params: Params$Resource$Organizations$Environments$Keystores$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Keystores$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Keystore> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keystores').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Keystore>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Keystore>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.keystores.delete
     * @desc Deletes a keystore or truststore.
     * @alias apigee.organizations.environments.keystores.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of keystore to delete. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$Keystores$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Keystore>;
    delete(
      params: Params$Resource$Organizations$Environments$Keystores$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$Keystores$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Keystore> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Keystore>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Keystore>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.keystores.get
     * @desc Gets a keystore or truststore.
     * @alias apigee.organizations.environments.keystores.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of keystore. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Keystores$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Keystore>;
    get(
      params: Params$Resource$Organizations$Environments$Keystores$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Keystores$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Keystore>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Keystore> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Keystore>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Keystore>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Keystores$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Optional. Overrides the value in Keystore.
     */
    name?: string;
    /**
     * Required. The name of the environment in which to create the keystore. Must be of the form `organizations/{organization}/environments/{environment}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Keystore;
  }
  export interface Params$Resource$Organizations$Environments$Keystores$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of keystore to delete. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Keystores$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of keystore. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
     */
    name?: string;
  }

  export class Resource$Organizations$Environments$Keystores$Aliases {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.keystores.aliases.create
     * @desc Creates an alias from a key, certificate pair. The structure of the request is controlled by the `format` query parameter:  * `keycertfile` - Separate PEM-encoded key and certificate files are  uploaded. The request must have `Content-Type: multipart/form-data` and  include fields `keyFile` and `certFile`. If uploading to a truststore,  omit `keyFile`. * `pkcs12` - A PKCS12 file is uploaded. The request must have `Content-Type: multipart/form-data` with the file provided in the only field. * `selfsignedcert` - A new private key and certificate are generated. The request must have `Content-Type: application/json` and a body of CertificateGenerationSpec.
     * @alias apigee.organizations.environments.keystores.aliases.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.alias The alias for the key, certificate pair. Values must match regular expression `[\w\s-.]{1,255}`. This must be provided for all formats except 'selfsignedcert'; self-signed certs may specify the alias in either this parameter or the JSON body.
     * @param {string=} params.format Required. The format of the data. Must be either `selfsignedcert`, `keycertfile`, or `pkcs12`.
     * @param {boolean=} params.ignoreExpiryValidation If `true`, no expiry validation will be performed.
     * @param {boolean=} params.ignoreNewlineValidation If `true`, do not throw an error when the file contains a chain with no newline between each certificate. By default, a newline is needed between each certificate in a chain.
     * @param {string} params.parent Required. The name of the keystore. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
     * @param {string=} params._password The password for the private key file, if it exists.
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Keystores$Aliases$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Alias>;
    create(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Aliases$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Alias> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Aliases$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Aliases$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/aliases').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.keystores.aliases.csr
     * @desc Generates a PKCS #10 Certificate Signing Request for the private key in an alias.
     * @alias apigee.organizations.environments.keystores.aliases.csr
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    csr(
      params?: Params$Resource$Organizations$Environments$Keystores$Aliases$Csr,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleApiHttpBody>;
    csr(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Csr,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    csr(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Csr,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    csr(callback: BodyResponseCallback<Schema$GoogleApiHttpBody>): void;
    csr(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Aliases$Csr
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback?: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void | GaxiosPromise<Schema$GoogleApiHttpBody> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Aliases$Csr;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Aliases$Csr;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/csr').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleApiHttpBody>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleApiHttpBody>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.keystores.aliases.delete
     * @desc Deletes an alias.
     * @alias apigee.organizations.environments.keystores.aliases.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$Keystores$Aliases$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Alias>;
    delete(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Aliases$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Alias> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Aliases$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Aliases$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.keystores.aliases.get
     * @desc Gets an alias.
     * @alias apigee.organizations.environments.keystores.aliases.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Keystores$Aliases$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Alias>;
    get(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Aliases$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Alias> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Aliases$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Aliases$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.keystores.aliases.getCertificate
     * @desc Gets the certificate from an alias in PEM-encoded form.
     * @alias apigee.organizations.environments.keystores.aliases.getCertificate
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getCertificate(
      params?: Params$Resource$Organizations$Environments$Keystores$Aliases$Getcertificate,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleApiHttpBody>;
    getCertificate(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Getcertificate,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    getCertificate(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Getcertificate,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    getCertificate(
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    getCertificate(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Aliases$Getcertificate
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback?: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void | GaxiosPromise<Schema$GoogleApiHttpBody> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Aliases$Getcertificate;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Aliases$Getcertificate;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/certificate').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleApiHttpBody>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleApiHttpBody>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.keystores.aliases.update
     * @desc Updates the certificate in an alias.
     * @alias apigee.organizations.environments.keystores.aliases.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.ignoreExpiryValidation Required. If `true`, no expiry validation will be performed.
     * @param {boolean=} params.ignoreNewlineValidation If `true`, do not throw an error when the file contains a chain with no newline between each certificate. By default, a newline is needed between each certificate in a chain.
     * @param {string} params.name Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Environments$Keystores$Aliases$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Alias>;
    update(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    update(
      params: Params$Resource$Organizations$Environments$Keystores$Aliases$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keystores$Aliases$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Alias>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Alias> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keystores$Aliases$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keystores$Aliases$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Alias>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Keystores$Aliases$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * The alias for the key, certificate pair. Values must match regular expression `[\w\s-.]{1,255}`. This must be provided for all formats except 'selfsignedcert'; self-signed certs may specify the alias in either this parameter or the JSON body.
     */
    alias?: string;
    /**
     * Required. The format of the data. Must be either `selfsignedcert`, `keycertfile`, or `pkcs12`.
     */
    format?: string;
    /**
     * If `true`, no expiry validation will be performed.
     */
    ignoreExpiryValidation?: boolean;
    /**
     * If `true`, do not throw an error when the file contains a chain with no newline between each certificate. By default, a newline is needed between each certificate in a chain.
     */
    ignoreNewlineValidation?: boolean;
    /**
     * Required. The name of the keystore. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
     */
    parent?: string;
    /**
     * The password for the private key file, if it exists.
     */
    _password?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }
  export interface Params$Resource$Organizations$Environments$Keystores$Aliases$Csr
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Keystores$Aliases$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Keystores$Aliases$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Keystores$Aliases$Getcertificate
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Keystores$Aliases$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. If `true`, no expiry validation will be performed.
     */
    ignoreExpiryValidation?: boolean;
    /**
     * If `true`, do not throw an error when the file contains a chain with no newline between each certificate. By default, a newline is needed between each certificate in a chain.
     */
    ignoreNewlineValidation?: boolean;
    /**
     * Required. The name of the alias. Must be of the form `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }

  export class Resource$Organizations$Environments$Keyvaluemaps {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.keyvaluemaps.create
     * @desc Creates a key value map in an environment.
     * @alias apigee.organizations.environments.keyvaluemaps.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The name of the environment in which to create the key value map. Must be of the form `organizations/{organization}/environments/{environment}`.
     * @param {().GoogleCloudApigeeV1KeyValueMap} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Keyvaluemaps$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap>;
    create(
      params: Params$Resource$Organizations$Environments$Keyvaluemaps$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Keyvaluemaps$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keyvaluemaps$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keyvaluemaps$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keyvaluemaps$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keyvaluemaps').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.keyvaluemaps.delete
     * @desc Delete a key value map in an environment.
     * @alias apigee.organizations.environments.keyvaluemaps.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the key value map. Must be of the form `organizations/{organization}/environments/{environment}/keyvaluemaps/{keyvaluemap}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$Keyvaluemaps$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap>;
    delete(
      params: Params$Resource$Organizations$Environments$Keyvaluemaps$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$Keyvaluemaps$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Keyvaluemaps$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Keyvaluemaps$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Keyvaluemaps$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Keyvaluemaps$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the environment in which to create the key value map. Must be of the form `organizations/{organization}/environments/{environment}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1KeyValueMap;
  }
  export interface Params$Resource$Organizations$Environments$Keyvaluemaps$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the key value map. Must be of the form `organizations/{organization}/environments/{environment}/keyvaluemaps/{keyvaluemap}`.
     */
    name?: string;
  }

  export class Resource$Organizations$Environments$Optimizedstats {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.optimizedStats.get
     * @desc This api is similar to GetStats except that the response is less verbose. In the current scheme, a query parameter _optimized instructs Edge Analytics to change the response but since this behavior is not possible with protocol buffer and since this parameter is predominantly used by Edge UI, we are introducing a separate api.
     * @alias apigee.organizations.environments.optimizedStats.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.accuracy Legacy field. not used anymore
     * @param {string=} params.aggTable If customers want to query custom aggregate tables, then this parameter can be used to specify the table name. If this parameter is skipped, then Edge Query will try to retrieve the data from fact tables which will be expensive.
     * @param {string=} params.filter Enables drill-down on specific dimension values
     * @param {string=} params.limit This parameter is used to limit the number of result items. Default and the max value is 14400
     * @param {string} params.name Required. The organization and environment name for which the interactive query will be executed. Must be of the form   `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}` Dimensions let you view metrics in meaningful groupings. E.g. apiproxy, target_host. The value of dimensions should be comma separated list as shown below `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
     * @param {string=} params.offset Use offset with limit to enable pagination of results. For example, to display results 11-20, set limit to '10' and offset to '10'.
     * @param {boolean=} params.realtime Legacy field: not used anymore
     * @param {string=} params.select Required. The select parameter contains a comma separated list of metrics E.g. sum(message_count),sum(error_count)
     * @param {boolean=} params.sonar This parameter routes the query to api monitoring service for last hour
     * @param {string=} params.sort This parameter specifies if the sort order should be ascending or descending Supported values are DESC and ASC.
     * @param {string=} params.sortby Comma separated list of columns to sort the final result.
     * @param {string=} params.timeRange Required. Time interval for the interactive query. Time range is specified as start~end E.g. 04/15/2017 00:00~05/15/2017 23:59
     * @param {string=} params.timeUnit A value of second, minute, hour, day, week, month. Time Unit specifies the granularity of metrics returned.
     * @param {string=} params.topk Take 'top k' results from results, for example, to return the top 5 results 'topk=5'.
     * @param {boolean=} params.tsAscending Lists timestamps in ascending order if set to true. Recommend setting this value to true if you are using sortby with sort=DESC.
     * @param {string=} params.tzo This parameters contains the timezone offset value
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Optimizedstats$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1OptimizedStats>;
    get(
      params: Params$Resource$Organizations$Environments$Optimizedstats$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1OptimizedStats>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1OptimizedStats>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Optimizedstats$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1OptimizedStats>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1OptimizedStats>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Optimizedstats$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1OptimizedStats>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1OptimizedStats>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1OptimizedStats>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1OptimizedStats> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Optimizedstats$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Optimizedstats$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1OptimizedStats>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1OptimizedStats>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Optimizedstats$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Legacy field. not used anymore
     */
    accuracy?: string;
    /**
     * If customers want to query custom aggregate tables, then this parameter can be used to specify the table name. If this parameter is skipped, then Edge Query will try to retrieve the data from fact tables which will be expensive.
     */
    aggTable?: string;
    /**
     * Enables drill-down on specific dimension values
     */
    filter?: string;
    /**
     * This parameter is used to limit the number of result items. Default and the max value is 14400
     */
    limit?: string;
    /**
     * Required. The organization and environment name for which the interactive query will be executed. Must be of the form   `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}` Dimensions let you view metrics in meaningful groupings. E.g. apiproxy, target_host. The value of dimensions should be comma separated list as shown below `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
     */
    name?: string;
    /**
     * Use offset with limit to enable pagination of results. For example, to display results 11-20, set limit to '10' and offset to '10'.
     */
    offset?: string;
    /**
     * Legacy field: not used anymore
     */
    realtime?: boolean;
    /**
     * Required. The select parameter contains a comma separated list of metrics E.g. sum(message_count),sum(error_count)
     */
    select?: string;
    /**
     * This parameter routes the query to api monitoring service for last hour
     */
    sonar?: boolean;
    /**
     * This parameter specifies if the sort order should be ascending or descending Supported values are DESC and ASC.
     */
    sort?: string;
    /**
     * Comma separated list of columns to sort the final result.
     */
    sortby?: string;
    /**
     * Required. Time interval for the interactive query. Time range is specified as start~end E.g. 04/15/2017 00:00~05/15/2017 23:59
     */
    timeRange?: string;
    /**
     * A value of second, minute, hour, day, week, month. Time Unit specifies the granularity of metrics returned.
     */
    timeUnit?: string;
    /**
     * Take 'top k' results from results, for example, to return the top 5 results 'topk=5'.
     */
    topk?: string;
    /**
     * Lists timestamps in ascending order if set to true. Recommend setting this value to true if you are using sortby with sort=DESC.
     */
    tsAscending?: boolean;
    /**
     * This parameters contains the timezone offset value
     */
    tzo?: string;
  }

  export class Resource$Organizations$Environments$Queries {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.queries.create
     * @desc Submit a query to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
     * @alias apigee.organizations.environments.queries.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}`.
     * @param {().GoogleCloudApigeeV1Query} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Queries$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1AsyncQuery>;
    create(
      params: Params$Resource$Organizations$Environments$Queries$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Queries$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Queries$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1AsyncQuery> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Queries$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Queries$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/queries').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1AsyncQuery>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1AsyncQuery>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.queries.get
     * @desc Get query status If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
     * @alias apigee.organizations.environments.queries.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the asynchronous query to get. Must be of the form `organizations/{org}/environments/{env}/queries/{queryId}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Queries$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1AsyncQuery>;
    get(
      params: Params$Resource$Organizations$Environments$Queries$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Queries$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Queries$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQuery>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1AsyncQuery> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Queries$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Queries$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1AsyncQuery>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1AsyncQuery>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.queries.getResult
     * @desc After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be:   OfflineQueryResult-<query-id>.zip  Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
     * @alias apigee.organizations.environments.queries.getResult
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the asynchronous query result to get. Must be of the form `organizations/{org}/environments/{env}/queries/{queryId}/result`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getResult(
      params?: Params$Resource$Organizations$Environments$Queries$Getresult,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleApiHttpBody>;
    getResult(
      params: Params$Resource$Organizations$Environments$Queries$Getresult,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    getResult(
      params: Params$Resource$Organizations$Environments$Queries$Getresult,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    getResult(callback: BodyResponseCallback<Schema$GoogleApiHttpBody>): void;
    getResult(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Queries$Getresult
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback?: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void | GaxiosPromise<Schema$GoogleApiHttpBody> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Queries$Getresult;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Queries$Getresult;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleApiHttpBody>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleApiHttpBody>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.queries.getResultView
     * @alias apigee.organizations.environments.queries.getResultView
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the asynchronous query result view to get. Must be of the form `organizations/{org}/environments/{env}/queries/{queryId}/resultView`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getResultView(
      params?: Params$Resource$Organizations$Environments$Queries$Getresultview,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1AsyncQueryResultView>;
    getResultView(
      params: Params$Resource$Organizations$Environments$Queries$Getresultview,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQueryResultView>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1AsyncQueryResultView
      >
    ): void;
    getResultView(
      params: Params$Resource$Organizations$Environments$Queries$Getresultview,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1AsyncQueryResultView
      >
    ): void;
    getResultView(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1AsyncQueryResultView
      >
    ): void;
    getResultView(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Queries$Getresultview
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQueryResultView>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1AsyncQueryResultView>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1AsyncQueryResultView
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1AsyncQueryResultView> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Queries$Getresultview;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Queries$Getresultview;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1AsyncQueryResultView>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1AsyncQueryResultView>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.queries.list
     * @desc Return a list of Asynchronous Queries
     * @alias apigee.organizations.environments.queries.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.dataset Filter response list by dataset.  Example: `api`, `mint`
     * @param {string=} params.from Filter response list by returning asynchronous queries that created after this date time. Time must be in ISO date-time format like '2011-12-03T10:15:30Z'.
     * @param {string=} params.inclQueriesWithoutReport Flag to include asynchronous queries that don't have a report denifition.
     * @param {string} params.parent Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}`.
     * @param {string=} params.status Filter response list by asynchronous query status
     * @param {string=} params.submittedBy Filter response list by user who submitted queries
     * @param {string=} params.to Filter response list by returning asynchronous queries that created before this date time. Time must be in ISO date-time format like '2011-12-03T10:16:30Z'.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Environments$Queries$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse>;
    list(
      params: Params$Resource$Organizations$Environments$Queries$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Environments$Queries$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Queries$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Queries$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Queries$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/queries').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListAsyncQueriesResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Queries$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Query;
  }
  export interface Params$Resource$Organizations$Environments$Queries$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the asynchronous query to get. Must be of the form `organizations/{org}/environments/{env}/queries/{queryId}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Queries$Getresult
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the asynchronous query result to get. Must be of the form `organizations/{org}/environments/{env}/queries/{queryId}/result`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Queries$Getresultview
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the asynchronous query result view to get. Must be of the form `organizations/{org}/environments/{env}/queries/{queryId}/resultView`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Queries$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Filter response list by dataset.  Example: `api`, `mint`
     */
    dataset?: string;
    /**
     * Filter response list by returning asynchronous queries that created after this date time. Time must be in ISO date-time format like '2011-12-03T10:15:30Z'.
     */
    from?: string;
    /**
     * Flag to include asynchronous queries that don't have a report denifition.
     */
    inclQueriesWithoutReport?: string;
    /**
     * Required. The parent organization and environment names. Must be of the form `organizations/{org}/environments/{env}`.
     */
    parent?: string;
    /**
     * Filter response list by asynchronous query status
     */
    status?: string;
    /**
     * Filter response list by user who submitted queries
     */
    submittedBy?: string;
    /**
     * Filter response list by returning asynchronous queries that created before this date time. Time must be in ISO date-time format like '2011-12-03T10:16:30Z'.
     */
    to?: string;
  }

  export class Resource$Organizations$Environments$References {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.references.create
     * @desc Creates a Reference in the specified environment.
     * @alias apigee.organizations.environments.references.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The parent environment name under which the Reference will be created. Must be of the form `organizations/{org}/environments/{env}`.
     * @param {().GoogleCloudApigeeV1Reference} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$References$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Reference>;
    create(
      params: Params$Resource$Organizations$Environments$References$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$References$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$References$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Reference> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$References$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$References$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/references').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.references.delete
     * @desc Deletes a Reference from an environment. Returns the deleted Reference resource.
     * @alias apigee.organizations.environments.references.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the Reference to delete. Must be of the form `organizations/{org}/environments/{env}/references/{ref}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$References$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Reference>;
    delete(
      params: Params$Resource$Organizations$Environments$References$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$References$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$References$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Reference> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$References$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$References$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.references.get
     * @desc Gets a Reference resource.
     * @alias apigee.organizations.environments.references.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the Reference to get. Must be of the form `organizations/{org}/environments/{env}/references/{ref}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$References$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Reference>;
    get(
      params: Params$Resource$Organizations$Environments$References$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$References$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$References$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Reference> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$References$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$References$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.references.update
     * @desc Updates an existing Reference. Note that this operation has PUT semantics; it will replace the entirety of the existing Reference with the resource in the request body.
     * @alias apigee.organizations.environments.references.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the Reference to update. Must be of the form `organizations/{org}/environments/{env}/references/{ref}`.
     * @param {().GoogleCloudApigeeV1Reference} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Environments$References$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Reference>;
    update(
      params: Params$Resource$Organizations$Environments$References$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    update(
      params: Params$Resource$Organizations$Environments$References$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$References$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Reference>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Reference> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$References$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$References$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Reference>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$References$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The parent environment name under which the Reference will be created. Must be of the form `organizations/{org}/environments/{env}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Reference;
  }
  export interface Params$Resource$Organizations$Environments$References$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the Reference to delete. Must be of the form `organizations/{org}/environments/{env}/references/{ref}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$References$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the Reference to get. Must be of the form `organizations/{org}/environments/{env}/references/{ref}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$References$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the Reference to update. Must be of the form `organizations/{org}/environments/{env}/references/{ref}`.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Reference;
  }

  export class Resource$Organizations$Environments$Resourcefiles {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.resourcefiles.create
     * @desc Creates a resource file.  Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`.  For more information about resource files, see [Resource files](/api-platform/develop/resource-files).
     * @alias apigee.organizations.environments.resourcefiles.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.name Required. Name of the resource file.  Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     * @param {string} params.parent Required. Name of the environment in which to create the resource file in the following format:   `organizations/{org}/environments/{env}`.
     * @param {string=} params.type Required. Resource file type. {{ resource_file_type }}
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Resourcefiles$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ResourceFile>;
    create(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Resourcefiles$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ResourceFile> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Resourcefiles$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Resourcefiles$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/resourcefiles').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ResourceFile>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ResourceFile>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.resourcefiles.delete
     * @desc Deletes a resource file.  For more information about resource files, see [Resource files](/api-platform/develop/resource-files).
     * @alias apigee.organizations.environments.resourcefiles.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the resource file to delete. Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     * @param {string} params.parent Required. Name of the environment in the following format:   `organizations/{org}/environments/{env}`.
     * @param {string} params.type Required. Resource file type. {{ resource_file_type }}
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$Resourcefiles$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ResourceFile>;
    delete(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Resourcefiles$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ResourceFile> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Resourcefiles$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Resourcefiles$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/v1/{+parent}/resourcefiles/{type}/{name}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['parent', 'type', 'name'],
        pathParams: ['name', 'parent', 'type'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ResourceFile>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ResourceFile>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.resourcefiles.get
     * @desc Gets the contents of a resource file.  For more information about resource files, see [Resource files](/api-platform/develop/resource-files).
     * @alias apigee.organizations.environments.resourcefiles.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the resource file. Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     * @param {string} params.parent Required. Name of the environment in the following format:   `organizations/{org}/environments/{env}`.
     * @param {string} params.type Required. Resource file type.  {{ resource_file_type }}
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Resourcefiles$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleApiHttpBody>;
    get(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Get,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Get,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleApiHttpBody>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Resourcefiles$Get
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback?: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void | GaxiosPromise<Schema$GoogleApiHttpBody> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Resourcefiles$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Resourcefiles$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/v1/{+parent}/resourcefiles/{type}/{name}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent', 'type', 'name'],
        pathParams: ['name', 'parent', 'type'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleApiHttpBody>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleApiHttpBody>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.resourcefiles.list
     * @desc Lists all resource files.  For more information about resource files, see [Resource files](/api-platform/develop/resource-files).
     * @alias apigee.organizations.environments.resourcefiles.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the environment in which to list resource files in the following format:   `organizations/{org}/environments/{env}`.
     * @param {string=} params.type Optional. Type of resource files to list. {{ resource_file_type }}
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Environments$Resourcefiles$List,
      options?: MethodOptions
    ): GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
    >;
    list(
      params: Params$Resource$Organizations$Environments$Resourcefiles$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Environments$Resourcefiles$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Resourcefiles$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Resourcefiles$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Resourcefiles$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/resourcefiles').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.environments.resourcefiles.listEnvironmentResources
     * @desc Lists all resource files.  For more information about resource files, see [Resource files](/api-platform/develop/resource-files).
     * @alias apigee.organizations.environments.resourcefiles.listEnvironmentResources
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the environment in which to list resource files in the following format:   `organizations/{org}/environments/{env}`.
     * @param {string} params.type Optional. Type of resource files to list. {{ resource_file_type }}
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    listEnvironmentResources(
      params?: Params$Resource$Organizations$Environments$Resourcefiles$Listenvironmentresources,
      options?: MethodOptions
    ): GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
    >;
    listEnvironmentResources(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Listenvironmentresources,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void;
    listEnvironmentResources(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Listenvironmentresources,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void;
    listEnvironmentResources(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void;
    listEnvironmentResources(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Resourcefiles$Listenvironmentresources
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Resourcefiles$Listenvironmentresources;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Resourcefiles$Listenvironmentresources;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/resourcefiles/{type}').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent', 'type'],
        pathParams: ['parent', 'type'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListEnvironmentResourcesResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.environments.resourcefiles.update
     * @desc Updates a resource file.  Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`.  For more information about resource files, see [Resource files](/api-platform/develop/resource-files).
     * @alias apigee.organizations.environments.resourcefiles.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the resource file to update. Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     * @param {string} params.parent Required. Name of the environment in the following format:   `organizations/{org}/environments/{env}`.
     * @param {string} params.type Required. Resource file type. {{ resource_file_type }}
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Environments$Resourcefiles$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ResourceFile>;
    update(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    update(
      params: Params$Resource$Organizations$Environments$Resourcefiles$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Resourcefiles$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ResourceFile>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ResourceFile> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Resourcefiles$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Resourcefiles$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/v1/{+parent}/resourcefiles/{type}/{name}'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['parent', 'type', 'name'],
        pathParams: ['name', 'parent', 'type'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ResourceFile>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ResourceFile>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Resourcefiles$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the resource file.  Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     */
    name?: string;
    /**
     * Required. Name of the environment in which to create the resource file in the following format:   `organizations/{org}/environments/{env}`.
     */
    parent?: string;
    /**
     * Required. Resource file type. {{ resource_file_type }}
     */
    type?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }
  export interface Params$Resource$Organizations$Environments$Resourcefiles$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the resource file to delete. Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     */
    name?: string;
    /**
     * Required. Name of the environment in the following format:   `organizations/{org}/environments/{env}`.
     */
    parent?: string;
    /**
     * Required. Resource file type. {{ resource_file_type }}
     */
    type?: string;
  }
  export interface Params$Resource$Organizations$Environments$Resourcefiles$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the resource file. Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     */
    name?: string;
    /**
     * Required. Name of the environment in the following format:   `organizations/{org}/environments/{env}`.
     */
    parent?: string;
    /**
     * Required. Resource file type.  {{ resource_file_type }}
     */
    type?: string;
  }
  export interface Params$Resource$Organizations$Environments$Resourcefiles$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment in which to list resource files in the following format:   `organizations/{org}/environments/{env}`.
     */
    parent?: string;
    /**
     * Optional. Type of resource files to list. {{ resource_file_type }}
     */
    type?: string;
  }
  export interface Params$Resource$Organizations$Environments$Resourcefiles$Listenvironmentresources
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the environment in which to list resource files in the following format:   `organizations/{org}/environments/{env}`.
     */
    parent?: string;
    /**
     * Optional. Type of resource files to list. {{ resource_file_type }}
     */
    type?: string;
  }
  export interface Params$Resource$Organizations$Environments$Resourcefiles$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the resource file to update. Must match the regular expression: <var>[a-zA-Z0-9:/\\!@#$%^&{}\[\]()+\-=,.~'` ]{1,255}</var>
     */
    name?: string;
    /**
     * Required. Name of the environment in the following format:   `organizations/{org}/environments/{env}`.
     */
    parent?: string;
    /**
     * Required. Resource file type. {{ resource_file_type }}
     */
    type?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }

  export class Resource$Organizations$Environments$Sharedflows {
    context: APIRequestContext;
    deployments: Resource$Organizations$Environments$Sharedflows$Deployments;
    revisions: Resource$Organizations$Environments$Sharedflows$Revisions;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.deployments = new Resource$Organizations$Environments$Sharedflows$Deployments(
        this.context
      );
      this.revisions = new Resource$Organizations$Environments$Sharedflows$Revisions(
        this.context
      );
    }
  }

  export class Resource$Organizations$Environments$Sharedflows$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.sharedflows.deployments.list
     * @desc Lists all deployments of a shared flow in an environment.
     * @alias apigee.organizations.environments.sharedflows.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name representing a shared flow in an environment in the following format:   `organizations/{org}/environments/{env}/sharedflows/{sharedflow}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Environments$Sharedflows$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Environments$Sharedflows$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Environments$Sharedflows$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Sharedflows$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Sharedflows$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Sharedflows$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Sharedflows$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name representing a shared flow in an environment in the following format:   `organizations/{org}/environments/{env}/sharedflows/{sharedflow}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Environments$Sharedflows$Revisions {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.sharedflows.revisions.deployments
     * @desc Undeploys a shared flow revision from an environment.
     * @alias apigee.organizations.environments.sharedflows.revisions.deployments
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the shared flow revision to undeploy in the following format:   `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    deployments(
      params?: Params$Resource$Organizations$Environments$Sharedflows$Revisions$Deployments,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    deployments(
      params: Params$Resource$Organizations$Environments$Sharedflows$Revisions$Deployments,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deployments(
      params: Params$Resource$Organizations$Environments$Sharedflows$Revisions$Deployments,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deployments(
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    deployments(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Sharedflows$Revisions$Deployments
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback?: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void | GaxiosPromise<Schema$GoogleProtobufEmpty> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Sharedflows$Revisions$Deployments;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Sharedflows$Revisions$Deployments;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * apigee.organizations.environments.sharedflows.revisions.getDeployments
     * @desc Gets the deployment of a shared flow revision and actual state reported by runtime pods.
     * @alias apigee.organizations.environments.sharedflows.revisions.getDeployments
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name representing a shared flow in an environment in the following format:   `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getDeployments(
      params?: Params$Resource$Organizations$Environments$Sharedflows$Revisions$Getdeployments,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Deployment>;
    getDeployments(
      params: Params$Resource$Organizations$Environments$Sharedflows$Revisions$Getdeployments,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void;
    getDeployments(
      params: Params$Resource$Organizations$Environments$Sharedflows$Revisions$Getdeployments,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void;
    getDeployments(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void;
    getDeployments(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Sharedflows$Revisions$Getdeployments
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Deployment>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Deployment> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Sharedflows$Revisions$Getdeployments;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Sharedflows$Revisions$Getdeployments;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Deployment>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Deployment>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Sharedflows$Revisions$Deployments
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the shared flow revision to undeploy in the following format:   `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Sharedflows$Revisions$Getdeployments
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name representing a shared flow in an environment in the following format:   `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
     */
    name?: string;
  }

  export class Resource$Organizations$Environments$Stats {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.stats.get
     * @desc Retrieve metrics grouped by dimensions. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. The stats api does accept dimensions as path params. The dimensions are optional in which case the metrics are computed on the entire data for the given timerange.
     * @alias apigee.organizations.environments.stats.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.accuracy Legacy field. not used anymore This field is present to support UI calls which still use this parameter
     * @param {string=} params.aggTable If customers want to query custom aggregate tables, then this parameter can be used to specify the table name. If this parameter is skipped, then Edge Query will try to retrieve the data from fact tables which will be expensive.
     * @param {string=} params.filter Enables drill-down on specific dimension values
     * @param {string=} params.limit This parameter is used to limit the number of result items. Default and the max value is 14400
     * @param {string} params.name Required. The organization and environment name for which the interactive query will be executed. Must be of the form   `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}` Dimensions let you view metrics in meaningful groupings. E.g. apiproxy, target_host. The value of dimensions should be comma separated list as shown below `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
     * @param {string=} params.offset Use offset with limit to enable pagination of results. For example, to display results 11-20, set limit to '10' and offset to '10'.
     * @param {boolean=} params.realtime Legacy field: not used anymore
     * @param {string=} params.select The select parameter contains a comma separated list of metrics E.g. sum(message_count),sum(error_count)
     * @param {boolean=} params.sonar This parameter routes the query to api monitoring service for last hour
     * @param {string=} params.sort This parameter specifies if the sort order should be ascending or descending Supported values are DESC and ASC.
     * @param {string=} params.sortby Comma separated list of columns to sort the final result.
     * @param {string=} params.timeRange Time interval for the interactive query. Time range is specified as start~end E.g. 04/15/2017 00:00~05/15/2017 23:59
     * @param {string=} params.timeUnit A value of second, minute, hour, day, week, month. Time Unit specifies the granularity of metrics returned.
     * @param {string=} params.topk Take 'top k' results from results, for example, to return the top 5 results 'topk=5'.
     * @param {boolean=} params.tsAscending Lists timestamps in ascending order if set to true. Recommend setting this value to true if you are using sortby with sort=DESC.
     * @param {string=} params.tzo This parameters contains the timezone offset value
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Stats$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Stats>;
    get(
      params: Params$Resource$Organizations$Environments$Stats$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Stats>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Stats>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Stats$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Stats>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Stats>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Stats$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Stats>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Stats>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Stats>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Stats> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Stats$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Stats$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Stats>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Stats>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Stats$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Legacy field. not used anymore This field is present to support UI calls which still use this parameter
     */
    accuracy?: string;
    /**
     * If customers want to query custom aggregate tables, then this parameter can be used to specify the table name. If this parameter is skipped, then Edge Query will try to retrieve the data from fact tables which will be expensive.
     */
    aggTable?: string;
    /**
     * Enables drill-down on specific dimension values
     */
    filter?: string;
    /**
     * This parameter is used to limit the number of result items. Default and the max value is 14400
     */
    limit?: string;
    /**
     * Required. The organization and environment name for which the interactive query will be executed. Must be of the form   `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}` Dimensions let you view metrics in meaningful groupings. E.g. apiproxy, target_host. The value of dimensions should be comma separated list as shown below `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
     */
    name?: string;
    /**
     * Use offset with limit to enable pagination of results. For example, to display results 11-20, set limit to '10' and offset to '10'.
     */
    offset?: string;
    /**
     * Legacy field: not used anymore
     */
    realtime?: boolean;
    /**
     * The select parameter contains a comma separated list of metrics E.g. sum(message_count),sum(error_count)
     */
    select?: string;
    /**
     * This parameter routes the query to api monitoring service for last hour
     */
    sonar?: boolean;
    /**
     * This parameter specifies if the sort order should be ascending or descending Supported values are DESC and ASC.
     */
    sort?: string;
    /**
     * Comma separated list of columns to sort the final result.
     */
    sortby?: string;
    /**
     * Time interval for the interactive query. Time range is specified as start~end E.g. 04/15/2017 00:00~05/15/2017 23:59
     */
    timeRange?: string;
    /**
     * A value of second, minute, hour, day, week, month. Time Unit specifies the granularity of metrics returned.
     */
    timeUnit?: string;
    /**
     * Take 'top k' results from results, for example, to return the top 5 results 'topk=5'.
     */
    topk?: string;
    /**
     * Lists timestamps in ascending order if set to true. Recommend setting this value to true if you are using sortby with sort=DESC.
     */
    tsAscending?: boolean;
    /**
     * This parameters contains the timezone offset value
     */
    tzo?: string;
  }

  export class Resource$Organizations$Environments$Targetservers {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.environments.targetservers.create
     * @desc Creates a TargetServer in the specified environment.
     * @alias apigee.organizations.environments.targetservers.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.name Optional. The ID to give the TargetServer. This will overwrite the value in TargetServer.
     * @param {string} params.parent Required. The parent environment name under which the TargetServer will be created. Must be of the form `organizations/{org}/environments/{env}`.
     * @param {().GoogleCloudApigeeV1TargetServer} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Environments$Targetservers$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer>;
    create(
      params: Params$Resource$Organizations$Environments$Targetservers$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    create(
      params: Params$Resource$Organizations$Environments$Targetservers$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Targetservers$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Targetservers$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Targetservers$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/targetservers').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.targetservers.delete
     * @desc Deletes a TargetServer from an environment. Returns the deleted TargetServer resource.
     * @alias apigee.organizations.environments.targetservers.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the TargetServer to delete. Must be of the form `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Environments$Targetservers$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer>;
    delete(
      params: Params$Resource$Organizations$Environments$Targetservers$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    delete(
      params: Params$Resource$Organizations$Environments$Targetservers$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Targetservers$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Targetservers$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Targetservers$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.targetservers.get
     * @desc Gets a TargetServer resource.
     * @alias apigee.organizations.environments.targetservers.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the TargetServer to get. Must be of the form `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Environments$Targetservers$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer>;
    get(
      params: Params$Resource$Organizations$Environments$Targetservers$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    get(
      params: Params$Resource$Organizations$Environments$Targetservers$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Targetservers$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Targetservers$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Targetservers$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.environments.targetservers.update
     * @desc Updates an existing TargetServer. Note that this operation has PUT semantics; it will replace the entirety of the existing TargetServer with the resource in the request body.
     * @alias apigee.organizations.environments.targetservers.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the TargetServer to replace. Must be of the form `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
     * @param {().GoogleCloudApigeeV1TargetServer} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Environments$Targetservers$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer>;
    update(
      params: Params$Resource$Organizations$Environments$Targetservers$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    update(
      params: Params$Resource$Organizations$Environments$Targetservers$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Environments$Targetservers$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1TargetServer>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1TargetServer> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Environments$Targetservers$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Environments$Targetservers$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1TargetServer>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Environments$Targetservers$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Optional. The ID to give the TargetServer. This will overwrite the value in TargetServer.
     */
    name?: string;
    /**
     * Required. The parent environment name under which the TargetServer will be created. Must be of the form `organizations/{org}/environments/{env}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1TargetServer;
  }
  export interface Params$Resource$Organizations$Environments$Targetservers$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the TargetServer to delete. Must be of the form `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Targetservers$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the TargetServer to get. Must be of the form `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Environments$Targetservers$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the TargetServer to replace. Must be of the form `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1TargetServer;
  }

  export class Resource$Organizations$Keyvaluemaps {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.keyvaluemaps.create
     * @desc Creates a key value map in an organization.
     * @alias apigee.organizations.keyvaluemaps.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The name of the organization in which to create the key value map file. Must be of the form `organizations/{organization}`.
     * @param {().GoogleCloudApigeeV1KeyValueMap} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Keyvaluemaps$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap>;
    create(
      params: Params$Resource$Organizations$Keyvaluemaps$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      params: Params$Resource$Organizations$Keyvaluemaps$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Keyvaluemaps$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Keyvaluemaps$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Keyvaluemaps$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keyvaluemaps').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.keyvaluemaps.delete
     * @desc Delete a key value map in an organization.
     * @alias apigee.organizations.keyvaluemaps.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the key value map. Must be of the form `organizations/{organization}/keyvaluemaps/{keyvaluemap}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Keyvaluemaps$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap>;
    delete(
      params: Params$Resource$Organizations$Keyvaluemaps$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      params: Params$Resource$Organizations$Keyvaluemaps$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Keyvaluemaps$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1KeyValueMap>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1KeyValueMap> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Keyvaluemaps$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Keyvaluemaps$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1KeyValueMap>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Keyvaluemaps$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the organization in which to create the key value map file. Must be of the form `organizations/{organization}`.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1KeyValueMap;
  }
  export interface Params$Resource$Organizations$Keyvaluemaps$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the key value map. Must be of the form `organizations/{organization}/keyvaluemaps/{keyvaluemap}`.
     */
    name?: string;
  }

  export class Resource$Organizations$Operations {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.operations.get
     * @desc Gets the latest state of a long-running operation.  Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * @alias apigee.organizations.operations.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name The name of the operation resource.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Operations$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningOperation>;
    get(
      params: Params$Resource$Organizations$Operations$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    get(
      params: Params$Resource$Organizations$Operations$Get,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Operations$Get
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback?: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void | GaxiosPromise<Schema$GoogleLongrunningOperation> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Operations$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Operations$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningOperation>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningOperation>(parameters);
      }
    }

    /**
     * apigee.organizations.operations.list
     * @desc Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.  NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/x/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/x}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
     * @alias apigee.organizations.operations.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.filter The standard list filter.
     * @param {string} params.name The name of the operation's parent resource.
     * @param {integer=} params.pageSize The standard list page size.
     * @param {string=} params.pageToken The standard list page token.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Operations$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningListOperationsResponse>;
    list(
      params: Params$Resource$Organizations$Operations$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningListOperationsResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleLongrunningListOperationsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Operations$List,
      callback: BodyResponseCallback<
        Schema$GoogleLongrunningListOperationsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleLongrunningListOperationsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Operations$List
        | BodyResponseCallback<Schema$GoogleLongrunningListOperationsResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningListOperationsResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleLongrunningListOperationsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleLongrunningListOperationsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Operations$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Operations$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/operations').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningListOperationsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningListOperationsResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Operations$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * The name of the operation resource.
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Operations$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * The standard list filter.
     */
    filter?: string;
    /**
     * The name of the operation's parent resource.
     */
    name?: string;
    /**
     * The standard list page size.
     */
    pageSize?: number;
    /**
     * The standard list page token.
     */
    pageToken?: string;
  }

  export class Resource$Organizations$Portals {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.portals.getStatus
     * @desc Gets a health check from the server.
     * @alias apigee.organizations.portals.getStatus
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getStatus(
      params?: Params$Resource$Organizations$Portals$Getstatus,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ServerStatus>;
    getStatus(
      params: Params$Resource$Organizations$Portals$Getstatus,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ServerStatus>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ServerStatus>
    ): void;
    getStatus(
      params: Params$Resource$Organizations$Portals$Getstatus,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ServerStatus>
    ): void;
    getStatus(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ServerStatus>
    ): void;
    getStatus(
      paramsOrCallback?:
        | Params$Resource$Organizations$Portals$Getstatus
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ServerStatus>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ServerStatus>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ServerStatus>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ServerStatus> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Portals$Getstatus;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Portals$Getstatus;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/portals/status').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ServerStatus>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ServerStatus>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Portals$Getstatus
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Providers {
    context: APIRequestContext;
    resources: Resource$Organizations$Providers$Resources;
    users: Resource$Organizations$Providers$Users;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.resources = new Resource$Organizations$Providers$Resources(
        this.context
      );
      this.users = new Resource$Organizations$Providers$Users(this.context);
    }

    /**
     * apigee.organizations.providers.clearScope
     * @desc Clears the scope of an identity provider.
     * @alias apigee.organizations.providers.clearScope
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/providers/{provider}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    clearScope(
      params?: Params$Resource$Organizations$Providers$Clearscope,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    clearScope(
      params: Params$Resource$Organizations$Providers$Clearscope,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    clearScope(
      params: Params$Resource$Organizations$Providers$Clearscope,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    clearScope(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    clearScope(
      paramsOrCallback?:
        | Params$Resource$Organizations$Providers$Clearscope
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Providers$Clearscope;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Providers$Clearscope;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Providers$Clearscope
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/providers/{provider}`
     */
    name?: string;
  }

  export class Resource$Organizations$Providers$Resources {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.providers.resources.createResource
     * @desc Creates a resource ID for the resource path.
     * @alias apigee.organizations.providers.resources.createResource
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the resource. Use the following structure in your request:   `organizations/{org}/providers/{provider}/resources/{resource}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    createResource(
      params?: Params$Resource$Organizations$Providers$Resources$Createresource,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse>;
    createResource(
      params: Params$Resource$Organizations$Providers$Resources$Createresource,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    createResource(
      params: Params$Resource$Organizations$Providers$Resources$Createresource,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    createResource(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    createResource(
      paramsOrCallback?:
        | Params$Resource$Organizations$Providers$Resources$Createresource
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Providers$Resources$Createresource;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Providers$Resources$Createresource;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.providers.resources.delete
     * @desc Deletes a resource.
     * @alias apigee.organizations.providers.resources.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the resource. Use the following structure in your request:   `organizations/{org}/providers/{provider}/resources/{resource}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Providers$Resources$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    delete(
      params: Params$Resource$Organizations$Providers$Resources$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Providers$Resources$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Providers$Resources$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Providers$Resources$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Providers$Resources$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Providers$Resources$Createresource
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the resource. Use the following structure in your request:   `organizations/{org}/providers/{provider}/resources/{resource}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Providers$Resources$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the resource. Use the following structure in your request:   `organizations/{org}/providers/{provider}/resources/{resource}`
     */
    name?: string;
  }

  export class Resource$Organizations$Providers$Users {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.providers.users.delete
     * @desc Deletes a user.
     * @alias apigee.organizations.providers.users.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the user. Use the following structure in your request:   `organizations/{org}/providers/{provider}/users/{user}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Providers$Users$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse>;
    delete(
      params: Params$Resource$Organizations$Providers$Users$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    delete(
      params: Params$Resource$Organizations$Providers$Users$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Providers$Users$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Providers$Users$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Providers$Users$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.providers.users.get
     * @desc Gets a user.
     * @alias apigee.organizations.providers.users.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the user. Use the following structure in your request:   `organizations/{org}/providers/{provider}/users/{user}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Providers$Users$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerUserResponse>;
    get(
      params: Params$Resource$Organizations$Providers$Users$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerUserResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void;
    get(
      params: Params$Resource$Organizations$Providers$Users$Get,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void;
    get(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Providers$Users$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerUserResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerUserResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerUserResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Providers$Users$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Providers$Users$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerUserResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerUserResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.providers.users.list
     * @desc Lists all users.
     * @alias apigee.organizations.providers.users.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.count Number of items.
     * @param {string=} params.filter String used to filter the list.
     * @param {string} params.parent Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/providers/{provider}`
     * @param {string=} params.sortBy Field on which to sort the list.
     * @param {string=} params.sortOrder Order in which to sort the list, such as ascending or descending.
     * @param {string=} params.startIndex Starting index of the list.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Providers$Users$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerUserListResponse>;
    list(
      params: Params$Resource$Organizations$Providers$Users$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ConsumerUserListResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserListResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Providers$Users$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserListResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserListResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Providers$Users$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ConsumerUserListResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ConsumerUserListResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserListResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ConsumerUserListResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Providers$Users$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Providers$Users$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/users').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerUserListResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ConsumerUserListResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.providers.users.update
     * @desc Updates a user.
     * @alias apigee.organizations.providers.users.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the user. Use the following structure in your request:   `organizations/{org}/providers/{provider}/users/{user}`
     * @param {().GoogleCloudApigeeV1ConsumerUser} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Providers$Users$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerUserResponse>;
    update(
      params: Params$Resource$Organizations$Providers$Users$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerUserResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void;
    update(
      params: Params$Resource$Organizations$Providers$Users$Update,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void;
    update(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Providers$Users$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerUserResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ConsumerUserResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ConsumerUserResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ConsumerUserResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Providers$Users$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Providers$Users$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerUserResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ConsumerUserResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Providers$Users$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the user. Use the following structure in your request:   `organizations/{org}/providers/{provider}/users/{user}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Providers$Users$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the user. Use the following structure in your request:   `organizations/{org}/providers/{provider}/users/{user}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Providers$Users$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Number of items.
     */
    count?: string;
    /**
     * String used to filter the list.
     */
    filter?: string;
    /**
     * Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/providers/{provider}`
     */
    parent?: string;
    /**
     * Field on which to sort the list.
     */
    sortBy?: string;
    /**
     * Order in which to sort the list, such as ascending or descending.
     */
    sortOrder?: string;
    /**
     * Starting index of the list.
     */
    startIndex?: string;
  }
  export interface Params$Resource$Organizations$Providers$Users$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the user. Use the following structure in your request:   `organizations/{org}/providers/{provider}/users/{user}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1ConsumerUser;
  }

  export class Resource$Organizations$Reports {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.reports.create
     * @desc Creates a Custom Report for an Organization. A Custom Report provides Apigee Customers to create custom dashboards in addition to the standard dashboards which are provided. The Custom Report in its simplest form contains specifications about metrics, dimensions and filters. It is important to note that the custom report by itself does not provide an executable entity. The Edge UI converts the custom report definition into an analytics query and displays the result in a chart.
     * @alias apigee.organizations.reports.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. The parent organization name under which the Custom Report will be created. Must be of the form:   `organizations/{organization_id}/reports`
     * @param {().GoogleCloudApigeeV1CustomReport} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Reports$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CustomReport>;
    create(
      params: Params$Resource$Organizations$Reports$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    create(
      params: Params$Resource$Organizations$Reports$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Reports$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CustomReport> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Reports$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Reports$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/reports').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CustomReport>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CustomReport>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.reports.delete
     * @desc Deletes an existing custom report definition
     * @alias apigee.organizations.reports.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Custom Report name of the form:   `organizations/{organization_id}/reports/{report_name}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Reports$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DeleteCustomReportResponse>;
    delete(
      params: Params$Resource$Organizations$Reports$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Reports$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Reports$Delete
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Reports$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Reports$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DeleteCustomReportResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1DeleteCustomReportResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.reports.get
     * @desc Retrieve a custom report definition.
     * @alias apigee.organizations.reports.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Custom Report name of the form:   `organizations/{organization_id}/reports/{report_name}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Reports$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CustomReport>;
    get(
      params: Params$Resource$Organizations$Reports$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    get(
      params: Params$Resource$Organizations$Reports$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Reports$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CustomReport> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Reports$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Reports$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CustomReport>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CustomReport>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.reports.list
     * @desc Return a list of Custom Reports
     * @alias apigee.organizations.reports.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.expand Set to 'true' to get expanded details about each custom report.
     * @param {string} params.parent Required. The parent organization name under which the API product will be listed   `organizations/{organization_id}/reports`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Reports$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListCustomReportsResponse>;
    list(
      params: Params$Resource$Organizations$Reports$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListCustomReportsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCustomReportsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Reports$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCustomReportsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCustomReportsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Reports$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListCustomReportsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListCustomReportsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListCustomReportsResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListCustomReportsResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Reports$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Reports$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/reports').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListCustomReportsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListCustomReportsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.reports.update
     * @desc Update an existing custom report definition
     * @alias apigee.organizations.reports.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Custom Report name of the form:   `organizations/{organization_id}/reports/{report_name}`
     * @param {().GoogleCloudApigeeV1CustomReport} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Reports$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CustomReport>;
    update(
      params: Params$Resource$Organizations$Reports$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    update(
      params: Params$Resource$Organizations$Reports$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Reports$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomReport>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CustomReport> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Reports$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Reports$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CustomReport>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CustomReport>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Reports$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The parent organization name under which the Custom Report will be created. Must be of the form:   `organizations/{organization_id}/reports`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1CustomReport;
  }
  export interface Params$Resource$Organizations$Reports$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Custom Report name of the form:   `organizations/{organization_id}/reports/{report_name}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Reports$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Custom Report name of the form:   `organizations/{organization_id}/reports/{report_name}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Reports$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Set to 'true' to get expanded details about each custom report.
     */
    expand?: boolean;
    /**
     * Required. The parent organization name under which the API product will be listed   `organizations/{organization_id}/reports`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Reports$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Custom Report name of the form:   `organizations/{organization_id}/reports/{report_name}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1CustomReport;
  }

  export class Resource$Organizations$Sharedflows {
    context: APIRequestContext;
    deployments: Resource$Organizations$Sharedflows$Deployments;
    revisions: Resource$Organizations$Sharedflows$Revisions;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.deployments = new Resource$Organizations$Sharedflows$Deployments(
        this.context
      );
      this.revisions = new Resource$Organizations$Sharedflows$Revisions(
        this.context
      );
    }

    /**
     * apigee.organizations.sharedflows.create
     * @desc Uploads a ZIP-formatted shared flow configuration bundle to an organization. If the shared flow already exists, this creates a new revision of it. If the shared flow does not exist, this creates it.  Once imported, the shared flow revision must be deployed before it can be accessed at runtime.  The size limit of a shared flow bundle is 15 MB.
     * @alias apigee.organizations.sharedflows.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.action Required. Must be set to either `import` or `validate`.
     * @param {string=} params.name Required. The name to give the shared flow
     * @param {string} params.parent Required. The name of the parent organization under which to create the shared flow. Must be of the form:   `organizations/{organization_id}`
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Sharedflows$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlowRevision>;
    create(
      params: Params$Resource$Organizations$Sharedflows$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    create(
      params: Params$Resource$Organizations$Sharedflows$Create,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    create(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlowRevision> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/sharedflows').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlowRevision>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlowRevision>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sharedflows.delete
     * @desc Deletes a shared flow and all it's revisions. The shared flow must be undeployed before you can delete it.
     * @alias apigee.organizations.sharedflows.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. shared flow name of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Sharedflows$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlow>;
    delete(
      params: Params$Resource$Organizations$Sharedflows$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void;
    delete(
      params: Params$Resource$Organizations$Sharedflows$Delete,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void;
    delete(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlow> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlow>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlow>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sharedflows.get
     * @desc Gets a shared flow by name, including a list of its revisions.
     * @alias apigee.organizations.sharedflows.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the shared flow to get. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Sharedflows$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlow>;
    get(
      params: Params$Resource$Organizations$Sharedflows$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void;
    get(
      params: Params$Resource$Organizations$Sharedflows$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlow>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlow> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlow>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlow>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sharedflows.list
     * @desc Lists all shared flows in the organization.
     * @alias apigee.organizations.sharedflows.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {boolean=} params.includeMetaData Indicates whether to include shared flow metadata in the response.
     * @param {boolean=} params.includeRevisions Indicates whether to include a list of revisions in the response.
     * @param {string} params.parent Required. The name of the parent organization under which to get shared flows. Must be of the form:   `organizations/{organization_id}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sharedflows$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListSharedFlowsResponse>;
    list(
      params: Params$Resource$Organizations$Sharedflows$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sharedflows$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListSharedFlowsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/sharedflows').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListSharedFlowsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListSharedFlowsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sharedflows$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Must be set to either `import` or `validate`.
     */
    action?: string;
    /**
     * Required. The name to give the shared flow
     */
    name?: string;
    /**
     * Required. The name of the parent organization under which to create the shared flow. Must be of the form:   `organizations/{organization_id}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }
  export interface Params$Resource$Organizations$Sharedflows$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. shared flow name of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sharedflows$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the shared flow to get. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sharedflows$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Indicates whether to include shared flow metadata in the response.
     */
    includeMetaData?: boolean;
    /**
     * Indicates whether to include a list of revisions in the response.
     */
    includeRevisions?: boolean;
    /**
     * Required. The name of the parent organization under which to get shared flows. Must be of the form:   `organizations/{organization_id}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sharedflows$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sharedflows.deployments.list
     * @desc Lists all deployments of a shared flow.
     * @alias apigee.organizations.sharedflows.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the shared flow for which to return deployment information in the following format:   `organizations/{org}/sharedflows/{sharedflow}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sharedflows$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Sharedflows$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sharedflows$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sharedflows$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the shared flow for which to return deployment information in the following format:   `organizations/{org}/sharedflows/{sharedflow}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sharedflows$Revisions {
    context: APIRequestContext;
    deployments: Resource$Organizations$Sharedflows$Revisions$Deployments;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.deployments = new Resource$Organizations$Sharedflows$Revisions$Deployments(
        this.context
      );
    }

    /**
     * apigee.organizations.sharedflows.revisions.delete
     * @desc Deletes a shared flow and all associated policies, resources, and revisions. You must undeploy the shared flow before deleting it.
     * @alias apigee.organizations.sharedflows.revisions.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the shared flow revision to delete. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Sharedflows$Revisions$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlowRevision>;
    delete(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Revisions$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlowRevision> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Revisions$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Revisions$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlowRevision>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlowRevision>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sharedflows.revisions.get
     * @desc Gets a revision of a shared flow.  If `format=bundle` is passed, it instead outputs a shared flow revision as a ZIP-formatted bundle of code and config files.
     * @alias apigee.organizations.sharedflows.revisions.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.format Specify `bundle` to export the contents of the shared flow bundle. Otherwise, the bundle metadata is returned.
     * @param {string} params.name Required. The name of the shared flow revision to get. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Sharedflows$Revisions$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleApiHttpBody>;
    get(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Get,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    get(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Get,
      callback: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleApiHttpBody>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Revisions$Get
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleApiHttpBody>,
      callback?: BodyResponseCallback<Schema$GoogleApiHttpBody>
    ): void | GaxiosPromise<Schema$GoogleApiHttpBody> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Revisions$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Revisions$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleApiHttpBody>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleApiHttpBody>(parameters);
      }
    }

    /**
     * apigee.organizations.sharedflows.revisions.updateSharedFlowRevision
     * @desc Updates a shared flow revision. This operation is only allowed on revisions which have never been deployed. After deployment a revision becomes immutable, even if it becomes undeployed.  The payload is a ZIP-formatted shared flow.  Content type must be either multipart/form-data or application/octet-stream.
     * @alias apigee.organizations.sharedflows.revisions.updateSharedFlowRevision
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. The name of the shared flow revision to update. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
     * @param {boolean=} params.validate Ignored. All uploads are validated regardless of the value of this field. It is kept for compatibility with existing APIs. Must be `true` or `false` if provided.
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateSharedFlowRevision(
      params?: Params$Resource$Organizations$Sharedflows$Revisions$Updatesharedflowrevision,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlowRevision>;
    updateSharedFlowRevision(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Updatesharedflowrevision,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    updateSharedFlowRevision(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Updatesharedflowrevision,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    updateSharedFlowRevision(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void;
    updateSharedFlowRevision(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Revisions$Updatesharedflowrevision
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SharedFlowRevision>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SharedFlowRevision
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SharedFlowRevision> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Revisions$Updatesharedflowrevision;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Revisions$Updatesharedflowrevision;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlowRevision>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SharedFlowRevision>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sharedflows$Revisions$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the shared flow revision to delete. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sharedflows$Revisions$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Specify `bundle` to export the contents of the shared flow bundle. Otherwise, the bundle metadata is returned.
     */
    format?: string;
    /**
     * Required. The name of the shared flow revision to get. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sharedflows$Revisions$Updatesharedflowrevision
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. The name of the shared flow revision to update. Must be of the form:   `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
     */
    name?: string;
    /**
     * Ignored. All uploads are validated regardless of the value of this field. It is kept for compatibility with existing APIs. Must be `true` or `false` if provided.
     */
    validate?: boolean;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }

  export class Resource$Organizations$Sharedflows$Revisions$Deployments {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sharedflows.revisions.deployments.list
     * @desc Lists all deployments of a shared flow revision.
     * @alias apigee.organizations.sharedflows.revisions.deployments.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the API proxy revision for which to return deployment information in the following format:   `organizations/{org}/sharedflows/{sharedflow}/revisions/{rev}`.
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sharedflows$Revisions$Deployments$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>;
    list(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Deployments$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sharedflows$Revisions$Deployments$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sharedflows$Revisions$Deployments$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListDeploymentsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListDeploymentsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListDeploymentsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sharedflows$Revisions$Deployments$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sharedflows$Revisions$Deployments$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/deployments').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListDeploymentsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListDeploymentsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sharedflows$Revisions$Deployments$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API proxy revision for which to return deployment information in the following format:   `organizations/{org}/sharedflows/{sharedflow}/revisions/{rev}`.
     */
    parent?: string;
  }

  export class Resource$Organizations$Sites {
    context: APIRequestContext;
    apidocs: Resource$Organizations$Sites$Apidocs;
    customcss: Resource$Organizations$Sites$Customcss;
    dns: Resource$Organizations$Sites$Dns;
    drafttoken: Resource$Organizations$Sites$Drafttoken;
    email: Resource$Organizations$Sites$Email;
    file: Resource$Organizations$Sites$File;
    menuitems: Resource$Organizations$Sites$Menuitems;
    menutypes: Resource$Organizations$Sites$Menutypes;
    pages: Resource$Organizations$Sites$Pages;
    site: Resource$Organizations$Sites$Site;
    smtp: Resource$Organizations$Sites$Smtp;
    specs: Resource$Organizations$Sites$Specs;
    zones: Resource$Organizations$Sites$Zones;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.apidocs = new Resource$Organizations$Sites$Apidocs(this.context);
      this.customcss = new Resource$Organizations$Sites$Customcss(this.context);
      this.dns = new Resource$Organizations$Sites$Dns(this.context);
      this.drafttoken = new Resource$Organizations$Sites$Drafttoken(
        this.context
      );
      this.email = new Resource$Organizations$Sites$Email(this.context);
      this.file = new Resource$Organizations$Sites$File(this.context);
      this.menuitems = new Resource$Organizations$Sites$Menuitems(this.context);
      this.menutypes = new Resource$Organizations$Sites$Menutypes(this.context);
      this.pages = new Resource$Organizations$Sites$Pages(this.context);
      this.site = new Resource$Organizations$Sites$Site(this.context);
      this.smtp = new Resource$Organizations$Sites$Smtp(this.context);
      this.specs = new Resource$Organizations$Sites$Specs(this.context);
      this.zones = new Resource$Organizations$Sites$Zones(this.context);
    }

    /**
     * apigee.organizations.sites.create
     * @desc Creates a new portal.
     * @alias apigee.organizations.sites.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {().GoogleCloudApigeeV1SiteData} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Sites$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Site>;
    create(
      params: Params$Resource$Organizations$Sites$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    create(
      params: Params$Resource$Organizations$Sites$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Site> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/sites').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.getConfig
     * @desc Gets the portal configuration.
     * @alias apigee.organizations.sites.getConfig
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getConfig(
      params?: Params$Resource$Organizations$Sites$Getconfig,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1PortalConfigResponse>;
    getConfig(
      params: Params$Resource$Organizations$Sites$Getconfig,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1PortalConfigResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalConfigResponse
      >
    ): void;
    getConfig(
      params: Params$Resource$Organizations$Sites$Getconfig,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalConfigResponse
      >
    ): void;
    getConfig(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalConfigResponse
      >
    ): void;
    getConfig(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getconfig
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1PortalConfigResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1PortalConfigResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PortalConfigResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1PortalConfigResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getconfig;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getconfig;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/sites/config').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1PortalConfigResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1PortalConfigResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.getCustomcss
     * @desc Gets the custom CSS for a portal.
     * @alias apigee.organizations.sites.getCustomcss
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getCustomcss(
      params?: Params$Resource$Organizations$Sites$Getcustomcss,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CustomCss>;
    getCustomcss(
      params: Params$Resource$Organizations$Sites$Getcustomcss,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void;
    getCustomcss(
      params: Params$Resource$Organizations$Sites$Getcustomcss,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void;
    getCustomcss(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void;
    getCustomcss(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getcustomcss
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CustomCss> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getcustomcss;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getcustomcss;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/customcss').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CustomCss>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CustomCss>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.getDrafttoken
     * @desc Gets the draft token for a portal.
     * @alias apigee.organizations.sites.getDrafttoken
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getDrafttoken(
      params?: Params$Resource$Organizations$Sites$Getdrafttoken,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse>;
    getDrafttoken(
      params: Params$Resource$Organizations$Sites$Getdrafttoken,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getDrafttoken(
      params: Params$Resource$Organizations$Sites$Getdrafttoken,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getDrafttoken(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getDrafttoken(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getdrafttoken
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getdrafttoken;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getdrafttoken;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/drafttoken').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.getKeystores
     * @desc Lists the keystores and certs that are available for TLS configuration.
     * @alias apigee.organizations.sites.getKeystores
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getKeystores(
      params?: Params$Resource$Organizations$Sites$Getkeystores,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1KeystoreSetResponse>;
    getKeystores(
      params: Params$Resource$Organizations$Sites$Getkeystores,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeystoreSetResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1KeystoreSetResponse
      >
    ): void;
    getKeystores(
      params: Params$Resource$Organizations$Sites$Getkeystores,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1KeystoreSetResponse
      >
    ): void;
    getKeystores(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1KeystoreSetResponse
      >
    ): void;
    getKeystores(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getkeystores
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeystoreSetResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1KeystoreSetResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1KeystoreSetResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1KeystoreSetResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getkeystores;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getkeystores;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/keystores').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1KeystoreSetResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1KeystoreSetResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.getOrgtype
     * @desc Gets the organization type for a portal.
     * @alias apigee.organizations.sites.getOrgtype
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getOrgtype(
      params?: Params$Resource$Organizations$Sites$Getorgtype,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse>;
    getOrgtype(
      params: Params$Resource$Organizations$Sites$Getorgtype,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getOrgtype(
      params: Params$Resource$Organizations$Sites$Getorgtype,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getOrgtype(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getOrgtype(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getorgtype
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getorgtype;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getorgtype;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/orgtype').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.getPortal
     * @desc Gets the details for a portal.
     * @alias apigee.organizations.sites.getPortal
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getPortal(
      params?: Params$Resource$Organizations$Sites$Getportal,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Site>;
    getPortal(
      params: Params$Resource$Organizations$Sites$Getportal,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    getPortal(
      params: Params$Resource$Organizations$Sites$Getportal,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    getPortal(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    getPortal(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getportal
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Site> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getportal;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getportal;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/portal').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.getPublishedapis
     * @desc Lists all published APIs.
     * @alias apigee.organizations.sites.getPublishedapis
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.filter
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getPublishedapis(
      params?: Params$Resource$Organizations$Sites$Getpublishedapis,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1PublishedApisPageResponse>;
    getPublishedapis(
      params: Params$Resource$Organizations$Sites$Getpublishedapis,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PublishedApisPageResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PublishedApisPageResponse
      >
    ): void;
    getPublishedapis(
      params: Params$Resource$Organizations$Sites$Getpublishedapis,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PublishedApisPageResponse
      >
    ): void;
    getPublishedapis(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PublishedApisPageResponse
      >
    ): void;
    getPublishedapis(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getpublishedapis
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PublishedApisPageResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1PublishedApisPageResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PublishedApisPageResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1PublishedApisPageResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getpublishedapis;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getpublishedapis;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/publishedapis').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1PublishedApisPageResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1PublishedApisPageResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.sites.getSmtp
     * @desc Gets the SMTP configuration for a portal.
     * @alias apigee.organizations.sites.getSmtp
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getSmtp(
      params?: Params$Resource$Organizations$Sites$Getsmtp,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SmtpConfigResponse>;
    getSmtp(
      params: Params$Resource$Organizations$Sites$Getsmtp,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SmtpConfigResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void;
    getSmtp(
      params: Params$Resource$Organizations$Sites$Getsmtp,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void;
    getSmtp(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void;
    getSmtp(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Getsmtp
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SmtpConfigResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SmtpConfigResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SmtpConfigResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Getsmtp;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Getsmtp;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/smtp').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SmtpConfigResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SmtpConfigResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.render
     * @desc Gets the title and contents of the page on the portal.
     * @alias apigee.organizations.sites.render
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string=} params.draft
     * @param {string=} params.pageId
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    render(
      params?: Params$Resource$Organizations$Sites$Render,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1PageContentResponse>;
    render(
      params: Params$Resource$Organizations$Sites$Render,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1PageContentResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PageContentResponse
      >
    ): void;
    render(
      params: Params$Resource$Organizations$Sites$Render,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PageContentResponse
      >
    ): void;
    render(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PageContentResponse
      >
    ): void;
    render(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Render
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1PageContentResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1PageContentResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1PageContentResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1PageContentResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Render;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Render;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/render').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1PageContentResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1PageContentResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.send-test-email
     * @desc Sends a test email using the email template.
     * @alias apigee.organizations.sites.send-test-email
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1SendTestEmailPayload} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    sendTestEmail(
      params?: Params$Resource$Organizations$Sites$Sendtestemail,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    sendTestEmail(
      params: Params$Resource$Organizations$Sites$Sendtestemail,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    sendTestEmail(
      params: Params$Resource$Organizations$Sites$Sendtestemail,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    sendTestEmail(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    sendTestEmail(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Sendtestemail
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Sendtestemail;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Sendtestemail;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/send-test-email').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.trash
     * @desc Deletes a portal.
     * @alias apigee.organizations.sites.trash
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    trash(
      params?: Params$Resource$Organizations$Sites$Trash,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    trash(
      params: Params$Resource$Organizations$Sites$Trash,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    trash(
      params: Params$Resource$Organizations$Sites$Trash,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    trash(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    trash(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Trash
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Trash;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Trash;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/trash').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.updateCustomcss
     * @desc Updates the custom CSS for a portal.
     * @alias apigee.organizations.sites.updateCustomcss
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1UpdateCustomCssRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateCustomcss(
      params?: Params$Resource$Organizations$Sites$Updatecustomcss,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CustomCss>;
    updateCustomcss(
      params: Params$Resource$Organizations$Sites$Updatecustomcss,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void;
    updateCustomcss(
      params: Params$Resource$Organizations$Sites$Updatecustomcss,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void;
    updateCustomcss(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void;
    updateCustomcss(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Updatecustomcss
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1CustomCss>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1CustomCss> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Updatecustomcss;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Updatecustomcss;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/customcss').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1CustomCss>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1CustomCss>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.updatePortal
     * @desc Updates a portal.
     * @alias apigee.organizations.sites.updatePortal
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1SiteData} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updatePortal(
      params?: Params$Resource$Organizations$Sites$Updateportal,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Site>;
    updatePortal(
      params: Params$Resource$Organizations$Sites$Updateportal,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    updatePortal(
      params: Params$Resource$Organizations$Sites$Updateportal,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    updatePortal(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    updatePortal(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Updateportal
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Site> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Updateportal;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Updateportal;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/portal').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.updateSmtp
     * @desc Updates the SMTP configuration for a portal.
     * @alias apigee.organizations.sites.updateSmtp
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1SmtpConfig} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateSmtp(
      params?: Params$Resource$Organizations$Sites$Updatesmtp,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1SmtpConfigResponse>;
    updateSmtp(
      params: Params$Resource$Organizations$Sites$Updatesmtp,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SmtpConfigResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void;
    updateSmtp(
      params: Params$Resource$Organizations$Sites$Updatesmtp,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void;
    updateSmtp(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void;
    updateSmtp(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Updatesmtp
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SmtpConfigResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1SmtpConfigResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1SmtpConfigResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1SmtpConfigResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Updatesmtp;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Updatesmtp;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/smtp').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1SmtpConfigResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1SmtpConfigResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1SiteData;
  }
  export interface Params$Resource$Organizations$Sites$Getconfig
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Getcustomcss
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Getdrafttoken
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Getkeystores
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Getorgtype
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Getportal
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Getpublishedapis
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     *
     */
    filter?: string;
    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Getsmtp
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Render
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     *
     */
    draft?: string;
    /**
     *
     */
    pageId?: string;
    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Sendtestemail
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1SendTestEmailPayload;
  }
  export interface Params$Resource$Organizations$Sites$Trash
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Updatecustomcss
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1UpdateCustomCssRequest;
  }
  export interface Params$Resource$Organizations$Sites$Updateportal
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1SiteData;
  }
  export interface Params$Resource$Organizations$Sites$Updatesmtp
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1SmtpConfig;
  }

  export class Resource$Organizations$Sites$Apidocs {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.apidocs.create
     * @desc Publishes an API to the portal.
     * @alias apigee.organizations.sites.apidocs.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:  `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1ApiDocBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Sites$Apidocs$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc>;
    create(
      params: Params$Resource$Organizations$Sites$Apidocs$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    create(
      params: Params$Resource$Organizations$Sites$Apidocs$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apidocs').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.apidocs.delete
     * @desc Removes a published API from the portal.
     * @alias apigee.organizations.sites.apidocs.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Sites$Apidocs$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    delete(
      params: Params$Resource$Organizations$Sites$Apidocs$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Sites$Apidocs$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.apidocs.deleteSnapshot
     * @desc Removes the current OpenAPI Specification snapshot from the published API.
     * @alias apigee.organizations.sites.apidocs.deleteSnapshot
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the published API. Must be of the form `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    deleteSnapshot(
      params?: Params$Resource$Organizations$Sites$Apidocs$Deletesnapshot,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc>;
    deleteSnapshot(
      params: Params$Resource$Organizations$Sites$Apidocs$Deletesnapshot,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    deleteSnapshot(
      params: Params$Resource$Organizations$Sites$Apidocs$Deletesnapshot,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    deleteSnapshot(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    deleteSnapshot(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$Deletesnapshot
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$Deletesnapshot;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$Deletesnapshot;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/snapshot').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.apidocs.get
     * @desc Gets the details for a published API.
     * @alias apigee.organizations.sites.apidocs.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Sites$Apidocs$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc>;
    get(
      params: Params$Resource$Organizations$Sites$Apidocs$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    get(
      params: Params$Resource$Organizations$Sites$Apidocs$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.apidocs.list
     * @desc Lists the details for all published APIs.
     * @alias apigee.organizations.sites.apidocs.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sites$Apidocs$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListApiDocsResponse>;
    list(
      params: Params$Resource$Organizations$Sites$Apidocs$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListApiDocsResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiDocsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sites$Apidocs$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiDocsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiDocsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListApiDocsResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListApiDocsResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListApiDocsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListApiDocsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/apidocs').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListApiDocsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ListApiDocsResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.apidocs.listPublishableProducts
     * @desc Lists the APIs that can be published to the portal.
     * @alias apigee.organizations.sites.apidocs.listPublishableProducts
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs:listPublishableProducts`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    listPublishableProducts(
      params?: Params$Resource$Organizations$Sites$Apidocs$Listpublishableproducts,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListPublishableProductsResponse>;
    listPublishableProducts(
      params: Params$Resource$Organizations$Sites$Apidocs$Listpublishableproducts,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
      >
    ): void;
    listPublishableProducts(
      params: Params$Resource$Organizations$Sites$Apidocs$Listpublishableproducts,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
      >
    ): void;
    listPublishableProducts(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
      >
    ): void;
    listPublishableProducts(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$Listpublishableproducts
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$Listpublishableproducts;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$Listpublishableproducts;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (
              rootUrl + '/v1/{+parent}/apidocs:listPublishableProducts'
            ).replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListPublishableProductsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.sites.apidocs.snapshot
     * @desc Uploads the contents of an OpenAPI Specification snapshot for a published API.
     * @alias apigee.organizations.sites.apidocs.snapshot
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    snapshot(
      params?: Params$Resource$Organizations$Sites$Apidocs$Snapshot,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc>;
    snapshot(
      params: Params$Resource$Organizations$Sites$Apidocs$Snapshot,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    snapshot(
      params: Params$Resource$Organizations$Sites$Apidocs$Snapshot,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    snapshot(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    snapshot(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$Snapshot
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$Snapshot;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$Snapshot;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}/snapshot').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.apidocs.update
     * @desc Updates the details or specification for a published API.
     * @alias apigee.organizations.sites.apidocs.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     * @param {().GoogleCloudApigeeV1ApiDocBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Sites$Apidocs$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc>;
    update(
      params: Params$Resource$Organizations$Sites$Apidocs$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    update(
      params: Params$Resource$Organizations$Sites$Apidocs$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Apidocs$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiDoc>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiDoc> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Apidocs$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Apidocs$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiDoc>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Apidocs$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:  `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1ApiDocBody;
  }
  export interface Params$Resource$Organizations$Sites$Apidocs$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Apidocs$Deletesnapshot
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the published API. Must be of the form `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Apidocs$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Apidocs$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Apidocs$Listpublishableproducts
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs:listPublishableProducts`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Apidocs$Snapshot
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }
  export interface Params$Resource$Organizations$Sites$Apidocs$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. ID of the published API. Use the following structure in your request:   `organizations/{org}/sites/{site}/apidocs/{apidoc}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1ApiDocBody;
  }

  export class Resource$Organizations$Sites$Customcss {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.customcss.getEditorschema
     * @desc Gets the information required for the theme editor.
     * @alias apigee.organizations.sites.customcss.getEditorschema
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name for the custom CSS. Use the following structure in your request:   `organizations/{org}/sites/customcss`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getEditorschema(
      params?: Params$Resource$Organizations$Sites$Customcss$Geteditorschema,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1EditorSchema>;
    getEditorschema(
      params: Params$Resource$Organizations$Sites$Customcss$Geteditorschema,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EditorSchema>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EditorSchema>
    ): void;
    getEditorschema(
      params: Params$Resource$Organizations$Sites$Customcss$Geteditorschema,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EditorSchema>
    ): void;
    getEditorschema(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EditorSchema>
    ): void;
    getEditorschema(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Customcss$Geteditorschema
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EditorSchema>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EditorSchema>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1EditorSchema>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1EditorSchema> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Customcss$Geteditorschema;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Customcss$Geteditorschema;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/editorschema').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1EditorSchema>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1EditorSchema>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.customcss.publish
     * @desc Publishes the custom CSS for a portal
     * @alias apigee.organizations.sites.customcss.publish
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name for the custom CSS. Use the following structure in your request:   `organizations/{org}/sites/customcss`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    publish(
      params?: Params$Resource$Organizations$Sites$Customcss$Publish,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    publish(
      params: Params$Resource$Organizations$Sites$Customcss$Publish,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      params: Params$Resource$Organizations$Sites$Customcss$Publish,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Customcss$Publish
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Customcss$Publish;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Customcss$Publish;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/publish').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Customcss$Geteditorschema
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name for the custom CSS. Use the following structure in your request:   `organizations/{org}/sites/customcss`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Customcss$Publish
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name for the custom CSS. Use the following structure in your request:   `organizations/{org}/sites/customcss`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sites$Dns {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.dns.check
     * @desc Checks DNS to verify that a domain has the expected canonical name (CNAME) record.
     * @alias apigee.organizations.sites.dns.check
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {().GoogleCloudApigeeV1DnsCnameCheck} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    check(
      params?: Params$Resource$Organizations$Sites$Dns$Check,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1DomainVerifiedResponse>;
    check(
      params: Params$Resource$Organizations$Sites$Dns$Check,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DomainVerifiedResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DomainVerifiedResponse
      >
    ): void;
    check(
      params: Params$Resource$Organizations$Sites$Dns$Check,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DomainVerifiedResponse
      >
    ): void;
    check(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DomainVerifiedResponse
      >
    ): void;
    check(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Dns$Check
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DomainVerifiedResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1DomainVerifiedResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1DomainVerifiedResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1DomainVerifiedResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Dns$Check;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Dns$Check;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/sites/dns/check').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1DomainVerifiedResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1DomainVerifiedResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Dns$Check
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DnsCnameCheck;
  }

  export class Resource$Organizations$Sites$Drafttoken {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.drafttoken.verify
     * @desc Verifies a draft token for a portal.
     * @alias apigee.organizations.sites.drafttoken.verify
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1VerifyDraftTokenPayload} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    verify(
      params?: Params$Resource$Organizations$Sites$Drafttoken$Verify,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    verify(
      params: Params$Resource$Organizations$Sites$Drafttoken$Verify,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    verify(
      params: Params$Resource$Organizations$Sites$Drafttoken$Verify,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    verify(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    verify(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Drafttoken$Verify
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Drafttoken$Verify;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Drafttoken$Verify;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/drafttoken/verify').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Drafttoken$Verify
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1VerifyDraftTokenPayload;
  }

  export class Resource$Organizations$Sites$Email {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.email.get
     * @desc Gets an email template for a portal.
     * @alias apigee.organizations.sites.email.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the email template. Use the following structure in your request:   `organizations/{org}/sites/{site}/email/{email}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Sites$Email$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1EmailTemplate>;
    get(
      params: Params$Resource$Organizations$Sites$Email$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void;
    get(
      params: Params$Resource$Organizations$Sites$Email$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Email$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1EmailTemplate> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Email$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Email$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1EmailTemplate>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1EmailTemplate>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.email.update
     * @desc Updates an email template for a portal.
     * @alias apigee.organizations.sites.email.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the email template. Use the following structure in your request:   `organizations/{org}/sites/{site}/email/{email}`
     * @param {().GoogleCloudApigeeV1EmailTemplateBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Sites$Email$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1EmailTemplate>;
    update(
      params: Params$Resource$Organizations$Sites$Email$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void;
    update(
      params: Params$Resource$Organizations$Sites$Email$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Email$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1EmailTemplate>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1EmailTemplate> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Email$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Email$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1EmailTemplate>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1EmailTemplate>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Email$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the email template. Use the following structure in your request:   `organizations/{org}/sites/{site}/email/{email}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Email$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the email template. Use the following structure in your request:   `organizations/{org}/sites/{site}/email/{email}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1EmailTemplateBody;
  }

  export class Resource$Organizations$Sites$File {
    context: APIRequestContext;
    list: Resource$Organizations$Sites$File$List;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.list = new Resource$Organizations$Sites$File$List(this.context);
    }

    /**
     * apigee.organizations.sites.file.delete
     * @desc Deletes a file from the portal.
     * @alias apigee.organizations.sites.file.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1FilenamePayload} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Sites$File$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    delete(
      params: Params$Resource$Organizations$Sites$File$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Sites$File$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$File$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$File$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$File$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/file/delete').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.file.post
     * @desc Uploads a file to the portal.
     * @alias apigee.organizations.sites.file.post
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleApiHttpBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    post(
      params?: Params$Resource$Organizations$Sites$File$Post,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1File>;
    post(
      params: Params$Resource$Organizations$Sites$File$Post,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1File>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1File>
    ): void;
    post(
      params: Params$Resource$Organizations$Sites$File$Post,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1File>
    ): void;
    post(callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1File>): void;
    post(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$File$Post
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1File>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1File>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1File>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1File> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$File$Post;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$File$Post;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/file/post').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1File>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1File>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$File$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1FilenamePayload;
  }
  export interface Params$Resource$Organizations$Sites$File$Post
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleApiHttpBody;
  }

  export class Resource$Organizations$Sites$File$List {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.file.list.list
     * @desc Lists all files stored on the portal.
     * @alias apigee.organizations.sites.file.list.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sites$File$List$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListFilesResponse>;
    list(
      params: Params$Resource$Organizations$Sites$File$List$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListFilesResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListFilesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sites$File$List$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListFilesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListFilesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$File$List$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListFilesResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListFilesResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListFilesResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListFilesResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$File$List$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$File$List$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/file/list').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListFilesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ListFilesResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$File$List$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sites$Menuitems {
    context: APIRequestContext;
    toggle: Resource$Organizations$Sites$Menuitems$Toggle;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.toggle = new Resource$Organizations$Sites$Menuitems$Toggle(
        this.context
      );
    }

    /**
     * apigee.organizations.sites.menuitems.create
     * @desc Creates a menu item.
     * @alias apigee.organizations.sites.menuitems.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1MenuItemData} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Sites$Menuitems$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1MenuItem>;
    create(
      params: Params$Resource$Organizations$Sites$Menuitems$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void;
    create(
      params: Params$Resource$Organizations$Sites$Menuitems$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menuitems$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1MenuItem> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menuitems$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menuitems$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/menuitems').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1MenuItem>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1MenuItem>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.menuitems.delete
     * @desc Deletes a menu item.
     * @alias apigee.organizations.sites.menuitems.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Sites$Menuitems$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    delete(
      params: Params$Resource$Organizations$Sites$Menuitems$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Sites$Menuitems$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menuitems$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menuitems$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menuitems$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.menuitems.list
     * @desc Lists all menu items.
     * @alias apigee.organizations.sites.menuitems.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sites$Menuitems$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>;
    list(
      params: Params$Resource$Organizations$Sites$Menuitems$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sites$Menuitems$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menuitems$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuItemsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menuitems$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menuitems$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/menuitems').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListMenuItemsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.sites.menuitems.listItemsByType
     * @desc Lists the menu items for a menu type.
     * @alias apigee.organizations.sites.menuitems.listItemsByType
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    listItemsByType(
      params?: Params$Resource$Organizations$Sites$Menuitems$Listitemsbytype,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>;
    listItemsByType(
      params: Params$Resource$Organizations$Sites$Menuitems$Listitemsbytype,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void;
    listItemsByType(
      params: Params$Resource$Organizations$Sites$Menuitems$Listitemsbytype,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void;
    listItemsByType(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void;
    listItemsByType(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menuitems$Listitemsbytype
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuItemsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuItemsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menuitems$Listitemsbytype;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menuitems$Listitemsbytype;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListMenuItemsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListMenuItemsResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.sites.menuitems.publish
     * @desc Publishes all menu items.
     * @alias apigee.organizations.sites.menuitems.publish
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    publish(
      params?: Params$Resource$Organizations$Sites$Menuitems$Publish,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    publish(
      params: Params$Resource$Organizations$Sites$Menuitems$Publish,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      params: Params$Resource$Organizations$Sites$Menuitems$Publish,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menuitems$Publish
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menuitems$Publish;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menuitems$Publish;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/publish').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.menuitems.update
     * @desc Updates a menu item.
     * @alias apigee.organizations.sites.menuitems.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     * @param {().GoogleCloudApigeeV1MenuItemData} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Sites$Menuitems$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1MenuItem>;
    update(
      params: Params$Resource$Organizations$Sites$Menuitems$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void;
    update(
      params: Params$Resource$Organizations$Sites$Menuitems$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menuitems$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuItem>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1MenuItem> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menuitems$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menuitems$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1MenuItem>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1MenuItem>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Menuitems$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1MenuItemData;
  }
  export interface Params$Resource$Organizations$Sites$Menuitems$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Menuitems$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Menuitems$Listitemsbytype
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Menuitems$Publish
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Menuitems$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1MenuItemData;
  }

  export class Resource$Organizations$Sites$Menuitems$Toggle {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.menuitems.toggle.nested
     * @desc Toggles the nesting of a menu item.
     * @alias apigee.organizations.sites.menuitems.toggle.nested
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     * @param {().GoogleCloudApigeeV1NestedPayload} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    nested(
      params?: Params$Resource$Organizations$Sites$Menuitems$Toggle$Nested,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    nested(
      params: Params$Resource$Organizations$Sites$Menuitems$Toggle$Nested,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    nested(
      params: Params$Resource$Organizations$Sites$Menuitems$Toggle$Nested,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    nested(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    nested(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menuitems$Toggle$Nested
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menuitems$Toggle$Nested;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menuitems$Toggle$Nested;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/toggle/nested').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Menuitems$Toggle$Nested
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the menu item. Use the following structure in your request:   `organizations/{org}/sites/{site}/menuitems/{menuitem}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1NestedPayload;
  }

  export class Resource$Organizations$Sites$Menutypes {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.menutypes.create
     * @desc Creates a menu type.
     * @alias apigee.organizations.sites.menutypes.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1MenuTypeData} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Sites$Menutypes$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1MenuType>;
    create(
      params: Params$Resource$Organizations$Sites$Menutypes$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuType>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuType>
    ): void;
    create(
      params: Params$Resource$Organizations$Sites$Menutypes$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuType>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuType>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menutypes$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuType>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuType>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1MenuType>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1MenuType> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menutypes$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menutypes$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/menutypes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1MenuType>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1MenuType>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.menutypes.delete
     * @desc Deletes a menu type.
     * @alias apigee.organizations.sites.menutypes.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the menu type. Use the following structure in your request:   `organizations/{org}/sites/{site}/menutypes/{menutype}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Sites$Menutypes$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    delete(
      params: Params$Resource$Organizations$Sites$Menutypes$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Sites$Menutypes$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menutypes$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menutypes$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menutypes$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.menutypes.list
     * @desc Lists all menu types.
     * @alias apigee.organizations.sites.menutypes.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sites$Menutypes$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>;
    list(
      params: Params$Resource$Organizations$Sites$Menutypes$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sites$Menutypes$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Menutypes$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuTypesResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Menutypes$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Menutypes$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/menutypes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListMenuTypesResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Menutypes$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1MenuTypeData;
  }
  export interface Params$Resource$Organizations$Sites$Menutypes$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the menu type. Use the following structure in your request:   `organizations/{org}/sites/{site}/menutypes/{menutype}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Menutypes$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sites$Pages {
    context: APIRequestContext;
    menutypes: Resource$Organizations$Sites$Pages$Menutypes;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.menutypes = new Resource$Organizations$Sites$Pages$Menutypes(
        this.context
      );
    }

    /**
     * apigee.organizations.sites.pages.content
     * @desc Updates the draft content of a page on the portal.
     * @alias apigee.organizations.sites.pages.content
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     * @param {().GoogleCloudApigeeV1PageContentPayload} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    content(
      params?: Params$Resource$Organizations$Sites$Pages$Content,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    content(
      params: Params$Resource$Organizations$Sites$Pages$Content,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    content(
      params: Params$Resource$Organizations$Sites$Pages$Content,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    content(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    content(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Content
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Content;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Content;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/content').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.pages.create
     * @desc Creates a new page on the portal.
     * @alias apigee.organizations.sites.pages.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:  `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1PageBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Sites$Pages$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Page>;
    create(
      params: Params$Resource$Organizations$Sites$Pages$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    create(
      params: Params$Resource$Organizations$Sites$Pages$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Create
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Page> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/pages').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Page>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Page>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.pages.delete
     * @desc Deletes a page from the portal.
     * @alias apigee.organizations.sites.pages.delete
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    delete(
      params?: Params$Resource$Organizations$Sites$Pages$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    delete(
      params: Params$Resource$Organizations$Sites$Pages$Delete,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      params: Params$Resource$Organizations$Sites$Pages$Delete,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Delete
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.pages.get
     * @desc Gets a page on the portal.
     * @alias apigee.organizations.sites.pages.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Sites$Pages$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Page>;
    get(
      params: Params$Resource$Organizations$Sites$Pages$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    get(
      params: Params$Resource$Organizations$Sites$Pages$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    get(callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Page> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Page>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Page>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.pages.list
     * @desc Lists the pages on the portal.
     * @alias apigee.organizations.sites.pages.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:  `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sites$Pages$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListPagesResponse>;
    list(
      params: Params$Resource$Organizations$Sites$Pages$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListPagesResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPagesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sites$Pages$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPagesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPagesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListPagesResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListPagesResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListPagesResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListPagesResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/pages').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListPagesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ListPagesResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.pages.publish
     * @desc Publishes a page on the portal.
     * @alias apigee.organizations.sites.pages.publish
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    publish(
      params?: Params$Resource$Organizations$Sites$Pages$Publish,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    publish(
      params: Params$Resource$Organizations$Sites$Pages$Publish,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      params: Params$Resource$Organizations$Sites$Pages$Publish,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    publish(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Publish
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Publish;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Publish;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/publish').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.pages.unpublish
     * @desc Unpublishes a page on the portal.
     * @alias apigee.organizations.sites.pages.unpublish
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    unpublish(
      params?: Params$Resource$Organizations$Sites$Pages$Unpublish,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    unpublish(
      params: Params$Resource$Organizations$Sites$Pages$Unpublish,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    unpublish(
      params: Params$Resource$Organizations$Sites$Pages$Unpublish,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    unpublish(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    unpublish(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Unpublish
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Unpublish;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Unpublish;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/unpublish').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.pages.update
     * @desc Updates a page on the portal.
     * @alias apigee.organizations.sites.pages.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     * @param {().GoogleCloudApigeeV1PageBody} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Sites$Pages$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Page>;
    update(
      params: Params$Resource$Organizations$Sites$Pages$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    update(
      params: Params$Resource$Organizations$Sites$Pages$Update,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    update(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Page>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Page> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Page>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Page>(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Pages$Content
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1PageContentPayload;
  }
  export interface Params$Resource$Organizations$Sites$Pages$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:  `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1PageBody;
  }
  export interface Params$Resource$Organizations$Sites$Pages$Delete
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Pages$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Sites$Pages$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:  `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Pages$Publish
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Pages$Unpublish
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Pages$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the page. Use the following structure in your request:  `organizations/{org}/sites/{site}/pages/{page}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1PageBody;
  }

  export class Resource$Organizations$Sites$Pages$Menutypes {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.pages.menutypes.list
     * @desc Lists the menu types that reference a specific page.
     * @alias apigee.organizations.sites.pages.menutypes.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the page. Use the following structure in your request:   `organizations/{org}/sites/{site}/pages/{page}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Sites$Pages$Menutypes$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>;
    list(
      params: Params$Resource$Organizations$Sites$Pages$Menutypes$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Sites$Pages$Menutypes$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Pages$Menutypes$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListMenuTypesResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListMenuTypesResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Pages$Menutypes$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Pages$Menutypes$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/menutypes').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListMenuTypesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListMenuTypesResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Pages$Menutypes$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the page. Use the following structure in your request:   `organizations/{org}/sites/{site}/pages/{page}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sites$Site {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.site.analytics
     * @desc Updates the custom analytics script for a portal.
     * @alias apigee.organizations.sites.site.analytics
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1AnalyticsUpdatePayload} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    analytics(
      params?: Params$Resource$Organizations$Sites$Site$Analytics,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    analytics(
      params: Params$Resource$Organizations$Sites$Site$Analytics,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    analytics(
      params: Params$Resource$Organizations$Sites$Site$Analytics,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    analytics(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    analytics(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Site$Analytics
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Site$Analytics;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Site$Analytics;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/site/analytics').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.site.approvedEmails
     * @desc Restricts portal registration by identifying the individual email addresses or email domains that can create accounts on the portal.
     * @alias apigee.organizations.sites.site.approvedEmails
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1ApprovedEmailsPayload} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    approvedEmails(
      params?: Params$Resource$Organizations$Sites$Site$Approvedemails,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    approvedEmails(
      params: Params$Resource$Organizations$Sites$Site$Approvedemails,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    approvedEmails(
      params: Params$Resource$Organizations$Sites$Site$Approvedemails,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    approvedEmails(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    approvedEmails(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Site$Approvedemails
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Site$Approvedemails;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Site$Approvedemails;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/site/approvedEmails').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.site.clone
     * @desc Clones an existing portal.
     * @alias apigee.organizations.sites.site.clone
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1SiteData} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    clone(
      params?: Params$Resource$Organizations$Sites$Site$Clone,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Site>;
    clone(
      params: Params$Resource$Organizations$Sites$Site$Clone,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    clone(
      params: Params$Resource$Organizations$Sites$Site$Clone,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void;
    clone(callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>): void;
    clone(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Site$Clone
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Site>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Site> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Site$Clone;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Site$Clone;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/site/clone').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters, callback);
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Site>(parameters);
      }
    }

    /**
     * apigee.organizations.sites.site.defaultanonallowed
     * @desc Sets the default visibility to all users (public), using the `defaultAnonAllowed` flag, for pages and API products that are published on the portal.
     * @alias apigee.organizations.sites.site.defaultanonallowed
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {().GoogleCloudApigeeV1DefaultAnonAllowed} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    defaultanonallowed(
      params?: Params$Resource$Organizations$Sites$Site$Defaultanonallowed,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    defaultanonallowed(
      params: Params$Resource$Organizations$Sites$Site$Defaultanonallowed,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    defaultanonallowed(
      params: Params$Resource$Organizations$Sites$Site$Defaultanonallowed,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    defaultanonallowed(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    defaultanonallowed(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Site$Defaultanonallowed
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Site$Defaultanonallowed;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Site$Defaultanonallowed;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/site/defaultanonallowed').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.site.getDefaultanonallowed
     * @desc Gets the `defaultAnonAllowed` flag setting for a portal. This flag defines the default visibility for pages and API products that are published on the portal.
     * @alias apigee.organizations.sites.site.getDefaultanonallowed
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getDefaultanonallowed(
      params?: Params$Resource$Organizations$Sites$Site$Getdefaultanonallowed,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse>;
    getDefaultanonallowed(
      params: Params$Resource$Organizations$Sites$Site$Getdefaultanonallowed,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getDefaultanonallowed(
      params: Params$Resource$Organizations$Sites$Site$Getdefaultanonallowed,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getDefaultanonallowed(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void;
    getDefaultanonallowed(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Site$Getdefaultanonallowed
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1StringResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1StringResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Site$Getdefaultanonallowed;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Site$Getdefaultanonallowed;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/site/defaultanonallowed').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1StringResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.sites.site.key
     * @desc Regenerates the secret key for a portal.
     * @alias apigee.organizations.sites.site.key
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    key(
      params?: Params$Resource$Organizations$Sites$Site$Key,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    key(
      params: Params$Resource$Organizations$Sites$Site$Key,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    key(
      params: Params$Resource$Organizations$Sites$Site$Key,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    key(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    key(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Site$Key
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Site$Key;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Site$Key;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/site/key').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Site$Analytics
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1AnalyticsUpdatePayload;
  }
  export interface Params$Resource$Organizations$Sites$Site$Approvedemails
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1ApprovedEmailsPayload;
  }
  export interface Params$Resource$Organizations$Sites$Site$Clone
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1SiteData;
  }
  export interface Params$Resource$Organizations$Sites$Site$Defaultanonallowed
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1DefaultAnonAllowed;
  }
  export interface Params$Resource$Organizations$Sites$Site$Getdefaultanonallowed
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Sites$Site$Key
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sites$Smtp {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.smtp.reset
     * @desc Resets the default settings for the SMTP configuration for a portal.
     * @alias apigee.organizations.sites.smtp.reset
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    reset(
      params?: Params$Resource$Organizations$Sites$Smtp$Reset,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    reset(
      params: Params$Resource$Organizations$Sites$Smtp$Reset,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    reset(
      params: Params$Resource$Organizations$Sites$Smtp$Reset,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    reset(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    reset(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Smtp$Reset
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Smtp$Reset;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Smtp$Reset;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/smtp/reset').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Smtp$Reset
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the portal. Use the following structure in your request:   `organizations/{org}/sites/{site}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Sites$Specs {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.specs.listProxySpecs
     * @desc Lists details for the OpenAPI Specifications associated with an API.
     * @alias apigee.organizations.sites.specs.listProxySpecs
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the API. Use the following structure in your request:   `organizations/{org}sites/{site}/specs/{api}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    listProxySpecs(
      params?: Params$Resource$Organizations$Sites$Specs$Listproxyspecs,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListProxySpecsResponse>;
    listProxySpecs(
      params: Params$Resource$Organizations$Sites$Specs$Listproxyspecs,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListProxySpecsResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListProxySpecsResponse
      >
    ): void;
    listProxySpecs(
      params: Params$Resource$Organizations$Sites$Specs$Listproxyspecs,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListProxySpecsResponse
      >
    ): void;
    listProxySpecs(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListProxySpecsResponse
      >
    ): void;
    listProxySpecs(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Specs$Listproxyspecs
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListProxySpecsResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListProxySpecsResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListProxySpecsResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListProxySpecsResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Specs$Listproxyspecs;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Specs$Listproxyspecs;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListProxySpecsResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListProxySpecsResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Specs$Listproxyspecs
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the API. Use the following structure in your request:   `organizations/{org}sites/{site}/specs/{api}`
     */
    name?: string;
  }

  export class Resource$Organizations$Sites$Zones {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.sites.zones.associateSiteZone
     * @desc Associates a portal with a zone.
     * @alias apigee.organizations.sites.zones.associateSiteZone
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    associateSiteZone(
      params?: Params$Resource$Organizations$Sites$Zones$Associatesitezone,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper>;
    associateSiteZone(
      params: Params$Resource$Organizations$Sites$Zones$Associatesitezone,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    associateSiteZone(
      params: Params$Resource$Organizations$Sites$Zones$Associatesitezone,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    associateSiteZone(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void;
    associateSiteZone(
      paramsOrCallback?:
        | Params$Resource$Organizations$Sites$Zones$Associatesitezone
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ApiResponseWrapper>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ApiResponseWrapper
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ApiResponseWrapper> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Sites$Zones$Associatesitezone;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Sites$Zones$Associatesitezone;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ApiResponseWrapper>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Sites$Zones$Associatesitezone
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     */
    name?: string;
  }

  export class Resource$Organizations$System {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.system.getAnnouncements
     * @desc Gets any cross-organizational announcement that you want to display to customers on the UI.
     * @alias apigee.organizations.system.getAnnouncements
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    getAnnouncements(
      params?: Params$Resource$Organizations$System$Getannouncements,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1Announcement>;
    getAnnouncements(
      params: Params$Resource$Organizations$System$Getannouncements,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Announcement>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Announcement>
    ): void;
    getAnnouncements(
      params: Params$Resource$Organizations$System$Getannouncements,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Announcement>
    ): void;
    getAnnouncements(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1Announcement>
    ): void;
    getAnnouncements(
      paramsOrCallback?:
        | Params$Resource$Organizations$System$Getannouncements
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Announcement>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1Announcement>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1Announcement>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1Announcement> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$System$Getannouncements;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$System$Getannouncements;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/system/announcements').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1Announcement>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1Announcement>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$System$Getannouncements
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
  }

  export class Resource$Organizations$Zones {
    context: APIRequestContext;
    identity_providers: Resource$Organizations$Zones$Identity_providers;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.identity_providers = new Resource$Organizations$Zones$Identity_providers(
        this.context
      );
    }

    /**
     * apigee.organizations.zones.certificate
     * @desc Validates a certificate in a zone.
     * @alias apigee.organizations.zones.certificate
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {().GoogleCloudApigeeV1VerifyCertificateRequest} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    certificate(
      params?: Params$Resource$Organizations$Zones$Certificate,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1VerifyCertificateResponse>;
    certificate(
      params: Params$Resource$Organizations$Zones$Certificate,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1VerifyCertificateResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1VerifyCertificateResponse
      >
    ): void;
    certificate(
      params: Params$Resource$Organizations$Zones$Certificate,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1VerifyCertificateResponse
      >
    ): void;
    certificate(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1VerifyCertificateResponse
      >
    ): void;
    certificate(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Certificate
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1VerifyCertificateResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1VerifyCertificateResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1VerifyCertificateResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1VerifyCertificateResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Certificate;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Certificate;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/zones/certificate').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1VerifyCertificateResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1VerifyCertificateResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.zones.get
     * @desc Gets a zone.
     * @alias apigee.organizations.zones.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Zones$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1GetZoneResponse>;
    get(
      params: Params$Resource$Organizations$Zones$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1GetZoneResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1GetZoneResponse>
    ): void;
    get(
      params: Params$Resource$Organizations$Zones$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1GetZoneResponse>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudApigeeV1GetZoneResponse>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Get
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1GetZoneResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1GetZoneResponse>,
      callback?: BodyResponseCallback<Schema$GoogleCloudApigeeV1GetZoneResponse>
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1GetZoneResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1GetZoneResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1GetZoneResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.zones.list
     * @desc Lists the zones for an Apigee organization.
     * @alias apigee.organizations.zones.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name for the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Zones$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListZonesResponse>;
    list(
      params: Params$Resource$Organizations$Zones$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListZonesResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListZonesResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Zones$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListZonesResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListZonesResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$List
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListZonesResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1ListZonesResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListZonesResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1ListZonesResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/zones').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1ListZonesResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1ListZonesResponse>(
          parameters
        );
      }
    }

    /**
     * apigee.organizations.zones.update
     * @desc Updates a zone.
     * @alias apigee.organizations.zones.update
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     * @param {().GoogleCloudApigeeV1Zone} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    update(
      params?: Params$Resource$Organizations$Zones$Update,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1UpdateZoneResponse>;
    update(
      params: Params$Resource$Organizations$Zones$Update,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1UpdateZoneResponse>,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateZoneResponse
      >
    ): void;
    update(
      params: Params$Resource$Organizations$Zones$Update,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateZoneResponse
      >
    ): void;
    update(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateZoneResponse
      >
    ): void;
    update(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Update
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1UpdateZoneResponse>,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudApigeeV1UpdateZoneResponse>,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateZoneResponse
      >
    ): void | GaxiosPromise<Schema$GoogleCloudApigeeV1UpdateZoneResponse> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Update;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Update;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PUT',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1UpdateZoneResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudApigeeV1UpdateZoneResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Organizations$Zones$Certificate
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1VerifyCertificateRequest;
  }
  export interface Params$Resource$Organizations$Zones$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Zones$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name for the Apigee organization. Use the following structure in your request:   `organizations/{org}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Zones$Update
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1Zone;
  }

  export class Resource$Organizations$Zones$Identity_providers {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * apigee.organizations.zones.identity_providers.create
     * @desc Creates an identity provider in a zone.
     * @alias apigee.organizations.zones.identity_providers.create
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     * @param {().GoogleCloudApigeeV1IdentityProvider} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    create(
      params?: Params$Resource$Organizations$Zones$Identity_providers$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse>;
    create(
      params: Params$Resource$Organizations$Zones$Identity_providers$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
      >
    ): void;
    create(
      params: Params$Resource$Organizations$Zones$Identity_providers$Create,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
      >
    ): void;
    create(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
      >
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Identity_providers$Create
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Identity_providers$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Identity_providers$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/identity_providers').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1CreateIdentityProviderResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.zones.identity_providers.get
     * @desc Gets an identity provider in a zone.
     * @alias apigee.organizations.zones.identity_providers.get
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    get(
      params?: Params$Resource$Organizations$Zones$Identity_providers$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1GetIdentityProviderResponse>;
    get(
      params: Params$Resource$Organizations$Zones$Identity_providers$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
      >
    ): void;
    get(
      params: Params$Resource$Organizations$Zones$Identity_providers$Get,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
      >
    ): void;
    get(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
      >
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Identity_providers$Get
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Identity_providers$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Identity_providers$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudApigeeV1GetIdentityProviderResponse>(
          parameters,
          callback
        );
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1GetIdentityProviderResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.zones.identity_providers.list
     * @desc Lists the identity providers in a zone. Underscore in URL
     * @alias apigee.organizations.zones.identity_providers.list
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    list(
      params?: Params$Resource$Organizations$Zones$Identity_providers$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse>;
    list(
      params: Params$Resource$Organizations$Zones$Identity_providers$List,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
      >
    ): void;
    list(
      params: Params$Resource$Organizations$Zones$Identity_providers$List,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
      >
    ): void;
    list(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
      >
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Identity_providers$List
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Identity_providers$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Identity_providers$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/identity_providers').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1ListIdentityProvidersResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.zones.identity_providers.patch
     * @desc Updates an identity provider in a zone.
     * @alias apigee.organizations.zones.identity_providers.patch
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.name Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     * @param {().GoogleCloudApigeeV1IdentityProvider} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    patch(
      params?: Params$Resource$Organizations$Zones$Identity_providers$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse>;
    patch(
      params: Params$Resource$Organizations$Zones$Identity_providers$Patch,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
      >
    ): void;
    patch(
      params: Params$Resource$Organizations$Zones$Identity_providers$Patch,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
      >
    ): void;
    patch(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
      >
    ): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Identity_providers$Patch
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Identity_providers$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Identity_providers$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1UpdateIdentityProviderResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.zones.identity_providers.updateCertificate
     * @desc Updates the certificate for an identity provider.
     * @alias apigee.organizations.zones.identity_providers.updateCertificate
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     * @param {().GoogleCloudApigeeV1SamlCertificate} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateCertificate(
      params?: Params$Resource$Organizations$Zones$Identity_providers$Updatecertificate,
      options?: MethodOptions
    ): GaxiosPromise<
      Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
    >;
    updateCertificate(
      params: Params$Resource$Organizations$Zones$Identity_providers$Updatecertificate,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
      >
    ): void;
    updateCertificate(
      params: Params$Resource$Organizations$Zones$Identity_providers$Updatecertificate,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
      >
    ): void;
    updateCertificate(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
      >
    ): void;
    updateCertificate(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Identity_providers$Updatecertificate
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Identity_providers$Updatecertificate;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Identity_providers$Updatecertificate;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/certificate').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1UpdateIdentityProviderCertificateResponse
        >(parameters);
      }
    }

    /**
     * apigee.organizations.zones.identity_providers.updateConfig
     * @desc Updates the configuration for an identity provider.
     * @alias apigee.organizations.zones.identity_providers.updateConfig
     * @memberOf! ()
     *
     * @param {object} params Parameters for request
     * @param {string} params.parent Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     * @param {().GoogleCloudApigeeV1IdentityProviderConfig} params.requestBody Request body data
     * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param {callback} callback The callback that handles the response.
     * @return {object} Request object
     */
    updateConfig(
      params?: Params$Resource$Organizations$Zones$Identity_providers$Updateconfig,
      options?: MethodOptions
    ): GaxiosPromise<
      Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
    >;
    updateConfig(
      params: Params$Resource$Organizations$Zones$Identity_providers$Updateconfig,
      options:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
          >,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
      >
    ): void;
    updateConfig(
      params: Params$Resource$Organizations$Zones$Identity_providers$Updateconfig,
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
      >
    ): void;
    updateConfig(
      callback: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
      >
    ): void;
    updateConfig(
      paramsOrCallback?:
        | Params$Resource$Organizations$Zones$Identity_providers$Updateconfig
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
          >,
      optionsOrCallback?:
        | MethodOptions
        | BodyResponseCallback<
            Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
          >,
      callback?: BodyResponseCallback<
        Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
      >
    ): void | GaxiosPromise<
      Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
    > {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Organizations$Zones$Identity_providers$Updateconfig;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Organizations$Zones$Identity_providers$Updateconfig;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl = options.rootUrl || 'https://apigee.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/config').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<
          Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
        >(parameters, callback);
      } else {
        return createAPIRequest<
          Schema$GoogleCloudApigeeV1UpdateIdentityProviderConfigResponse
        >(parameters);
      }
    }
  }

  export interface Params$Resource$Organizations$Zones$Identity_providers$Create
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1IdentityProvider;
  }
  export interface Params$Resource$Organizations$Zones$Identity_providers$Get
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     */
    name?: string;
  }
  export interface Params$Resource$Organizations$Zones$Identity_providers$List
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the zone. Use the following structure in your request:   `organizations/{org}/zones/{zone}`
     */
    parent?: string;
  }
  export interface Params$Resource$Organizations$Zones$Identity_providers$Patch
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1IdentityProvider;
  }
  export interface Params$Resource$Organizations$Zones$Identity_providers$Updatecertificate
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1SamlCertificate;
  }
  export interface Params$Resource$Organizations$Zones$Identity_providers$Updateconfig
    extends StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient;

    /**
     * Required. Name of the identity provider. Use the following structure in your request:   `organizations/{org}/zones/{zone}/identity_providers/{identity_provider}`
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudApigeeV1IdentityProviderConfig;
  }
}
