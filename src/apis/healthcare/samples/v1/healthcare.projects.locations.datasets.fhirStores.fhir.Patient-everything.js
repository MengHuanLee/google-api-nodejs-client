// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! THIS FILE IS AUTO-GENERATED */

const {google} = require('googleapis');
const healthcare = google.healthcare('v1');

/*
 * Retrieves all the resources directly referenced by a patient, as well as
 * all of the resources in the patient compartment.
 *
 * Implements the FHIR extended operation Patient-everything
 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything),
 * [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything),
 * [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)).
 *
 * On success, the response body will contain a JSON-encoded representation
 * of a `Bundle` resource of type `searchset`, containing the results of the
 * operation.
 * Errors generated by the FHIR store will contain a JSON-encoded
 * `OperationOutcome` resource describing the reason for the error. If the
 * request cannot be mapped to a valid API method on a FHIR store, a generic
 * GCP error might be returned instead.
 */

async function main() {
  // By default, this method will look for, in order:
  // 1. An environment variable set to `GOOGLE_APPLICATION_CREDENTIALS`
  //    pointing to a service account credential file
  // 2. A GCE metadata server, present in Google Cloud products like
  //    Compute Engine, Kubernetes Engine, Cloud Run, etc
  // 3. A local OAuth token written by the Cloud SDK, obtained by running
  //    `gcloud auth application-default login`.  This is preferred for local
  //    development.
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: ['https://www.googleapis.com/auth/cloud-platform'],
  });

  // Acquire an auth client, and bind it to all future calls
  const authClient = await auth.getClient();
  google.options('auth', authClient);

  // Do the magic
  const res =
    (await healthcare.projects.locations.datasets.fhirStores.fhir.Patient) -
    everything({
      // The response includes records prior to the end date. If no end date is provided, all records subsequent to the start date are in scope.
      end: 'placeholder-value',
      // Name of the `Patient` resource for which the information is required.
      name:
        'projects/my-project/locations/my-location/datasets/[^/]+/fhirStores/[^/]+/fhir/Patient/[^/]+',
      // The response includes records subsequent to the start date. If no start date is provided, all records prior to the end date are in scope.
      start: 'placeholder-value',
      // Maximum number of resources in a page. Defaults to 100.
      _count: 'placeholder-value',
      // Used to retrieve the next or previous page of results when using pagination. Value should be set to the value of page_token set in next or previous page links' urls. Next and previous page are returned in the response bundle's links field, where `link.relation` is "previous" or "next".  Omit `page_token` if no previous request has been made.
      _page_token: 'placeholder-value',
    });
  console.log(res.data);
}

main().catch(e => {
  console.error(e);
  throw e;
});
