// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! THIS FILE IS AUTO-GENERATED */

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

/*
 * Retrieves the N most recent `Observation` resources for a subject matching
 * search criteria specified as query parameters, grouped by
 * `Observation.code`, sorted from most recent to oldest.
 *
 * Implements the FHIR extended operation Observation-lastn
 * ([STU3](http://hl7.org/implement/standards/fhir/STU3/observation-operations.html#lastn),
 * [R4](http://hl7.org/implement/standards/fhir/R4/observation-operations.html#lastn)).
 *
 * DSTU2 doesn't define the Observation-lastn method, but the server supports
 * it the same way it supports STU3.
 *
 * Search terms are provided as query parameters following the same pattern as
 * the search method. The following search parameters must
 * be provided:
 *
 *     - `subject` or `patient` to specify a subject for the Observation.
 *     - `code`, `category` or any of the composite parameters that include
 *       `code`.
 *
 * Any other valid Observation search parameters can also be provided. This
 * operation accepts an additional query parameter `max`, which specifies N,
 * the maximum number of Observations to return from each group, with a
 * default of 1.
 *
 * Searches with over 1000 results are rejected. Results are counted before
 * grouping and limiting the results with `max`. To stay within the limit,
 * constrain these searches using Observation search parameters such as
 * `_lastUpdated` or `date`.
 *
 * On success, the response body will contain a JSON-encoded representation
 * of a `Bundle` resource of type `searchset`, containing the results of the
 * operation.
 * Errors generated by the FHIR store will contain a JSON-encoded
 * `OperationOutcome` resource describing the reason for the error. If the
 * request cannot be mapped to a valid API method on a FHIR store, a generic
 * GCP error might be returned instead.
 */

async function main() {
  // By default, this method will look for, in order:
  // 1. An environment variable set to `GOOGLE_APPLICATION_CREDENTIALS`
  //    pointing to a service account credential file
  // 2. A GCE metadata server, present in Google Cloud products like
  //    Compute Engine, Kubernetes Engine, Cloud Run, etc
  // 3. A local OAuth token written by the Cloud SDK, obtained by running
  //    `gcloud auth application-default login`.  This is preferred for local
  //    development.
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: ['https://www.googleapis.com/auth/cloud-platform'],
  });

  // Acquire an auth client, and bind it to all future calls
  const authClient = await auth.getClient();
  google.options('auth', authClient);

  // Do the magic
  const res =
    (await healthcare.projects.locations.datasets.fhirStores.fhir.Observation) -
    lastn({
      // Name of the FHIR store to retrieve resources from.
      parent:
        'projects/my-project/locations/my-location/datasets/[^/]+/fhirStores/[^/]+',
    });
  console.log(res.data);
}

main().catch(e => {
  console.error(e);
  throw e;
});
