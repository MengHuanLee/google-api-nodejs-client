// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! THIS FILE IS AUTO-GENERATED */

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

/*
 * Lists all the versions of a resource (including the current version and
 * deleted versions) from the FHIR store.
 *
 * Implements the per-resource form of the FHIR standard history interaction
 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history),
 * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history),
 * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)).
 *
 * On success, the response body will contain a JSON-encoded representation
 * of a `Bundle` resource of type `history`, containing the version history
 * sorted from most recent to oldest versions.
 * Errors generated by the FHIR store will contain a JSON-encoded
 * `OperationOutcome` resource describing the reason for the error. If the
 * request cannot be mapped to a valid API method on a FHIR store, a generic
 * GCP error might be returned instead.
 */

async function main() {
  // By default, this method will look for, in order:
  // 1. An environment variable set to `GOOGLE_APPLICATION_CREDENTIALS`
  //    pointing to a service account credential file
  // 2. A GCE metadata server, present in Google Cloud products like
  //    Compute Engine, Kubernetes Engine, Cloud Run, etc
  // 3. A local OAuth token written by the Cloud SDK, obtained by running
  //    `gcloud auth application-default login`.  This is preferred for local
  //    development.
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: ['https://www.googleapis.com/auth/cloud-platform'],
  });

  // Acquire an auth client, and bind it to all future calls
  const authClient = await auth.getClient();
  google.options('auth', authClient);

  // Do the magic
  const res = await healthcare.projects.locations.datasets.fhirStores.fhir.history(
    {
      // The name of the resource to retrieve.
      name:
        'projects/my-project/locations/my-location/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+',
      // Only include resource versions that were current at some point during the time period specified in the date time value. The date parameter format is yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm]  Clients may specify any of the following:  *  An entire year: `_at=2019` *  An entire month: `_at=2019-01` *  A specific day: `_at=2019-01-20` *  A specific second: `_at=2018-12-31T23:59:58Z`
      _at: 'placeholder-value',
      // The maximum number of search results on a page. Defaults to 1000.
      _count: 'placeholder-value',
      // Used to retrieve the first, previous, next, or last page of resource versions when using pagination. Value should be set to the value of `_page_token` set in next or previous page links' URLs. Next and previous page are returned in the response bundle's links field, where `link.relation` is "previous" or "next".  Omit `_page_token` if no previous request has been made.
      _page_token: 'placeholder-value',
      // Only include resource versions that were created at or after the given instant in time. The instant in time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz (for example 2015-02-07T13:28:17.239+02:00 or 2017-01-01T00:00:00Z). The time must be specified to the second and include a time zone.
      _since: 'placeholder-value',
    }
  );
  console.log(res.data);
}

main().catch(e => {
  console.error(e);
  throw e;
});
