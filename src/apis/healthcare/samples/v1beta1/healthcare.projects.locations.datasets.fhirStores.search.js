// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! THIS FILE IS AUTO-GENERATED */

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

/*
 * Searches for resources in the given FHIR store according to criteria
 * specified as query parameters.
 *
 * Implements the FHIR standard search interaction
 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
 * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
 * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search))
 * using the search semantics described in the FHIR Search specification
 * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html),
 * [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
 * [R4](http://hl7.org/implement/standards/fhir/R4/search.html)).
 *
 * Supports three methods of search defined by the specification:
 *
 * *  `GET [base]?[parameters]` to search across all resources.
 * *  `GET [base]/[type]?[parameters]` to search resources of a specified
 * type.
 * *  `POST [base]/[type]/_search?[parameters]` as an alternate form having
 * the same semantics as the `GET` method.
 *
 * The `GET` methods do not support compartment searches. The `POST` method
 * does not support `application/x-www-form-urlencoded` search parameters.
 *
 * On success, the response body will contain a JSON-encoded representation
 * of a `Bundle` resource of type `searchset`, containing the results of the
 * search.
 * Errors generated by the FHIR store will contain a JSON-encoded
 * `OperationOutcome` resource describing the reason for the error. If the
 * request cannot be mapped to a valid API method on a FHIR store, a generic
 * GCP error might be returned instead.
 *
 * The server's capability statement, retrieved through
 * capabilities, indicates what search parameters
 * are supported on each FHIR resource. A list of all search parameters
 * defined by the specification can be found in the FHIR Search Parameter
 * Registry
 * ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
 * [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
 * FHIR search parameters for DSTU2 can be found on each resource's definition
 * page.
 *
 * Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`,
 * `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`.
 *
 * Supported search result parameters: `_sort`, `_count`, `_include`,
 * `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`.
 *
 * The maximum number of search results returned defaults to 100, which can
 * be overridden by the `_count` parameter up to a maximum limit of 1000. If
 * there are additional results, the returned `Bundle` will contain
 * pagination links.
 *
 * Resources with a total size larger than 5MB or a field count larger than
 * 50,000 might not be fully searchable as the server might trim its generated
 * search index in those cases.
 *
 * Note: FHIR resources are indexed asynchronously, so there might be a slight
 * delay between the time a resource is created or changes and when the change
 * is reflected in search results.
 */

async function main() {
  // By default, this method will look for, in order:
  // 1. An environment variable set to `GOOGLE_APPLICATION_CREDENTIALS`
  //    pointing to a service account credential file
  // 2. A GCE metadata server, present in Google Cloud products like
  //    Compute Engine, Kubernetes Engine, Cloud Run, etc
  // 3. A local OAuth token written by the Cloud SDK, obtained by running
  //    `gcloud auth application-default login`.  This is preferred for local
  //    development.
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: ['https://www.googleapis.com/auth/cloud-platform'],
  });

  // Acquire an auth client, and bind it to all future calls
  const authClient = await auth.getClient();
  google.options('auth', authClient);

  // Do the magic
  const res = await healthcare.projects.locations.datasets.fhirStores.search({
    // Name of the FHIR store to retrieve resources from.
    parent:
      'projects/my-project/locations/my-location/datasets/[^/]+/fhirStores/[^/]+',
    // The FHIR resource type to search, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
    resourceType: 'placeholder-value',
  });
  console.log(res.data);
}

main().catch(e => {
  console.error(e);
  throw e;
});
